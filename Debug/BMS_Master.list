
BMS_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a97c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  0800ab10  0800ab10  0001ab10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b15c  0800b15c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b15c  0800b15c  0001b15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b164  0800b164  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b164  0800b164  0001b164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b168  0800b168  0001b168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b16c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200001e0  0800b34c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  0800b34c  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fafc  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e77  00000000  00000000  0003fd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00043b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  00044f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a73f  00000000  00000000  00046190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c58  00000000  00000000  000708cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9d29  00000000  00000000  0008a527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00184250  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000619c  00000000  00000000  001842a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aaf4 	.word	0x0800aaf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800aaf4 	.word	0x0800aaf4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <HAL_CAN_RxFifo0MsgPendingCallback>:
CANMsg *msg;

extern int prechargeFlag;
extern int ecuSHDReqFlag;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef pHeader;
	uint8_t rxData[8];
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pHeader, rxData);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	f107 021c 	add.w	r2, r7, #28
 8000f50:	2100      	movs	r1, #0
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f002 f843 	bl	8002fde <HAL_CAN_GetRxMessage>
//	canSend(pHeader.StdId, rxData);
	CANMsg msg={ &pHeader, rxData};
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	721a      	strb	r2, [r3, #8]
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	723b      	strb	r3, [r7, #8]
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	727b      	strb	r3, [r7, #9]
//	xQueueSendToBackFromISR(CAN_Rx_Queue,&(msg), portMAX_DELAY );
	 //From ECATU
	        if (pHeader.StdId == 0x097)
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	2b97      	cmp	r3, #151	; 0x97
 8000f78:	d109      	bne.n	8000f8e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	        {
	            if (rxData[0] == 1)
 8000f7a:	7d3b      	ldrb	r3, [r7, #20]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d106      	bne.n	8000f8e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	            {
	                //start PrechargeProcess
	                if (prechargeFlag != 1)
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d002      	beq.n	8000f8e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	                    prechargeFlag = 1;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
	            }
	        }
	        //From ECATU
	        if (pHeader.StdId == 0x300)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f94:	d10b      	bne.n	8000fae <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	        {
	            if (rxData[2] & 0x40)
 8000f96:	7dbb      	ldrb	r3, [r7, #22]
 8000f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	            {
	                //open SHUT DOWN Circuit
	                if (ecuSHDReqFlag != 1)
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d002      	beq.n	8000fae <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	                    ecuSHDReqFlag = 1;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]
	            }
	        }

//	        canSend(pHeader.StdId, rxData);

}
 8000fae:	bf00      	nop
 8000fb0:	3738      	adds	r7, #56	; 0x38
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000224 	.word	0x20000224
 8000fbc:	20000228 	.word	0x20000228

08000fc0 <Can_Init>:
//		CANMutex = xSemaphoreCreateMutex();
//
//
//}

void Can_Init(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0


	CAN_FilterTypeDef CanFilter;
	CanFilter.FilterIdHigh = 0x0000;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
	CanFilter.FilterIdLow = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
	CanFilter.FilterMaskIdHigh = 0x0000;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
	CanFilter.FilterMaskIdLow = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
	CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
	CanFilter.FilterBank = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
	CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
	CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61fb      	str	r3, [r7, #28]
	CanFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]


	HAL_CAN_ConfigFilter(&hcan1, &CanFilter);
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <Can_Init+0x4c>)
 8000ff0:	f001 fee7 	bl	8002dc2 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <Can_Init+0x4c>)
 8000ff8:	f002 f903 	bl	8003202 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <Can_Init+0x4c>)
 8000ffe:	f001 ffaa 	bl	8002f56 <HAL_CAN_Start>

}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000238 	.word	0x20000238

08001010 <HAL_TIM_IC_CaptureCallback>:
#include "PwmIn.h"
#include "tim.h"



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7f1b      	ldrb	r3, [r3, #28]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_TIM_IC_CaptureCallback+0x72>
		// Read the IC value
		float ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001020:	2104      	movs	r1, #4
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f004 ff4a 	bl	8005ebc <HAL_TIM_ReadCapturedValue>
 8001028:	ee07 0a90 	vmov	s15, r0
 800102c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001030:	edc7 7a03 	vstr	s15, [r7, #12]
		if(ICValue!=0){
 8001034:	edd7 7a03 	vldr	s15, [r7, #12]
 8001038:	eef5 7a40 	vcmp.f32	s15, #0.0
 800103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001040:	d01f      	beq.n	8001082 <HAL_TIM_IC_CaptureCallback+0x72>
			Duty = 100-(HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) *100)/ICValue;
 8001042:	2100      	movs	r1, #0
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f004 ff39 	bl	8005ebc <HAL_TIM_ReadCapturedValue>
 800104a:	4603      	mov	r3, r0
 800104c:	2264      	movs	r2, #100	; 0x64
 800104e:	fb02 f303 	mul.w	r3, r2, r3
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800105a:	ed97 7a03 	vldr	s14, [r7, #12]
 800105e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001062:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800108c <HAL_TIM_IC_CaptureCallback+0x7c>
 8001066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x80>)
 800106c:	edc3 7a00 	vstr	s15, [r3]
			Frequency = 4000000/ICValue;
 8001070:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001094 <HAL_TIM_IC_CaptureCallback+0x84>
 8001074:	ed97 7a03 	vldr	s14, [r7, #12]
 8001078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x88>)
 800107e:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	42c80000 	.word	0x42c80000
 8001090:	200001fc 	.word	0x200001fc
 8001094:	4a742400 	.word	0x4a742400
 8001098:	20000200 	.word	0x20000200

0800109c <CRC16>:
uint8_t uartFault = 0;          //Uart fault - RECEIVE NOTHING
uint32_t boradFaults = 0;       //Information on which board fault has occurred

//*** CRC calcultaion
//Only used for sending
uint16_t CRC16(BYTE *pBuf, int nLen) {
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	uint16_t wCRC = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	81fb      	strh	r3, [r7, #14]
	int i;

	for (i = 0; i < nLen; i++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	e016      	b.n	80010de <CRC16+0x42>
		wCRC ^= (*pBuf++) & 0x00FF;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010be:	4053      	eors	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	81fb      	strh	r3, [r7, #14]
		wCRC = crc16_table[wCRC & 0x00FF] ^ (wCRC >> 8);
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <CRC16+0x58>)
 80010ca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4053      	eors	r3, r2
 80010d6:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < nLen; i++) {
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	3301      	adds	r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	dbe4      	blt.n	80010b0 <CRC16+0x14>
	}

	return wCRC;
 80010e6:	89fb      	ldrh	r3, [r7, #14]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	0800ab30 	.word	0x0800ab30

080010f8 <WakePL445>:

void WakePL445() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, bmsWakeUp_Pin, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <WakePL445+0x2c>)
 8001104:	f002 ff44 	bl	8003f90 <HAL_GPIO_WritePin>
//    ThisThread::sleep_for(50ms);
	HAL_Delay(50);
 8001108:	2032      	movs	r0, #50	; 0x32
 800110a:	f001 fd3b 	bl	8002b84 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, bmsWakeUp_Pin, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <WakePL445+0x2c>)
 8001116:	f002 ff3b 	bl	8003f90 <HAL_GPIO_WritePin>
//    ThisThread::sleep_for(10ms);
	HAL_Delay(50);
 800111a:	2032      	movs	r0, #50	; 0x32
 800111c:	f001 fd32 	bl	8002b84 <HAL_Delay>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	48000800 	.word	0x48000800

08001128 <setNumOfCellsAndTemps>:



uint64_t setNumOfCellsAndTemps(int numCell, int numTemp){
 8001128:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800112c:	b087      	sub	sp, #28
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]

    int posCell = 1;
 8001134:	2101      	movs	r1, #1
 8001136:	6179      	str	r1, [r7, #20]
    if(numCell == 0){
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	2900      	cmp	r1, #0
 800113c:	d10c      	bne.n	8001158 <setNumOfCellsAndTemps+0x30>
        posCell = 0;
 800113e:	2100      	movs	r1, #0
 8001140:	6179      	str	r1, [r7, #20]
 8001142:	e00c      	b.n	800115e <setNumOfCellsAndTemps+0x36>
    }else{
         while(numCell-1 !=0){
            posCell = posCell << 1;
 8001144:	6979      	ldr	r1, [r7, #20]
 8001146:	0049      	lsls	r1, r1, #1
 8001148:	6179      	str	r1, [r7, #20]
            posCell |= 0x01;
 800114a:	6979      	ldr	r1, [r7, #20]
 800114c:	f041 0101 	orr.w	r1, r1, #1
 8001150:	6179      	str	r1, [r7, #20]
            numCell--;
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	3901      	subs	r1, #1
 8001156:	6079      	str	r1, [r7, #4]
         while(numCell-1 !=0){
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	2901      	cmp	r1, #1
 800115c:	d1f2      	bne.n	8001144 <setNumOfCellsAndTemps+0x1c>
        }
    }

    int posTemp= 1;
 800115e:	2101      	movs	r1, #1
 8001160:	6139      	str	r1, [r7, #16]
    if(numTemp == 0){
 8001162:	6839      	ldr	r1, [r7, #0]
 8001164:	2900      	cmp	r1, #0
 8001166:	d10c      	bne.n	8001182 <setNumOfCellsAndTemps+0x5a>
         posTemp= 0;
 8001168:	2100      	movs	r1, #0
 800116a:	6139      	str	r1, [r7, #16]
 800116c:	e00c      	b.n	8001188 <setNumOfCellsAndTemps+0x60>
    }else{
        while(numTemp-1 !=0){
            posTemp = posTemp << 1;
 800116e:	6939      	ldr	r1, [r7, #16]
 8001170:	0049      	lsls	r1, r1, #1
 8001172:	6139      	str	r1, [r7, #16]
            posTemp |= 0x01;
 8001174:	6939      	ldr	r1, [r7, #16]
 8001176:	f041 0101 	orr.w	r1, r1, #1
 800117a:	6139      	str	r1, [r7, #16]
            numTemp--;
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	3901      	subs	r1, #1
 8001180:	6039      	str	r1, [r7, #0]
        while(numTemp-1 !=0){
 8001182:	6839      	ldr	r1, [r7, #0]
 8001184:	2901      	cmp	r1, #1
 8001186:	d1f2      	bne.n	800116e <setNumOfCellsAndTemps+0x46>
        }
    }

    uint64_t value = (posCell & 0xFFFF) <<16;
 8001188:	6979      	ldr	r1, [r7, #20]
 800118a:	0409      	lsls	r1, r1, #16
 800118c:	4608      	mov	r0, r1
 800118e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001192:	e9c7 0102 	strd	r0, r1, [r7, #8]
    value |= (posTemp & 0xFF) <<8;
 8001196:	6939      	ldr	r1, [r7, #16]
 8001198:	0209      	lsls	r1, r1, #8
 800119a:	4608      	mov	r0, r1
 800119c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80011a0:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80011a4:	f04f 0900 	mov.w	r9, #0
 80011a8:	ea00 0208 	and.w	r2, r0, r8
 80011ac:	ea01 0309 	and.w	r3, r1, r9
 80011b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011b4:	ea40 0402 	orr.w	r4, r0, r2
 80011b8:	ea41 0503 	orr.w	r5, r1, r3
 80011bc:	e9c7 4502 	strd	r4, r5, [r7, #8]
    return value;
 80011c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80011d0:	4770      	bx	lr

080011d2 <WriteFrame>:

int WriteFrame(BYTE bID, uint16_t wAddr, BYTE *pData, BYTE bLen,
		BYTE bWriteType) {
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b08e      	sub	sp, #56	; 0x38
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	603a      	str	r2, [r7, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	460b      	mov	r3, r1
 80011e2:	80bb      	strh	r3, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	71bb      	strb	r3, [r7, #6]

	int bPktLen = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
	BYTE pFrame[32];
	BYTE *pBuf = pFrame;
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t wCRC;

	if (bLen == 7 || bLen > 8)
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	2b07      	cmp	r3, #7
 80011f6:	d002      	beq.n	80011fe <WriteFrame+0x2c>
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d901      	bls.n	8001202 <WriteFrame+0x30>
		return 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	e097      	b.n	8001332 <WriteFrame+0x160>

	memset(pFrame, 0x7F, sizeof(pFrame));
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	2220      	movs	r2, #32
 8001208:	217f      	movs	r1, #127	; 0x7f
 800120a:	4618      	mov	r0, r3
 800120c:	f006 fdc0 	bl	8007d90 <memset>
	if (wAddr > 255) {
 8001210:	88bb      	ldrh	r3, [r7, #4]
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d92f      	bls.n	8001276 <WriteFrame+0xa4>
		*pBuf++ = 0x88 | bWriteType | bLen; // use 16-bit address
 8001216:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	4313      	orrs	r3, r2
 800121e:	b2da      	uxtb	r2, r3
 8001220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001222:	1c59      	adds	r1, r3, #1
 8001224:	6379      	str	r1, [r7, #52]	; 0x34
 8001226:	f062 0277 	orn	r2, r2, #119	; 0x77
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]
		if (bWriteType == FRMWRT_SGL_R || bWriteType == FRMWRT_SGL_NR
 800122e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00b      	beq.n	800124e <WriteFrame+0x7c>
 8001236:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800123a:	2b10      	cmp	r3, #16
 800123c:	d007      	beq.n	800124e <WriteFrame+0x7c>
				|| bWriteType == FRMWRT_GRP_R || bWriteType == FRMWRT_GRP_NR) { //(bWriteType != FRMWRT_ALL_NR)// || (bWriteType != FRMWRT_ALL_R))
 800123e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001242:	2b20      	cmp	r3, #32
 8001244:	d003      	beq.n	800124e <WriteFrame+0x7c>
 8001246:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800124a:	2b30      	cmp	r3, #48	; 0x30
 800124c:	d104      	bne.n	8001258 <WriteFrame+0x86>
			*pBuf++ = (bID & 0x00FF);
 800124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	637a      	str	r2, [r7, #52]	; 0x34
 8001254:	79fa      	ldrb	r2, [r7, #7]
 8001256:	701a      	strb	r2, [r3, #0]
		}
		*pBuf++ = (wAddr & 0xFF00) >> 8;
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	b299      	uxth	r1, r3
 800125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	637a      	str	r2, [r7, #52]	; 0x34
 8001264:	b2ca      	uxtb	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]
		*pBuf++ = wAddr & 0x00FF;
 8001268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	637a      	str	r2, [r7, #52]	; 0x34
 800126e:	88ba      	ldrh	r2, [r7, #4]
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e02f      	b.n	80012d6 <WriteFrame+0x104>
	} else {

		*pBuf++ = 0x80 | bWriteType | bLen; // use 8-bit address
 8001276:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	4313      	orrs	r3, r2
 800127e:	b2da      	uxtb	r2, r3
 8001280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001282:	1c59      	adds	r1, r3, #1
 8001284:	6379      	str	r1, [r7, #52]	; 0x34
 8001286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
		if (bWriteType == FRMWRT_SGL_R || bWriteType == FRMWRT_SGL_NR
 800128e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <WriteFrame+0xdc>
 8001296:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800129a:	2b10      	cmp	r3, #16
 800129c:	d007      	beq.n	80012ae <WriteFrame+0xdc>
				|| bWriteType == FRMWRT_GRP_R || bWriteType == FRMWRT_GRP_NR) {
 800129e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	d003      	beq.n	80012ae <WriteFrame+0xdc>
 80012a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80012aa:	2b30      	cmp	r3, #48	; 0x30
 80012ac:	d104      	bne.n	80012b8 <WriteFrame+0xe6>
			*pBuf++ = (bID & 0x00FF);
 80012ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	637a      	str	r2, [r7, #52]	; 0x34
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	701a      	strb	r2, [r3, #0]
		}
		*pBuf++ = wAddr & 0x00FF;
 80012b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	637a      	str	r2, [r7, #52]	; 0x34
 80012be:	88ba      	ldrh	r2, [r7, #4]
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	701a      	strb	r2, [r3, #0]
	}

	while (bLen--)
 80012c4:	e007      	b.n	80012d6 <WriteFrame+0x104>
		*pBuf++ = *pData++;
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	1c53      	adds	r3, r2, #1
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ce:	1c59      	adds	r1, r3, #1
 80012d0:	6379      	str	r1, [r7, #52]	; 0x34
 80012d2:	7812      	ldrb	r2, [r2, #0]
 80012d4:	701a      	strb	r2, [r3, #0]
	while (bLen--)
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	71ba      	strb	r2, [r7, #6]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f2      	bne.n	80012c6 <WriteFrame+0xf4>

	bPktLen = pBuf - pFrame;
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30

	wCRC = CRC16(pFrame, bPktLen);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fed3 	bl	800109c <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	*pBuf++ = wCRC & 0x00FF;
 80012fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	637a      	str	r2, [r7, #52]	; 0x34
 8001300:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]
	*pBuf++ = (wCRC & 0xFF00) >> 8;
 8001306:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b299      	uxth	r1, r3
 800130c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	637a      	str	r2, [r7, #52]	; 0x34
 8001312:	b2ca      	uxtb	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
	bPktLen += 2;
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	3302      	adds	r3, #2
 800131a:	633b      	str	r3, [r7, #48]	; 0x30

	UART_AsyncTransmitString(1,pFrame,bPktLen);
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001322:	4619      	mov	r1, r3
 8001324:	2001      	movs	r0, #1
 8001326:	f001 f96b 	bl	8002600 <UART_AsyncTransmitString>
	HAL_Delay(1);
 800132a:	2001      	movs	r0, #1
 800132c:	f001 fc2a 	bl	8002b84 <HAL_Delay>

	return bPktLen;
 8001330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001332:	4618      	mov	r0, r3
 8001334:	3738      	adds	r7, #56	; 0x38
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <ReadFrameReq>:
//*** Read Frame function, helper function
//This function is copied from recommended code design
//Main role: pack Register and data for reading data from slaves
//Communication Direction: From Slaves to BMS Master
int  ReadFrameReq(BYTE bID, uint16_t wAddr, BYTE bByteToReturn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af02      	add	r7, sp, #8
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	460b      	mov	r3, r1
 8001346:	80bb      	strh	r3, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	71bb      	strb	r3, [r7, #6]
    BYTE bReturn = bByteToReturn - 1;
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	3b01      	subs	r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	73fb      	strb	r3, [r7, #15]

    if (bReturn > 127)
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	b25b      	sxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	da01      	bge.n	8001360 <ReadFrameReq+0x26>
        return 0;
 800135c:	2300      	movs	r3, #0
 800135e:	e009      	b.n	8001374 <ReadFrameReq+0x3a>

    return WriteFrame(bID, wAddr, &bReturn, 1, FRMWRT_SGL_R);
 8001360:	f107 020f 	add.w	r2, r7, #15
 8001364:	88b9      	ldrh	r1, [r7, #4]
 8001366:	79f8      	ldrb	r0, [r7, #7]
 8001368:	2300      	movs	r3, #0
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	f7ff ff30 	bl	80011d2 <WriteFrame>
 8001372:	4603      	mov	r3, r0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <ReadReg>:


//*** Read from Register function, helper function
// Help to pack data for communication to specific register, READING process
int  ReadReg(BYTE bID, uint16_t wAddr, void * pData, BYTE bLen, uint32_t dwTimeOut)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	603a      	str	r2, [r7, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	460b      	mov	r3, r1
 800138c:	80bb      	strh	r3, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	71bb      	strb	r3, [r7, #6]
    int   bRes = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
    BYTE  bRX[8];

    memset(bRX, 0, sizeof(bRX));
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2208      	movs	r2, #8
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f006 fcf6 	bl	8007d90 <memset>
    switch(bLen) {
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d82b      	bhi.n	8001404 <ReadReg+0x88>
 80013ac:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <ReadReg+0x38>)
 80013ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b2:	bf00      	nop
 80013b4:	080013c5 	.word	0x080013c5
 80013b8:	080013d5 	.word	0x080013d5
 80013bc:	080013e5 	.word	0x080013e5
 80013c0:	080013f5 	.word	0x080013f5
        case 1:
            bRes = ReadFrameReq(bID, wAddr, 1);
 80013c4:	88b9      	ldrh	r1, [r7, #4]
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffb5 	bl	800133a <ReadFrameReq>
 80013d0:	6178      	str	r0, [r7, #20]
            break;
 80013d2:	e018      	b.n	8001406 <ReadReg+0x8a>
        case 2:
            bRes = ReadFrameReq(bID, wAddr, 2);
 80013d4:	88b9      	ldrh	r1, [r7, #4]
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2202      	movs	r2, #2
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ffad 	bl	800133a <ReadFrameReq>
 80013e0:	6178      	str	r0, [r7, #20]
            break;
 80013e2:	e010      	b.n	8001406 <ReadReg+0x8a>
        case 3:
            bRes = ReadFrameReq(bID, wAddr, 3);
 80013e4:	88b9      	ldrh	r1, [r7, #4]
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2203      	movs	r2, #3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ffa5 	bl	800133a <ReadFrameReq>
 80013f0:	6178      	str	r0, [r7, #20]
            break;
 80013f2:	e008      	b.n	8001406 <ReadReg+0x8a>
        case 4:
            bRes = ReadFrameReq(bID, wAddr, 4);
 80013f4:	88b9      	ldrh	r1, [r7, #4]
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2204      	movs	r2, #4
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff9d 	bl	800133a <ReadFrameReq>
 8001400:	6178      	str	r0, [r7, #20]
            break;
 8001402:	e000      	b.n	8001406 <ReadReg+0x8a>
        default:
            break;
 8001404:	bf00      	nop
    }
    return bRes;
 8001406:	697b      	ldr	r3, [r7, #20]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <WriteReg>:
//Communication Direction: From BMS Master to Slaves

//*** Write to Register function, helper function
// Help to pack data for communication to specific register, WRITING process
int WriteReg(BYTE bID, uint16_t wAddr, uint64_t dwData, BYTE bLen,
		BYTE bWriteType) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af02      	add	r7, sp, #8
 8001416:	e9c7 2300 	strd	r2, r3, [r7]
 800141a:	4603      	mov	r3, r0
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	460b      	mov	r3, r1
 8001420:	81bb      	strh	r3, [r7, #12]
	int bRes = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
	BYTE bBuf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 8001426:	4ab9      	ldr	r2, [pc, #740]	; (800170c <WriteReg+0x2fc>)
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001430:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (bLen) {
 8001434:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001438:	3b01      	subs	r3, #1
 800143a:	2b07      	cmp	r3, #7
 800143c:	f200 81c2 	bhi.w	80017c4 <WriteReg+0x3b4>
 8001440:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <WriteReg+0x38>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	08001469 	.word	0x08001469
 800144c:	08001485 	.word	0x08001485
 8001450:	080014b9 	.word	0x080014b9
 8001454:	08001505 	.word	0x08001505
 8001458:	08001569 	.word	0x08001569
 800145c:	080015e1 	.word	0x080015e1
 8001460:	0800166d 	.word	0x0800166d
 8001464:	08001711 	.word	0x08001711
	case 1:
		bBuf[0] = dwData & 0x00000000000000FF;
 8001468:	783b      	ldrb	r3, [r7, #0]
 800146a:	753b      	strb	r3, [r7, #20]

		bRes = WriteFrame(bID, wAddr, bBuf, 1, bWriteType);
 800146c:	f107 0214 	add.w	r2, r7, #20
 8001470:	89b9      	ldrh	r1, [r7, #12]
 8001472:	7bf8      	ldrb	r0, [r7, #15]
 8001474:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	f7ff fea9 	bl	80011d2 <WriteFrame>
 8001480:	61f8      	str	r0, [r7, #28]
		break;
 8001482:	e1a0      	b.n	80017c6 <WriteReg+0x3b6>
	case 2:
		bBuf[0] = (dwData & 0x000000000000FF00) >> 8;
 8001484:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	0a02      	lsrs	r2, r0, #8
 8001492:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001496:	0a0b      	lsrs	r3, r1, #8
 8001498:	b2d3      	uxtb	r3, r2
 800149a:	753b      	strb	r3, [r7, #20]
		bBuf[1] = dwData & 0x00000000000000FF;
 800149c:	783b      	ldrb	r3, [r7, #0]
 800149e:	757b      	strb	r3, [r7, #21]

		bRes = WriteFrame(bID, wAddr, bBuf, 2, bWriteType);
 80014a0:	f107 0214 	add.w	r2, r7, #20
 80014a4:	89b9      	ldrh	r1, [r7, #12]
 80014a6:	7bf8      	ldrb	r0, [r7, #15]
 80014a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2302      	movs	r3, #2
 80014b0:	f7ff fe8f 	bl	80011d2 <WriteFrame>
 80014b4:	61f8      	str	r0, [r7, #28]
		break;
 80014b6:	e186      	b.n	80017c6 <WriteReg+0x3b6>
	case 3:
		bBuf[0] = (dwData & 0x0000000000FF0000) >> 16;
 80014b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	0c02      	lsrs	r2, r0, #16
 80014c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014ca:	0c0b      	lsrs	r3, r1, #16
 80014cc:	b2d3      	uxtb	r3, r2
 80014ce:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x000000000000FF00) >> 8;
 80014d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	0a02      	lsrs	r2, r0, #8
 80014de:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80014e2:	0a0b      	lsrs	r3, r1, #8
 80014e4:	b2d3      	uxtb	r3, r2
 80014e6:	757b      	strb	r3, [r7, #21]
		bBuf[2] = dwData & 0x00000000000000FF;
 80014e8:	783b      	ldrb	r3, [r7, #0]
 80014ea:	75bb      	strb	r3, [r7, #22]

		bRes = WriteFrame(bID, wAddr, bBuf, 3, bWriteType);
 80014ec:	f107 0214 	add.w	r2, r7, #20
 80014f0:	89b9      	ldrh	r1, [r7, #12]
 80014f2:	7bf8      	ldrb	r0, [r7, #15]
 80014f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2303      	movs	r3, #3
 80014fc:	f7ff fe69 	bl	80011d2 <WriteFrame>
 8001500:	61f8      	str	r0, [r7, #28]
		break;
 8001502:	e160      	b.n	80017c6 <WriteReg+0x3b6>
	case 4:
		bBuf[0] = (dwData & 0x00000000FF000000) >> 24;
 8001504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	0e02      	lsrs	r2, r0, #24
 8001512:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001516:	0e0b      	lsrs	r3, r1, #24
 8001518:	b2d3      	uxtb	r3, r2
 800151a:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x0000000000FF0000) >> 16;
 800151c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	0c02      	lsrs	r2, r0, #16
 800152a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800152e:	0c0b      	lsrs	r3, r1, #16
 8001530:	b2d3      	uxtb	r3, r2
 8001532:	757b      	strb	r3, [r7, #21]
		bBuf[2] = (dwData & 0x000000000000FF00) >> 8;
 8001534:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	0a02      	lsrs	r2, r0, #8
 8001542:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001546:	0a0b      	lsrs	r3, r1, #8
 8001548:	b2d3      	uxtb	r3, r2
 800154a:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = dwData & 0x00000000000000FF;
 800154c:	783b      	ldrb	r3, [r7, #0]
 800154e:	75fb      	strb	r3, [r7, #23]

		bRes = WriteFrame(bID, wAddr, bBuf, 4, bWriteType);
 8001550:	f107 0214 	add.w	r2, r7, #20
 8001554:	89b9      	ldrh	r1, [r7, #12]
 8001556:	7bf8      	ldrb	r0, [r7, #15]
 8001558:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2304      	movs	r3, #4
 8001560:	f7ff fe37 	bl	80011d2 <WriteFrame>
 8001564:	61f8      	str	r0, [r7, #28]
		break;
 8001566:	e12e      	b.n	80017c6 <WriteReg+0x3b6>
	case 5:
		bBuf[0] = (dwData & 0x000000FF00000000) >> 32;
 8001568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	000a      	movs	r2, r1
 8001576:	2300      	movs	r3, #0
 8001578:	b2d3      	uxtb	r3, r2
 800157a:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x00000000FF000000) >> 24;
 800157c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	0e02      	lsrs	r2, r0, #24
 800158a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800158e:	0e0b      	lsrs	r3, r1, #24
 8001590:	b2d3      	uxtb	r3, r2
 8001592:	757b      	strb	r3, [r7, #21]
		bBuf[2] = (dwData & 0x0000000000FF0000) >> 16;
 8001594:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	0c02      	lsrs	r2, r0, #16
 80015a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80015a6:	0c0b      	lsrs	r3, r1, #16
 80015a8:	b2d3      	uxtb	r3, r2
 80015aa:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = (dwData & 0x000000000000FF00) >> 8;
 80015ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	0a02      	lsrs	r2, r0, #8
 80015ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80015be:	0a0b      	lsrs	r3, r1, #8
 80015c0:	b2d3      	uxtb	r3, r2
 80015c2:	75fb      	strb	r3, [r7, #23]
		bBuf[4] = dwData & 0x00000000000000FF;
 80015c4:	783b      	ldrb	r3, [r7, #0]
 80015c6:	763b      	strb	r3, [r7, #24]

		bRes = WriteFrame(bID, wAddr, bBuf, 5, bWriteType);
 80015c8:	f107 0214 	add.w	r2, r7, #20
 80015cc:	89b9      	ldrh	r1, [r7, #12]
 80015ce:	7bf8      	ldrb	r0, [r7, #15]
 80015d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2305      	movs	r3, #5
 80015d8:	f7ff fdfb 	bl	80011d2 <WriteFrame>
 80015dc:	61f8      	str	r0, [r7, #28]
		break;
 80015de:	e0f2      	b.n	80017c6 <WriteReg+0x3b6>
	case 6:
		bBuf[0] = (dwData & 0x0000FF0000000000) >> 40;
 80015e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	0a0a      	lsrs	r2, r1, #8
 80015ee:	2300      	movs	r3, #0
 80015f0:	b2d3      	uxtb	r3, r2
 80015f2:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x000000FF00000000) >> 32;
 80015f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	000a      	movs	r2, r1
 8001602:	2300      	movs	r3, #0
 8001604:	b2d3      	uxtb	r3, r2
 8001606:	757b      	strb	r3, [r7, #21]
		bBuf[2] = (dwData & 0x00000000FF000000) >> 24;
 8001608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	0e02      	lsrs	r2, r0, #24
 8001616:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800161a:	0e0b      	lsrs	r3, r1, #24
 800161c:	b2d3      	uxtb	r3, r2
 800161e:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = (dwData & 0x0000000000FF0000) >> 16;
 8001620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	0c02      	lsrs	r2, r0, #16
 800162e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001632:	0c0b      	lsrs	r3, r1, #16
 8001634:	b2d3      	uxtb	r3, r2
 8001636:	75fb      	strb	r3, [r7, #23]
		bBuf[4] = (dwData & 0x000000000000FF00) >> 8;
 8001638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	0a02      	lsrs	r2, r0, #8
 8001646:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800164a:	0a0b      	lsrs	r3, r1, #8
 800164c:	b2d3      	uxtb	r3, r2
 800164e:	763b      	strb	r3, [r7, #24]
		bBuf[5] = dwData & 0x00000000000000FF;
 8001650:	783b      	ldrb	r3, [r7, #0]
 8001652:	767b      	strb	r3, [r7, #25]

		bRes = WriteFrame(bID, wAddr, bBuf, 6, bWriteType);
 8001654:	f107 0214 	add.w	r2, r7, #20
 8001658:	89b9      	ldrh	r1, [r7, #12]
 800165a:	7bf8      	ldrb	r0, [r7, #15]
 800165c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2306      	movs	r3, #6
 8001664:	f7ff fdb5 	bl	80011d2 <WriteFrame>
 8001668:	61f8      	str	r0, [r7, #28]
		break;
 800166a:	e0ac      	b.n	80017c6 <WriteReg+0x3b6>
	case 7:
		bBuf[0] = (dwData & 0x00FF000000000000) >> 48;
 800166c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	0c0a      	lsrs	r2, r1, #16
 800167a:	2300      	movs	r3, #0
 800167c:	b2d3      	uxtb	r3, r2
 800167e:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x0000FF0000000000) >> 40;
 8001680:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	0a0a      	lsrs	r2, r1, #8
 800168e:	2300      	movs	r3, #0
 8001690:	b2d3      	uxtb	r3, r2
 8001692:	757b      	strb	r3, [r7, #21]
		bBuf[2] = (dwData & 0x000000FF00000000) >> 32;
 8001694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	000a      	movs	r2, r1
 80016a2:	2300      	movs	r3, #0
 80016a4:	b2d3      	uxtb	r3, r2
 80016a6:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = (dwData & 0x00000000FF000000) >> 24;
 80016a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	0e02      	lsrs	r2, r0, #24
 80016b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016ba:	0e0b      	lsrs	r3, r1, #24
 80016bc:	b2d3      	uxtb	r3, r2
 80016be:	75fb      	strb	r3, [r7, #23]
		bBuf[4] = (dwData & 0x0000000000FF0000) >> 16;
 80016c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	0c02      	lsrs	r2, r0, #16
 80016ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80016d2:	0c0b      	lsrs	r3, r1, #16
 80016d4:	b2d3      	uxtb	r3, r2
 80016d6:	763b      	strb	r3, [r7, #24]
		bBuf[5] = (dwData & 0x000000000000FF00) >> 8;
 80016d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	0a02      	lsrs	r2, r0, #8
 80016e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80016ea:	0a0b      	lsrs	r3, r1, #8
 80016ec:	b2d3      	uxtb	r3, r2
 80016ee:	767b      	strb	r3, [r7, #25]
		bBuf[6] = dwData & 0x00000000000000FF;
 80016f0:	783b      	ldrb	r3, [r7, #0]
 80016f2:	76bb      	strb	r3, [r7, #26]
		;

		bRes = WriteFrame(bID, wAddr, bBuf, 7, bWriteType);
 80016f4:	f107 0214 	add.w	r2, r7, #20
 80016f8:	89b9      	ldrh	r1, [r7, #12]
 80016fa:	7bf8      	ldrb	r0, [r7, #15]
 80016fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2307      	movs	r3, #7
 8001704:	f7ff fd65 	bl	80011d2 <WriteFrame>
 8001708:	61f8      	str	r0, [r7, #28]
		break;
 800170a:	e05c      	b.n	80017c6 <WriteReg+0x3b6>
 800170c:	0800ab10 	.word	0x0800ab10
	case 8:
		bBuf[0] = (dwData & 0xFF00000000000000) >> 56;
 8001710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	0e0a      	lsrs	r2, r1, #24
 800171e:	2300      	movs	r3, #0
 8001720:	b2d3      	uxtb	r3, r2
 8001722:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x00FF000000000000) >> 48;
 8001724:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	0c0a      	lsrs	r2, r1, #16
 8001732:	2300      	movs	r3, #0
 8001734:	b2d3      	uxtb	r3, r2
 8001736:	757b      	strb	r3, [r7, #21]
		bBuf[2] = (dwData & 0x0000FF0000000000) >> 40;
 8001738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	0a0a      	lsrs	r2, r1, #8
 8001746:	2300      	movs	r3, #0
 8001748:	b2d3      	uxtb	r3, r2
 800174a:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = (dwData & 0x000000FF00000000) >> 32;
 800174c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	000a      	movs	r2, r1
 800175a:	2300      	movs	r3, #0
 800175c:	b2d3      	uxtb	r3, r2
 800175e:	75fb      	strb	r3, [r7, #23]
		bBuf[4] = (dwData & 0x00000000FF000000) >> 24;
 8001760:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	0e02      	lsrs	r2, r0, #24
 800176e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001772:	0e0b      	lsrs	r3, r1, #24
 8001774:	b2d3      	uxtb	r3, r2
 8001776:	763b      	strb	r3, [r7, #24]
		bBuf[5] = (dwData & 0x0000000000FF0000) >> 16;
 8001778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	0c02      	lsrs	r2, r0, #16
 8001786:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800178a:	0c0b      	lsrs	r3, r1, #16
 800178c:	b2d3      	uxtb	r3, r2
 800178e:	767b      	strb	r3, [r7, #25]
		bBuf[6] = (dwData & 0x000000000000FF00) >> 8;
 8001790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	0a02      	lsrs	r2, r0, #8
 800179e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80017a2:	0a0b      	lsrs	r3, r1, #8
 80017a4:	b2d3      	uxtb	r3, r2
 80017a6:	76bb      	strb	r3, [r7, #26]
		bBuf[7] = dwData & 0x00000000000000FF;
 80017a8:	783b      	ldrb	r3, [r7, #0]
 80017aa:	76fb      	strb	r3, [r7, #27]

		bRes = WriteFrame(bID, wAddr, bBuf, 8, bWriteType);
 80017ac:	f107 0214 	add.w	r2, r7, #20
 80017b0:	89b9      	ldrh	r1, [r7, #12]
 80017b2:	7bf8      	ldrb	r0, [r7, #15]
 80017b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2308      	movs	r3, #8
 80017bc:	f7ff fd09 	bl	80011d2 <WriteFrame>
 80017c0:	61f8      	str	r0, [r7, #28]
		break;
 80017c2:	e000      	b.n	80017c6 <WriteReg+0x3b6>
	default:
		break;
 80017c4:	bf00      	nop
	}
	return bRes;
 80017c6:	69fb      	ldr	r3, [r7, #28]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <InitPL455>:

void InitPL455() {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af02      	add	r7, sp, #8

	//Flag Reset
	fatalError = 0;                         //fatal error flag
 80017d6:	4b8f      	ldr	r3, [pc, #572]	; (8001a14 <InitPL455+0x244>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
	uartFault = 0;                          //uart error flag
 80017dc:	4b8e      	ldr	r3, [pc, #568]	; (8001a18 <InitPL455+0x248>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
	boradFaults = 0;                        //Detection board error flag
 80017e2:	4b8e      	ldr	r3, [pc, #568]	; (8001a1c <InitPL455+0x24c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

	//Inital Wake
	WakePL445();
 80017e8:	f7ff fc86 	bl	80010f8 <WakePL445>

	// Wake all devices
	// The wake tone will awaken any device that is already in shutdown and the pwrdown will shutdown any device
	// that is already awake. The least number of times to sequence wake and pwrdown will be half the number of
	// boards to cover the worst case combination of boards already awake or shutdown.
	for (int nDev_ID = 0; nDev_ID < TOTALBOARDS >> 1; nDev_ID++) {
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e017      	b.n	8001822 <InitPL455+0x52>
		WriteReg(nDev_ID, DEVICE_CONTROL, 0x40, 1, FRMWRT_ALL_NR); // send out broadcast pwrdown command
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	b2d8      	uxtb	r0, r3
 80017f6:	2370      	movs	r3, #112	; 0x70
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	2301      	movs	r3, #1
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	210c      	movs	r1, #12
 8001808:	f7ff fe02 	bl	8001410 <WriteReg>
//		ThisThread::sleep_for(20ms);
		HAL_Delay(20);
 800180c:	2014      	movs	r0, #20
 800180e:	f001 f9b9 	bl	8002b84 <HAL_Delay>
		WakePL445();
 8001812:	f7ff fc71 	bl	80010f8 <WakePL445>
//		ThisThread::sleep_for(20ms);
		HAL_Delay(20);
 8001816:	2014      	movs	r0, #20
 8001818:	f001 f9b4 	bl	8002b84 <HAL_Delay>
	for (int nDev_ID = 0; nDev_ID < TOTALBOARDS >> 1; nDev_ID++) {
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b04      	cmp	r3, #4
 8001826:	dde4      	ble.n	80017f2 <InitPL455+0x22>
	}

	// Mask Customer Checksum Fault bit
	WriteReg(0, FAULT_MASK_DEV, 0x8000, 2, FRMWRT_ALL_NR); // clear all fault summary flags
 8001828:	2370      	movs	r3, #112	; 0x70
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	2302      	movs	r3, #2
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	216b      	movs	r1, #107	; 0x6b
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff fde8 	bl	8001410 <WriteReg>

	// Clear all faults
	WriteReg(0, FAULT_SUM, 0xFFC0, 2, FRMWRT_ALL_NR); // clear all fault summary flags
 8001840:	2370      	movs	r3, #112	; 0x70
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	2302      	movs	r3, #2
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	2152      	movs	r1, #82	; 0x52
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff fddc 	bl	8001410 <WriteReg>
	WriteReg(0, DEVICE_STATUS, 0x38, 1, FRMWRT_ALL_NR); // clear fault flags in the system status register
 8001858:	2370      	movs	r3, #112	; 0x70
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	2301      	movs	r3, #1
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	f04f 0238 	mov.w	r2, #56	; 0x38
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	2151      	movs	r1, #81	; 0x51
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fdd0 	bl	8001410 <WriteReg>

	// Auto-address all boards (section 1.2.2)
	WriteReg(0, DEVICE_CONFIG, 0x19, 1, FRMWRT_ALL_NR); // set auto-address mode on all boards
 8001870:	2370      	movs	r3, #112	; 0x70
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	2301      	movs	r3, #1
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	f04f 0219 	mov.w	r2, #25
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	210e      	movs	r1, #14
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff fdc4 	bl	8001410 <WriteReg>
	WriteReg(0, DEVICE_CONTROL, 0x08, 1, FRMWRT_ALL_NR); // enter auto address mode on all boards, the next write to this ID will be its address
 8001888:	2370      	movs	r3, #112	; 0x70
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	2301      	movs	r3, #1
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	f04f 0208 	mov.w	r2, #8
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	210c      	movs	r1, #12
 800189a:	2000      	movs	r0, #0
 800189c:	f7ff fdb8 	bl	8001410 <WriteReg>

	// Set addresses for all boards in daisy-chain (section 1.2.3)
	for (int nDev_ID = 0; nDev_ID < TOTALBOARDS; nDev_ID++) {
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	e00f      	b.n	80018c6 <InitPL455+0xf6>
		WriteReg(nDev_ID, DEVICE_ADDR, nDev_ID, 1, FRMWRT_ALL_NR); // send address to each board
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	b2d8      	uxtb	r0, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	461a      	mov	r2, r3
 80018ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018b2:	2170      	movs	r1, #112	; 0x70
 80018b4:	9101      	str	r1, [sp, #4]
 80018b6:	2101      	movs	r1, #1
 80018b8:	9100      	str	r1, [sp, #0]
 80018ba:	210a      	movs	r1, #10
 80018bc:	f7ff fda8 	bl	8001410 <WriteReg>
	for (int nDev_ID = 0; nDev_ID < TOTALBOARDS; nDev_ID++) {
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	3301      	adds	r3, #1
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	ddec      	ble.n	80018a6 <InitPL455+0xd6>
	}

	// Enable all communication interfaces on all boards in the stack (section 1.2.1)
	//default 250k bound, Communication Diresction: BMS Master to Slaves
	WriteReg(0, DEVICE_COMCONFIG, 0x10F8, 2, FRMWRT_ALL_NR); // set communications baud rate and enable all interfaces on all boards in stack
 80018cc:	2370      	movs	r3, #112	; 0x70
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	2302      	movs	r3, #2
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	f241 02f8 	movw	r2, #4344	; 0x10f8
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	2110      	movs	r1, #16
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fd96 	bl	8001410 <WriteReg>

	uint32_t wTemp = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]


	for (int nDev_ID = TOTALBOARDS - 1; nDev_ID >= 0; --nDev_ID) {
 80018e8:	2309      	movs	r3, #9
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e00e      	b.n	800190c <InitPL455+0x13c>
		// read device ID to see if there is a response
		ReadReg(nDev_ID, DEVICE_ADDR, &wTemp, 1, 0); // 0ms timeout
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	b2d8      	uxtb	r0, r3
 80018f2:	1d3a      	adds	r2, r7, #4
 80018f4:	2300      	movs	r3, #0
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	210a      	movs	r1, #10
 80018fc:	f7ff fd3e 	bl	800137c <ReadReg>
//		uartReceive();

//		UART_Receive(1, 4);
		HAL_Delay(100);
 8001900:	2064      	movs	r0, #100	; 0x64
 8001902:	f001 f93f 	bl	8002b84 <HAL_Delay>
	for (int nDev_ID = TOTALBOARDS - 1; nDev_ID >= 0; --nDev_ID) {
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3b01      	subs	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	daed      	bge.n	80018ee <InitPL455+0x11e>

//		ThisThread::sleep_for(50ms);
	}

	HAL_Delay(1);
 8001912:	2001      	movs	r0, #1
 8001914:	f001 f936 	bl	8002b84 <HAL_Delay>

	// Clear all faults
	WriteReg(0, FAULT_SUM, 0xFFC0, 2, FRMWRT_ALL_NR); // clear all fault summary flags
 8001918:	2370      	movs	r3, #112	; 0x70
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	2152      	movs	r1, #82	; 0x52
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fd70 	bl	8001410 <WriteReg>
	WriteReg(0, DEVICE_STATUS, 0x38, 1, FRMWRT_ALL_NR); // clear fault flags in the system status register
 8001930:	2370      	movs	r3, #112	; 0x70
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2301      	movs	r3, #1
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	f04f 0238 	mov.w	r2, #56	; 0x38
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	2151      	movs	r1, #81	; 0x51
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fd64 	bl	8001410 <WriteReg>

	HAL_Delay(10);
 8001948:	200a      	movs	r0, #10
 800194a:	f001 f91b 	bl	8002b84 <HAL_Delay>

// Configure AFE (section 2.2.1)

	int nDev_ID = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
	WriteReg(nDev_ID, DEVICE_RESERVED, 0x00, 1, FRMWRT_SGL_NR); // set 0 mux delay
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	b2d8      	uxtb	r0, r3
 8001956:	2310      	movs	r3, #16
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	2301      	movs	r3, #1
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	213c      	movs	r1, #60	; 0x3c
 8001968:	f7ff fd52 	bl	8001410 <WriteReg>
	WriteReg(nDev_ID, DEVICE_SMPLDELAY, 0x00, 1, FRMWRT_SGL_NR); // set 0 initial delay
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	b2d8      	uxtb	r0, r3
 8001970:	2310      	movs	r3, #16
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	2301      	movs	r3, #1
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	213d      	movs	r1, #61	; 0x3d
 8001982:	f7ff fd45 	bl	8001410 <WriteReg>

// Configure voltage and internal sample period (section 2.2.2)
	WriteReg(nDev_ID, DEVICE_CELL_SPER, 0xCC, 1, FRMWRT_SGL_NR); // set 99.92us ADC sampling period
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	b2d8      	uxtb	r0, r3
 800198a:	2310      	movs	r3, #16
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	2301      	movs	r3, #1
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	f04f 02cc 	mov.w	r2, #204	; 0xcc
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	213e      	movs	r1, #62	; 0x3e
 800199c:	f7ff fd38 	bl	8001410 <WriteReg>

// Configure the oversampling rate (section 2.2.3)
	WriteReg(nDev_ID, DEVICE_OVERSMPL, 0x00, 1, FRMWRT_SGL_NR); // set no oversampling period
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	b2d8      	uxtb	r0, r3
 80019a4:	2310      	movs	r3, #16
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	2301      	movs	r3, #1
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	2107      	movs	r1, #7
 80019b6:	f7ff fd2b 	bl	8001410 <WriteReg>

// select all cell channels 1-8, AUX channels 0 and 1, and internal digital die and internal analog die temperatures
	WriteReg(0, DEVICE_CHANNELS, setNumOfCellsAndTemps(TOTALCELLS, TOTALTEMP),4, FRMWRT_ALL_NR);
 80019ba:	2107      	movs	r1, #7
 80019bc:	200e      	movs	r0, #14
 80019be:	f7ff fbb3 	bl	8001128 <setNumOfCellsAndTemps>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	2170      	movs	r1, #112	; 0x70
 80019c8:	9101      	str	r1, [sp, #4]
 80019ca:	2104      	movs	r1, #4
 80019cc:	9100      	str	r1, [sp, #0]
 80019ce:	2103      	movs	r1, #3
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fd1d 	bl	8001410 <WriteReg>

// * * * * Thresholds Note: if you don't set the Threshold limis for specific fault,
//the bq chip will not report specific fault

// Set cell over-voltage and cell under-voltage thresholds on a single board (section 2.2.6.1)
	nDev_ID = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
// Set cell over-voltage and cell under-voltage thresholds on all boards simultaneously (section 2.2.6.2)

	WriteReg(0, DEVICE_CELL_UV, 0xD1EC, 2, FRMWRT_ALL_NR); // set OV threshold = 4.1000V
 80019da:	2370      	movs	r3, #112	; 0x70
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	2302      	movs	r3, #2
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	f24d 12ec 	movw	r2, #53740	; 0xd1ec
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	2190      	movs	r1, #144	; 0x90
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff fd0f 	bl	8001410 <WriteReg>
	WriteReg(0, DEVICE_CELL_OV, 0x6148, 2, FRMWRT_ALL_NR); // set UV threshold = 1.9000V
 80019f2:	2370      	movs	r3, #112	; 0x70
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	2302      	movs	r3, #2
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	f246 1248 	movw	r2, #24904	; 0x6148
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	218e      	movs	r1, #142	; 0x8e
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fd03 	bl	8001410 <WriteReg>

}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000204 	.word	0x20000204
 8001a18:	20000205 	.word	0x20000205
 8001a1c:	20000208 	.word	0x20000208

08001a20 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a26:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <MX_CAN1_Init+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a3e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001a42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a4a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_CAN1_Init+0x64>)
 8001a72:	f001 f8ab 	bl	8002bcc <HAL_CAN_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001a7c:	f000 f982 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000238 	.word	0x20000238
 8001a88:	40006400 	.word	0x40006400

08001a8c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a20      	ldr	r2, [pc, #128]	; (8001b2c <HAL_CAN_MspInit+0xa0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d139      	bne.n	8001b22 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_CAN_MspInit+0xa4>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_CAN_MspInit+0xa4>)
 8001ab4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_CAN_MspInit+0xa4>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_CAN_MspInit+0xa4>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <HAL_CAN_MspInit+0xa4>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_CAN_MspInit+0xa4>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ade:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001af0:	2309      	movs	r3, #9
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afe:	f002 f89d 	bl	8003c3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2014      	movs	r0, #20
 8001b08:	f001 fe88 	bl	800381c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b0c:	2014      	movs	r0, #20
 8001b0e:	f001 fea1 	bl	8003854 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2015      	movs	r0, #21
 8001b18:	f001 fe80 	bl	800381c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001b1c:	2015      	movs	r0, #21
 8001b1e:	f001 fe99 	bl	8003854 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40006400 	.word	0x40006400
 8001b30:	40021000 	.word	0x40021000

08001b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MX_DMA_Init+0x38>)
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <MX_DMA_Init+0x38>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6493      	str	r3, [r2, #72]	; 0x48
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <MX_DMA_Init+0x38>)
 8001b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	200f      	movs	r0, #15
 8001b58:	f001 fe60 	bl	800381c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b5c:	200f      	movs	r0, #15
 8001b5e:	f001 fe79 	bl	8003854 <HAL_NVIC_EnableIRQ>

}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000

08001b70 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a42      	ldr	r2, [pc, #264]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b92:	4b40      	ldr	r3, [pc, #256]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	4a3c      	ldr	r2, [pc, #240]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001baa:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb6:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a36      	ldr	r2, [pc, #216]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b2e      	ldr	r3, [pc, #184]	; (8001c94 <MX_GPIO_Init+0x124>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CloseAirPlus_Pin|CloseAirMinus_Pin|Prechrage_Control_Pin|bmsWakeUp_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8001bec:	482a      	ldr	r0, [pc, #168]	; (8001c98 <MX_GPIO_Init+0x128>)
 8001bee:	f002 f9cf 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_SHD_Control_GPIO_Port, BMS_SHD_Control_Pin, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfc:	f002 f9c8 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Uhvacc_Measurement_Pin|Ihvacc_Measurement_Pin;
 8001c00:	2303      	movs	r3, #3
 8001c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c04:	2303      	movs	r3, #3
 8001c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	4821      	ldr	r0, [pc, #132]	; (8001c98 <MX_GPIO_Init+0x128>)
 8001c14:	f002 f812 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CloseAirPlus_Pin|CloseAirMinus_Pin|Prechrage_Control_Pin|bmsWakeUp_Pin;
 8001c18:	f44f 7323 	mov.w	r3, #652	; 0x28c
 8001c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4819      	ldr	r0, [pc, #100]	; (8001c98 <MX_GPIO_Init+0x128>)
 8001c32:	f002 f803 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AirPlusStatus_Pin|AirMinusStatus_Pin;
 8001c36:	23c0      	movs	r3, #192	; 0xc0
 8001c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4c:	f001 fff6 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Precharge_Relay_Status_Pin|SHD_Status_Pin|bmsFault_Pin;
 8001c50:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <MX_GPIO_Init+0x128>)
 8001c66:	f001 ffe9 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_SHD_Control_Pin;
 8001c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_SHD_Control_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c86:	f001 ffd9 	bl	8003c3c <HAL_GPIO_Init>

}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	; 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	48000800 	.word	0x48000800

08001c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca0:	f000 ff37 	bl	8002b12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca4:	f000 f815 	bl	8001cd2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca8:	f7ff ff62 	bl	8001b70 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001cac:	f000 fa94 	bl	80021d8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001cb0:	f000 fd1e 	bl	80026f0 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8001cb4:	f000 fcec 	bl	8002690 <MX_UART5_Init>
  MX_CAN1_Init();
 8001cb8:	f7ff feb2 	bl	8001a20 <MX_CAN1_Init>
  MX_TIM4_Init();
 8001cbc:	f000 fb0c 	bl	80022d8 <MX_TIM4_Init>
  MX_DMA_Init();
 8001cc0:	f7ff ff38 	bl	8001b34 <MX_DMA_Init>
  MX_TIM5_Init();
 8001cc4:	f000 fb60 	bl	8002388 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  userMainInit();
 8001cc8:	f000 fe46 	bl	8002958 <userMainInit>
  userMain();
 8001ccc:	f000 fe4a 	bl	8002964 <userMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1){
 8001cd0:	e7fe      	b.n	8001cd0 <main+0x34>

08001cd2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b096      	sub	sp, #88	; 0x58
 8001cd6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2244      	movs	r2, #68	; 0x44
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f006 f855 	bl	8007d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cf4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cf8:	f002 f970 	bl	8003fdc <HAL_PWREx_ControlVoltageScaling>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d02:	f000 f83f 	bl	8001d84 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d06:	2310      	movs	r3, #16
 8001d08:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001d12:	23b0      	movs	r3, #176	; 0xb0
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 f9b2 	bl	8004088 <HAL_RCC_OscConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001d2a:	f000 f82b 	bl	8001d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2e:	230f      	movs	r3, #15
 8001d30:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d42:	463b      	mov	r3, r7
 8001d44:	2102      	movs	r1, #2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f002 fd84 	bl	8004854 <HAL_RCC_ClockConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001d52:	f000 f817 	bl	8001d84 <Error_Handler>
  }
}
 8001d56:	bf00      	nop
 8001d58:	3758      	adds	r7, #88	; 0x58
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d72:	f000 fee7 	bl	8002b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40012c00 	.word	0x40012c00

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <Error_Handler+0x8>
	...

08001d90 <closeAirMinus>:

	HAL_GPIO_WritePin(CloseAirMinus_GPIO_Port, CloseAirMinus_Pin, 1);

}
void closeAirMinus()
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CloseAirMinus_GPIO_Port, CloseAirMinus_Pin, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2108      	movs	r1, #8
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <closeAirMinus+0x14>)
 8001d9a:	f002 f8f9 	bl	8003f90 <HAL_GPIO_WritePin>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	48000800 	.word	0x48000800

08001da8 <closeAirPlus>:
void openAirPlus()
{
	HAL_GPIO_WritePin(CloseAirPlus_GPIO_Port, CloseAirPlus_Pin, 1);
}
void closeAirPlus()
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CloseAirPlus_GPIO_Port, CloseAirPlus_Pin, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2104      	movs	r1, #4
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <closeAirPlus+0x14>)
 8001db2:	f002 f8ed 	bl	8003f90 <HAL_GPIO_WritePin>
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	48000800 	.word	0x48000800

08001dc0 <closePrChgRelay>:
void openPrChgRelay()
{
	HAL_GPIO_WritePin(Prechrage_Control_GPIO_Port, Prechrage_Control_Pin, 1);
}
void closePrChgRelay()
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Prechrage_Control_GPIO_Port, Prechrage_Control_Pin, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2180      	movs	r1, #128	; 0x80
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <closePrChgRelay+0x14>)
 8001dca:	f002 f8e1 	bl	8003f90 <HAL_GPIO_WritePin>
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	48000800 	.word	0x48000800

08001dd8 <closeSHD>:
void openSHD()
{
	HAL_GPIO_WritePin(BMS_SHD_Control_GPIO_Port, BMS_SHD_Control_Pin, 0);
}
void closeSHD()
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BMS_SHD_Control_GPIO_Port, BMS_SHD_Control_Pin, 1);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de6:	f002 f8d3 	bl	8003f90 <HAL_GPIO_WritePin>
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <masterInit>:




void masterInit()
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
    closeAirMinus();
 8001df4:	f7ff ffcc 	bl	8001d90 <closeAirMinus>
    closeAirPlus();
 8001df8:	f7ff ffd6 	bl	8001da8 <closeAirPlus>
    closePrChgRelay();
 8001dfc:	f7ff ffe0 	bl	8001dc0 <closePrChgRelay>
    //TO DO: openSHD, then check
    closeSHD();
 8001e00:	f7ff ffea 	bl	8001dd8 <closeSHD>

    //CAN Flags Initialization
    airPlus = 0;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <masterInit+0x38>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
    airMinus = 0;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <masterInit+0x3c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
    prchStatus = 0;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <masterInit+0x40>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
    shdStatus = 0;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <masterInit+0x44>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]

    //Clear successful Precharge sequence flag
    prechargeStatus = 0;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <masterInit+0x48>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000020c 	.word	0x2000020c
 8001e2c:	2000020d 	.word	0x2000020d
 8001e30:	2000020e 	.word	0x2000020e
 8001e34:	2000020f 	.word	0x2000020f
 8001e38:	20000260 	.word	0x20000260

08001e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_MspInit+0x44>)
 8001e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_MspInit+0x44>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_MspInit+0x44>)
 8001e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_MspInit+0x44>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <HAL_MspInit+0x44>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6593      	str	r3, [r2, #88]	; 0x58
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_MspInit+0x44>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08c      	sub	sp, #48	; 0x30
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	2019      	movs	r0, #25
 8001e9a:	f001 fcbf 	bl	800381c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e9e:	2019      	movs	r0, #25
 8001ea0:	f001 fcd8 	bl	8003854 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_InitTick+0x9c>)
 8001ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <HAL_InitTick+0x9c>)
 8001eaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eae:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_InitTick+0x9c>)
 8001eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ebc:	f107 0210 	add.w	r2, r7, #16
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fe6a 	bl	8004ba0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ecc:	f002 fe52 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 8001ed0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <HAL_InitTick+0xa0>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9b      	lsrs	r3, r3, #18
 8001edc:	3b01      	subs	r3, #1
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_InitTick+0xa4>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <HAL_InitTick+0xa8>)
 8001ee4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_InitTick+0xa4>)
 8001ee8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_InitTick+0xa4>)
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_InitTick+0xa4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_InitTick+0xa4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001f00:	4809      	ldr	r0, [pc, #36]	; (8001f28 <HAL_InitTick+0xa4>)
 8001f02:	f003 fb9b 	bl	800563c <HAL_TIM_Base_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d104      	bne.n	8001f16 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001f0c:	4806      	ldr	r0, [pc, #24]	; (8001f28 <HAL_InitTick+0xa4>)
 8001f0e:	f003 fbed 	bl	80056ec <HAL_TIM_Base_Start_IT>
 8001f12:	4603      	mov	r3, r0
 8001f14:	e000      	b.n	8001f18 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3730      	adds	r7, #48	; 0x30
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	20000264 	.word	0x20000264
 8001f2c:	40012c00 	.word	0x40012c00

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <NMI_Handler+0x4>

08001f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <HardFault_Handler+0x4>

08001f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <MemManage_Handler+0x4>

08001f42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <DMA1_Channel5_IRQHandler+0x10>)
 8001f8e:	f001 fda6 	bl	8003ade <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000484 	.word	0x20000484

08001f9c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <CAN1_RX0_IRQHandler+0x10>)
 8001fa2:	f001 f954 	bl	800324e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000238 	.word	0x20000238

08001fb0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <CAN1_RX1_IRQHandler+0x10>)
 8001fb6:	f001 f94a 	bl	800324e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000238 	.word	0x20000238

08001fc4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001fca:	f003 fcb0 	bl	800592e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000264 	.word	0x20000264

08001fd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TIM2_IRQHandler+0x10>)
 8001fde:	f003 fca6 	bl	800592e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000348 	.word	0x20000348

08001fec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <USART1_IRQHandler+0x10>)
 8001ff2:	f004 fc8f 	bl	8006914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200004cc 	.word	0x200004cc

08002000 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <TIM5_IRQHandler+0x10>)
 8002006:	f003 fc92 	bl	800592e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200002fc 	.word	0x200002fc

08002014 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <UART5_IRQHandler+0x10>)
 800201a:	f004 fc7b 	bl	8006914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000400 	.word	0x20000400

08002028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
	return 1;
 800202c:	2301      	movs	r3, #1
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_kill>:

int _kill(int pid, int sig)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002042:	f005 fe7b 	bl	8007d3c <__errno>
 8002046:	4603      	mov	r3, r0
 8002048:	2216      	movs	r2, #22
 800204a:	601a      	str	r2, [r3, #0]
	return -1;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_exit>:

void _exit (int status)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ffe7 	bl	8002038 <_kill>
	while (1) {}		/* Make sure we hang here */
 800206a:	e7fe      	b.n	800206a <_exit+0x12>

0800206c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	e00a      	b.n	8002094 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800207e:	f3af 8000 	nop.w
 8002082:	4601      	mov	r1, r0
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	60ba      	str	r2, [r7, #8]
 800208a:	b2ca      	uxtb	r2, r1
 800208c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	3301      	adds	r3, #1
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	429a      	cmp	r2, r3
 800209a:	dbf0      	blt.n	800207e <_read+0x12>
	}

return len;
 800209c:	687b      	ldr	r3, [r7, #4]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e009      	b.n	80020cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	60ba      	str	r2, [r7, #8]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dbf1      	blt.n	80020b8 <_write+0x12>
	}
	return len;
 80020d4:	687b      	ldr	r3, [r7, #4]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <_close>:

int _close(int file)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
	return -1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002106:	605a      	str	r2, [r3, #4]
	return 0;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <_isatty>:

int _isatty(int file)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
	return 1;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
	return 0;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <_sbrk+0x5c>)
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <_sbrk+0x60>)
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <_sbrk+0x64>)
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <_sbrk+0x68>)
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	429a      	cmp	r2, r3
 8002176:	d207      	bcs.n	8002188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002178:	f005 fde0 	bl	8007d3c <__errno>
 800217c:	4603      	mov	r3, r0
 800217e:	220c      	movs	r2, #12
 8002180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002182:	f04f 33ff 	mov.w	r3, #4294967295
 8002186:	e009      	b.n	800219c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	4a05      	ldr	r2, [pc, #20]	; (80021ac <_sbrk+0x64>)
 8002198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219a:	68fb      	ldr	r3, [r7, #12]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20018000 	.word	0x20018000
 80021a8:	00000400 	.word	0x00000400
 80021ac:	20000210 	.word	0x20000210
 80021b0:	200006a8 	.word	0x200006a8

080021b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <SystemInit+0x20>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <SystemInit+0x20>)
 80021c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fc:	463b      	mov	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <MX_TIM2_Init+0xfc>)
 8002208:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800220c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <MX_TIM2_Init+0xfc>)
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <MX_TIM2_Init+0xfc>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800221a:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <MX_TIM2_Init+0xfc>)
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <MX_TIM2_Init+0xfc>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <MX_TIM2_Init+0xfc>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800222e:	4829      	ldr	r0, [pc, #164]	; (80022d4 <MX_TIM2_Init+0xfc>)
 8002230:	f003 facc 	bl	80057cc <HAL_TIM_IC_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800223a:	f7ff fda3 	bl	8001d84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800223e:	2304      	movs	r3, #4
 8002240:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002242:	2360      	movs	r3, #96	; 0x60
 8002244:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002246:	2302      	movs	r3, #2
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002252:	f107 031c 	add.w	r3, r7, #28
 8002256:	4619      	mov	r1, r3
 8002258:	481e      	ldr	r0, [pc, #120]	; (80022d4 <MX_TIM2_Init+0xfc>)
 800225a:	f003 fdec 	bl	8005e36 <HAL_TIM_SlaveConfigSynchro>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002264:	f7ff fd8e 	bl	8001d84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800226c:	2302      	movs	r3, #2
 800226e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	2200      	movs	r2, #0
 800227e:	4619      	mov	r1, r3
 8002280:	4814      	ldr	r0, [pc, #80]	; (80022d4 <MX_TIM2_Init+0xfc>)
 8002282:	f003 fc73 	bl	8005b6c <HAL_TIM_IC_ConfigChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800228c:	f7ff fd7a 	bl	8001d84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002290:	2302      	movs	r3, #2
 8002292:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002294:	2301      	movs	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	2204      	movs	r2, #4
 800229e:	4619      	mov	r1, r3
 80022a0:	480c      	ldr	r0, [pc, #48]	; (80022d4 <MX_TIM2_Init+0xfc>)
 80022a2:	f003 fc63 	bl	8005b6c <HAL_TIM_IC_ConfigChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80022ac:	f7ff fd6a 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b0:	2300      	movs	r3, #0
 80022b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022b8:	463b      	mov	r3, r7
 80022ba:	4619      	mov	r1, r3
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_TIM2_Init+0xfc>)
 80022be:	f004 f94b 	bl	8006558 <HAL_TIMEx_MasterConfigSynchronization>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 80022c8:	f7ff fd5c 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022cc:	bf00      	nop
 80022ce:	3730      	adds	r7, #48	; 0x30
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000348 	.word	0x20000348

080022d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022de:	f107 0310 	add.w	r3, r7, #16
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <MX_TIM4_Init+0xa8>)
 80022f8:	4a22      	ldr	r2, [pc, #136]	; (8002384 <MX_TIM4_Init+0xac>)
 80022fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000;
 80022fc:	4b20      	ldr	r3, [pc, #128]	; (8002380 <MX_TIM4_Init+0xa8>)
 80022fe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002302:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <MX_TIM4_Init+0xa8>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <MX_TIM4_Init+0xa8>)
 800230c:	2264      	movs	r2, #100	; 0x64
 800230e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <MX_TIM4_Init+0xa8>)
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <MX_TIM4_Init+0xa8>)
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800231c:	4818      	ldr	r0, [pc, #96]	; (8002380 <MX_TIM4_Init+0xa8>)
 800231e:	f003 f98d 	bl	800563c <HAL_TIM_Base_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002328:	f7ff fd2c 	bl	8001d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	4619      	mov	r1, r3
 8002338:	4811      	ldr	r0, [pc, #68]	; (8002380 <MX_TIM4_Init+0xa8>)
 800233a:	f003 fcb3 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002344:	f7ff fd1e 	bl	8001d84 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8002348:	2108      	movs	r1, #8
 800234a:	480d      	ldr	r0, [pc, #52]	; (8002380 <MX_TIM4_Init+0xa8>)
 800234c:	f003 fa95 	bl	800587a <HAL_TIM_OnePulse_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002356:	f7ff fd15 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4806      	ldr	r0, [pc, #24]	; (8002380 <MX_TIM4_Init+0xa8>)
 8002368:	f004 f8f6 	bl	8006558 <HAL_TIMEx_MasterConfigSynchronization>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002372:	f7ff fd07 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002376:	bf00      	nop
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200002b0 	.word	0x200002b0
 8002384:	40000800 	.word	0x40000800

08002388 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <MX_TIM5_Init+0x94>)
 80023a8:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <MX_TIM5_Init+0x98>)
 80023aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2000;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_TIM5_Init+0x94>)
 80023ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80023b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <MX_TIM5_Init+0x94>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100;
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_TIM5_Init+0x94>)
 80023bc:	2264      	movs	r2, #100	; 0x64
 80023be:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <MX_TIM5_Init+0x94>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_TIM5_Init+0x94>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023cc:	4813      	ldr	r0, [pc, #76]	; (800241c <MX_TIM5_Init+0x94>)
 80023ce:	f003 f935 	bl	800563c <HAL_TIM_Base_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80023d8:	f7ff fcd4 	bl	8001d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023e2:	f107 0310 	add.w	r3, r7, #16
 80023e6:	4619      	mov	r1, r3
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <MX_TIM5_Init+0x94>)
 80023ea:	f003 fc5b 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80023f4:	f7ff fcc6 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_TIM5_Init+0x94>)
 8002406:	f004 f8a7 	bl	8006558 <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002410:	f7ff fcb8 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200002fc 	.word	0x200002fc
 8002420:	40000c00 	.word	0x40000c00

08002424 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002444:	d12f      	bne.n	80024a6 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002446:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <HAL_TIM_IC_MspInit+0x8c>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_TIM_IC_MspInit+0x8c>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6593      	str	r3, [r2, #88]	; 0x58
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <HAL_TIM_IC_MspInit+0x8c>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_TIM_IC_MspInit+0x8c>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	4a13      	ldr	r2, [pc, #76]	; (80024b0 <HAL_TIM_IC_MspInit+0x8c>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_TIM_IC_MspInit+0x8c>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002476:	2308      	movs	r3, #8
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002486:	2301      	movs	r3, #1
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	4808      	ldr	r0, [pc, #32]	; (80024b4 <HAL_TIM_IC_MspInit+0x90>)
 8002492:	f001 fbd3 	bl	8003c3c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	201c      	movs	r0, #28
 800249c:	f001 f9be 	bl	800381c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024a0:	201c      	movs	r0, #28
 80024a2:	f001 f9d7 	bl	8003854 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80024a6:	bf00      	nop
 80024a8:	3728      	adds	r7, #40	; 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	48000400 	.word	0x48000400

080024b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a16      	ldr	r2, [pc, #88]	; (8002520 <HAL_TIM_Base_MspInit+0x68>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d10c      	bne.n	80024e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_TIM_Base_MspInit+0x6c>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <HAL_TIM_Base_MspInit+0x6c>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6593      	str	r3, [r2, #88]	; 0x58
 80024d6:	4b13      	ldr	r3, [pc, #76]	; (8002524 <HAL_TIM_Base_MspInit+0x6c>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80024e2:	e018      	b.n	8002516 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM5)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_TIM_Base_MspInit+0x70>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d113      	bne.n	8002516 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <HAL_TIM_Base_MspInit+0x6c>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	4a0c      	ldr	r2, [pc, #48]	; (8002524 <HAL_TIM_Base_MspInit+0x6c>)
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	6593      	str	r3, [r2, #88]	; 0x58
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_TIM_Base_MspInit+0x6c>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2032      	movs	r0, #50	; 0x32
 800250c:	f001 f986 	bl	800381c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002510:	2032      	movs	r0, #50	; 0x32
 8002512:	f001 f99f 	bl	8003854 <HAL_NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40000800 	.word	0x40000800
 8002524:	40021000 	.word	0x40021000
 8002528:	40000c00 	.word	0x40000c00

0800252c <HAL_UART_RxCpltCallback>:
int cntRec=1;
int numOfBytes = 0;
int flag1 = 0;
volatile int rxComplete = 0;
int firstEntry = 1;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	numOfMsg++;
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_UART_RxCpltCallback+0xb0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	4a28      	ldr	r2, [pc, #160]	; (80025dc <HAL_UART_RxCpltCallback+0xb0>)
 800253c:	6013      	str	r3, [r2, #0]
	if(firstEntry) {
 800253e:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_UART_RxCpltCallback+0xb4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d015      	beq.n	8002572 <HAL_UART_RxCpltCallback+0x46>
		numOfBytes = recBuf1[0] + 1;
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_UART_RxCpltCallback+0xb8>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3301      	adds	r3, #1
 800254e:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_UART_RxCpltCallback+0xbc>)
 8002550:	6013      	str	r3, [r2, #0]
		if(numOfBytes != 0) {
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_UART_RxCpltCallback+0xbc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d03c      	beq.n	80025d4 <HAL_UART_RxCpltCallback+0xa8>
			HAL_UART_Receive_IT(huart, recBuf1+1, numOfBytes);
 800255a:	4924      	ldr	r1, [pc, #144]	; (80025ec <HAL_UART_RxCpltCallback+0xc0>)
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <HAL_UART_RxCpltCallback+0xbc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f004 f97f 	bl	8006868 <HAL_UART_Receive_IT>
			firstEntry = 0;
 800256a:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <HAL_UART_RxCpltCallback+0xb4>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
		receiveCnt=(receiveCnt+1)%10;
		rxComplete = 1;
		firstEntry = 1;
	}

}
 8002570:	e030      	b.n	80025d4 <HAL_UART_RxCpltCallback+0xa8>
		numOfBytes = 0;
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_UART_RxCpltCallback+0xbc>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
		for(int i = 1; i <= 28; i++) {
 8002578:	2301      	movs	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e011      	b.n	80025a2 <HAL_UART_RxCpltCallback+0x76>
				voltageBuff[receiveCnt][i-1] = recBuf1[i];
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <HAL_UART_RxCpltCallback+0xc4>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3b01      	subs	r3, #1
 8002586:	4817      	ldr	r0, [pc, #92]	; (80025e4 <HAL_UART_RxCpltCallback+0xb8>)
 8002588:	68f9      	ldr	r1, [r7, #12]
 800258a:	4401      	add	r1, r0
 800258c:	7809      	ldrb	r1, [r1, #0]
 800258e:	b2c8      	uxtb	r0, r1
 8002590:	4918      	ldr	r1, [pc, #96]	; (80025f4 <HAL_UART_RxCpltCallback+0xc8>)
 8002592:	0152      	lsls	r2, r2, #5
 8002594:	440a      	add	r2, r1
 8002596:	4413      	add	r3, r2
 8002598:	4602      	mov	r2, r0
 800259a:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i <= 28; i++) {
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b1c      	cmp	r3, #28
 80025a6:	ddea      	ble.n	800257e <HAL_UART_RxCpltCallback+0x52>
		receiveCnt=(receiveCnt+1)%10;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_UART_RxCpltCallback+0xc4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	1c59      	adds	r1, r3, #1
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_UART_RxCpltCallback+0xcc>)
 80025b0:	fb83 2301 	smull	r2, r3, r3, r1
 80025b4:	109a      	asrs	r2, r3, #2
 80025b6:	17cb      	asrs	r3, r1, #31
 80025b8:	1ad2      	subs	r2, r2, r3
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	1aca      	subs	r2, r1, r3
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_UART_RxCpltCallback+0xc4>)
 80025c6:	601a      	str	r2, [r3, #0]
		rxComplete = 1;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_UART_RxCpltCallback+0xd0>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
		firstEntry = 1;
 80025ce:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_UART_RxCpltCallback+0xb4>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000220 	.word	0x20000220
 80025e0:	20000004 	.word	0x20000004
 80025e4:	2000039c 	.word	0x2000039c
 80025e8:	20000218 	.word	0x20000218
 80025ec:	2000039d 	.word	0x2000039d
 80025f0:	20000214 	.word	0x20000214
 80025f4:	20000550 	.word	0x20000550
 80025f8:	66666667 	.word	0x66666667
 80025fc:	2000021c 	.word	0x2000021c

08002600 <UART_AsyncTransmitString>:

uartMsg tmp ;
void UART_AsyncTransmitString(int id, char* pFrame, int bPktLen) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
	if (pFrame != NULL) {
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d011      	beq.n	8002636 <UART_AsyncTransmitString+0x36>
		if(id==1){
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d107      	bne.n	8002628 <UART_AsyncTransmitString+0x28>
			HAL_UART_Transmit(&huart1, pFrame, bPktLen, 100);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	b29a      	uxth	r2, r3
 800261c:	2364      	movs	r3, #100	; 0x64
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <UART_AsyncTransmitString+0x40>)
 8002622:	f004 f88d 	bl	8006740 <HAL_UART_Transmit>
		}else{
			HAL_UART_Transmit(&huart5, pFrame, bPktLen, 100);
		}
	}
}
 8002626:	e006      	b.n	8002636 <UART_AsyncTransmitString+0x36>
			HAL_UART_Transmit(&huart5, pFrame, bPktLen, 100);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	b29a      	uxth	r2, r3
 800262c:	2364      	movs	r3, #100	; 0x64
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <UART_AsyncTransmitString+0x44>)
 8002632:	f004 f885 	bl	8006740 <HAL_UART_Transmit>
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200004cc 	.word	0x200004cc
 8002644:	20000400 	.word	0x20000400

08002648 <UART_Receive>:

// RECEIVE UTIL
// -----------------------------------------------------------------------------


int UART_Receive(int id, int len){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	if(id==1){
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <UART_Receive+0x20>
		HAL_UART_Receive_IT(&huart1, recBuf1, len);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <UART_Receive+0x38>)
 8002660:	4808      	ldr	r0, [pc, #32]	; (8002684 <UART_Receive+0x3c>)
 8002662:	f004 f901 	bl	8006868 <HAL_UART_Receive_IT>
 8002666:	e006      	b.n	8002676 <UART_Receive+0x2e>
	}else{
		HAL_UART_Receive_IT(&huart5, recBuf5, len);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	4906      	ldr	r1, [pc, #24]	; (8002688 <UART_Receive+0x40>)
 8002670:	4806      	ldr	r0, [pc, #24]	; (800268c <UART_Receive+0x44>)
 8002672:	f004 f8f9 	bl	8006868 <HAL_UART_Receive_IT>
	}
	return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	2000039c 	.word	0x2000039c
 8002684:	200004cc 	.word	0x200004cc
 8002688:	200003e0 	.word	0x200003e0
 800268c:	20000400 	.word	0x20000400

08002690 <MX_UART5_Init>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_UART5_Init+0x58>)
 8002696:	4a15      	ldr	r2, [pc, #84]	; (80026ec <MX_UART5_Init+0x5c>)
 8002698:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <MX_UART5_Init+0x58>)
 800269c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_UART5_Init+0x58>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <MX_UART5_Init+0x58>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_UART5_Init+0x58>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_UART5_Init+0x58>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_UART5_Init+0x58>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_UART5_Init+0x58>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_UART5_Init+0x58>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_UART5_Init+0x58>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_UART5_Init+0x58>)
 80026d4:	f003 ffe6 	bl	80066a4 <HAL_UART_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80026de:	f7ff fb51 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000400 	.word	0x20000400
 80026ec:	40005000 	.word	0x40005000

080026f0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <MX_USART1_UART_Init+0x54>)
 80026f6:	4a14      	ldr	r2, [pc, #80]	; (8002748 <MX_USART1_UART_Init+0x58>)
 80026f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <MX_USART1_UART_Init+0x54>)
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <MX_USART1_UART_Init+0x5c>)
 80026fe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <MX_USART1_UART_Init+0x54>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <MX_USART1_UART_Init+0x54>)
 8002708:	2200      	movs	r2, #0
 800270a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <MX_USART1_UART_Init+0x54>)
 800270e:	2200      	movs	r2, #0
 8002710:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <MX_USART1_UART_Init+0x54>)
 8002714:	220c      	movs	r2, #12
 8002716:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <MX_USART1_UART_Init+0x54>)
 800271a:	2200      	movs	r2, #0
 800271c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <MX_USART1_UART_Init+0x54>)
 8002720:	2200      	movs	r2, #0
 8002722:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <MX_USART1_UART_Init+0x54>)
 8002726:	2200      	movs	r2, #0
 8002728:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <MX_USART1_UART_Init+0x54>)
 800272c:	2200      	movs	r2, #0
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <MX_USART1_UART_Init+0x54>)
 8002732:	f003 ffb7 	bl	80066a4 <HAL_UART_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800273c:	f7ff fb22 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200004cc 	.word	0x200004cc
 8002748:	40013800 	.word	0x40013800
 800274c:	0003d090 	.word	0x0003d090

08002750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b0ae      	sub	sp, #184	; 0xb8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	2288      	movs	r2, #136	; 0x88
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f005 fb0d 	bl	8007d90 <memset>
  if(uartHandle->Instance==UART5)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a70      	ldr	r2, [pc, #448]	; (800293c <HAL_UART_MspInit+0x1ec>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d165      	bne.n	800284c <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002780:	2310      	movs	r3, #16
 8002782:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002784:	2300      	movs	r3, #0
 8002786:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	4618      	mov	r0, r3
 800278e:	f002 fa99 	bl	8004cc4 <HAL_RCCEx_PeriphCLKConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002798:	f7ff faf4 	bl	8001d84 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800279c:	4b68      	ldr	r3, [pc, #416]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	4a67      	ldr	r2, [pc, #412]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 80027a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a6:	6593      	str	r3, [r2, #88]	; 0x58
 80027a8:	4b65      	ldr	r3, [pc, #404]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b4:	4b62      	ldr	r3, [pc, #392]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	4a61      	ldr	r2, [pc, #388]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c0:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027cc:	4b5c      	ldr	r3, [pc, #368]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 80027ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d0:	4a5b      	ldr	r2, [pc, #364]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 80027d2:	f043 0308 	orr.w	r3, r3, #8
 80027d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d8:	4b59      	ldr	r3, [pc, #356]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 80027da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027fe:	2308      	movs	r3, #8
 8002800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002804:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002808:	4619      	mov	r1, r3
 800280a:	484e      	ldr	r0, [pc, #312]	; (8002944 <HAL_UART_MspInit+0x1f4>)
 800280c:	f001 fa16 	bl	8003c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002810:	2304      	movs	r3, #4
 8002812:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002828:	2308      	movs	r3, #8
 800282a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800282e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002832:	4619      	mov	r1, r3
 8002834:	4844      	ldr	r0, [pc, #272]	; (8002948 <HAL_UART_MspInit+0x1f8>)
 8002836:	f001 fa01 	bl	8003c3c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2100      	movs	r1, #0
 800283e:	2035      	movs	r0, #53	; 0x35
 8002840:	f000 ffec 	bl	800381c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002844:	2035      	movs	r0, #53	; 0x35
 8002846:	f001 f805 	bl	8003854 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800284a:	e072      	b.n	8002932 <HAL_UART_MspInit+0x1e2>
  else if(uartHandle->Instance==USART1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3e      	ldr	r2, [pc, #248]	; (800294c <HAL_UART_MspInit+0x1fc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d16d      	bne.n	8002932 <HAL_UART_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002856:	2301      	movs	r3, #1
 8002858:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800285a:	2300      	movs	r3, #0
 800285c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800285e:	f107 031c 	add.w	r3, r7, #28
 8002862:	4618      	mov	r0, r3
 8002864:	f002 fa2e 	bl	8004cc4 <HAL_RCCEx_PeriphCLKConfig>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_UART_MspInit+0x122>
      Error_Handler();
 800286e:	f7ff fa89 	bl	8001d84 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002872:	4b33      	ldr	r3, [pc, #204]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 8002874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002876:	4a32      	ldr	r2, [pc, #200]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 8002878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287c:	6613      	str	r3, [r2, #96]	; 0x60
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 8002880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	4a2c      	ldr	r2, [pc, #176]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002896:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028bc:	2307      	movs	r3, #7
 80028be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028c6:	4619      	mov	r1, r3
 80028c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028cc:	f001 f9b6 	bl	8003c3c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_UART_MspInit+0x200>)
 80028d2:	4a20      	ldr	r2, [pc, #128]	; (8002954 <HAL_UART_MspInit+0x204>)
 80028d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_UART_MspInit+0x200>)
 80028d8:	2202      	movs	r2, #2
 80028da:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028dc:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_UART_MspInit+0x200>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_UART_MspInit+0x200>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_UART_MspInit+0x200>)
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ee:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_UART_MspInit+0x200>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028f4:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_UART_MspInit+0x200>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_UART_MspInit+0x200>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_UART_MspInit+0x200>)
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002906:	4812      	ldr	r0, [pc, #72]	; (8002950 <HAL_UART_MspInit+0x200>)
 8002908:	f000 ffb2 	bl	8003870 <HAL_DMA_Init>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 8002912:	f7ff fa37 	bl	8001d84 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <HAL_UART_MspInit+0x200>)
 800291a:	671a      	str	r2, [r3, #112]	; 0x70
 800291c:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_UART_MspInit+0x200>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	2025      	movs	r0, #37	; 0x25
 8002928:	f000 ff78 	bl	800381c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800292c:	2025      	movs	r0, #37	; 0x25
 800292e:	f000 ff91 	bl	8003854 <HAL_NVIC_EnableIRQ>
}
 8002932:	bf00      	nop
 8002934:	37b8      	adds	r7, #184	; 0xb8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40005000 	.word	0x40005000
 8002940:	40021000 	.word	0x40021000
 8002944:	48000800 	.word	0x48000800
 8002948:	48000c00 	.word	0x48000c00
 800294c:	40013800 	.word	0x40013800
 8002950:	20000484 	.word	0x20000484
 8002954:	40020058 	.word	0x40020058

08002958 <userMainInit>:
volatile int voltage = 0;
extern volatile int rxComplete;
volatile int vol = 0;
extern volatile int firstEntry;

void userMainInit() {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0

	Can_Init();
 800295c:	f7fe fb30 	bl	8000fc0 <Can_Init>
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <userMain>:

volatile int counter = 0;

int userMain(void) {
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b08f      	sub	sp, #60	; 0x3c
 8002968:	af02      	add	r7, sp, #8

//	PwmInInit();

	masterInit();
 800296a:	f7ff fa41 	bl	8001df0 <masterInit>
	InitPL455();
 800296e:	f7fe ff2f 	bl	80017d0 <InitPL455>
	//HAL_TIM_Base_Start_IT(&htim5);
//	vTaskDelay(pdMS_TO_TICKS(1000));
//	shutDownSlavesCommand();
	int numOfReqs = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		HAL_Delay(500);
 8002976:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800297a:	f000 f903 	bl	8002b84 <HAL_Delay>

		//UART_AsyncTransmitString(5, voltageBuff[receiveCnt]);

		//for(int i = 0; i < 10; i++) {
			if (firstEntry) {
 800297e:	4b48      	ldr	r3, [pc, #288]	; (8002aa0 <userMain+0x13c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01e      	beq.n	80029c4 <userMain+0x60>
				UART_Receive(1, 1);
 8002986:	2101      	movs	r1, #1
 8002988:	2001      	movs	r0, #1
 800298a:	f7ff fe5d 	bl	8002648 <UART_Receive>
				//HAL_Delay(5);
				//WriteReg(0, DEVICE_COMMAND, 0x01, 1, FRMWRT_SGL_R);
				WriteReg(2, DEVICE_COMMAND, 0x00, 1, 0x10); //Current Value
 800298e:	2310      	movs	r3, #16
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2301      	movs	r3, #1
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	2102      	movs	r1, #2
 80029a0:	2002      	movs	r0, #2
 80029a2:	f7fe fd35 	bl	8001410 <WriteReg>
				WriteReg(2, DEVICE_COMMAND, 0x20, 1, FRMWRT_SGL_R); //Volatge request
 80029a6:	2300      	movs	r3, #0
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	2301      	movs	r3, #1
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f04f 0220 	mov.w	r2, #32
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	2102      	movs	r1, #2
 80029b8:	2002      	movs	r0, #2
 80029ba:	f7fe fd29 	bl	8001410 <WriteReg>
				numOfReqs++;
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	3301      	adds	r3, #1
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c




		/////////////////////////////////////////
			if(rxComplete) {
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <userMain+0x140>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0d4      	beq.n	8002976 <userMain+0x12>
				char volt[25];
				rxComplete = 0;
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <userMain+0x140>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
				int i = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
				//for (int i = 0; i < 10; i++) {
					//snprintf(volt, 18, "BMS SLAVE %d\n", i + 1);
					//UART_AsyncTransmitString(5, volt, 18);
					for (int j = 0; j < 28; j += 2) {
 80029d6:	2300      	movs	r3, #0
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029da:	e057      	b.n	8002a8c <userMain+0x128>
						voltage = voltageBuff[i][j + 1];
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	3301      	adds	r3, #1
 80029e0:	4931      	ldr	r1, [pc, #196]	; (8002aa8 <userMain+0x144>)
 80029e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e4:	0152      	lsls	r2, r2, #5
 80029e6:	440a      	add	r2, r1
 80029e8:	4413      	add	r3, r2
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <userMain+0x148>)
 80029f2:	601a      	str	r2, [r3, #0]
						voltage |= (voltageBuff[i][j]) << 8;
 80029f4:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <userMain+0x144>)
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	015b      	lsls	r3, r3, #5
 80029fa:	441a      	add	r2, r3
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	4413      	add	r3, r2
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	021a      	lsls	r2, r3, #8
 8002a06:	4b29      	ldr	r3, [pc, #164]	; (8002aac <userMain+0x148>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	4a27      	ldr	r2, [pc, #156]	; (8002aac <userMain+0x148>)
 8002a0e:	6013      	str	r3, [r2, #0]
						float vol = ((double) voltage) / 65536.0 * 5.0;
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <userMain+0x148>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fd85 	bl	8000524 <__aeabi_i2d>
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <userMain+0x14c>)
 8002a20:	f7fd ff14 	bl	800084c <__aeabi_ddiv>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <userMain+0x150>)
 8002a32:	f7fd fde1 	bl	80005f8 <__aeabi_dmul>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7fe f8b3 	bl	8000ba8 <__aeabi_d2f>
 8002a42:	4603      	mov	r3, r0
 8002a44:	623b      	str	r3, [r7, #32]
						snprintf(volt, 25, "CELL[%d] = %4f V	", j / 2, vol);
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	0fda      	lsrs	r2, r3, #31
 8002a4a:	4413      	add	r3, r2
 8002a4c:	105b      	asrs	r3, r3, #1
 8002a4e:	461c      	mov	r4, r3
 8002a50:	6a38      	ldr	r0, [r7, #32]
 8002a52:	f7fd fd79 	bl	8000548 <__aeabi_f2d>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	1d38      	adds	r0, r7, #4
 8002a5c:	e9cd 2300 	strd	r2, r3, [sp]
 8002a60:	4623      	mov	r3, r4
 8002a62:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <userMain+0x154>)
 8002a64:	2119      	movs	r1, #25
 8002a66:	f005 fe05 	bl	8008674 <sniprintf>
						UART_AsyncTransmitString(5, volt, 25);
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	2219      	movs	r2, #25
 8002a6e:	4619      	mov	r1, r3
 8002a70:	2005      	movs	r0, #5
 8002a72:	f7ff fdc5 	bl	8002600 <UART_AsyncTransmitString>
						UART_AsyncTransmitString(5, "\n", 2);
 8002a76:	2202      	movs	r2, #2
 8002a78:	4910      	ldr	r1, [pc, #64]	; (8002abc <userMain+0x158>)
 8002a7a:	2005      	movs	r0, #5
 8002a7c:	f7ff fdc0 	bl	8002600 <UART_AsyncTransmitString>
						HAL_Delay(30);
 8002a80:	201e      	movs	r0, #30
 8002a82:	f000 f87f 	bl	8002b84 <HAL_Delay>
					for (int j = 0; j < 28; j += 2) {
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	3302      	adds	r3, #2
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	2b1b      	cmp	r3, #27
 8002a90:	dda4      	ble.n	80029dc <userMain+0x78>
					}
					UART_AsyncTransmitString(5, "\n", 2);
 8002a92:	2202      	movs	r2, #2
 8002a94:	4909      	ldr	r1, [pc, #36]	; (8002abc <userMain+0x158>)
 8002a96:	2005      	movs	r0, #5
 8002a98:	f7ff fdb2 	bl	8002600 <UART_AsyncTransmitString>
		HAL_Delay(500);
 8002a9c:	e76b      	b.n	8002976 <userMain+0x12>
 8002a9e:	bf00      	nop
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	2000021c 	.word	0x2000021c
 8002aa8:	20000550 	.word	0x20000550
 8002aac:	2000022c 	.word	0x2000022c
 8002ab0:	40f00000 	.word	0x40f00000
 8002ab4:	40140000 	.word	0x40140000
 8002ab8:	0800ab18 	.word	0x0800ab18
 8002abc:	0800ab2c 	.word	0x0800ab2c

08002ac0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002af8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ac4:	f7ff fb76 	bl	80021b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ac8:	480c      	ldr	r0, [pc, #48]	; (8002afc <LoopForever+0x6>)
  ldr r1, =_edata
 8002aca:	490d      	ldr	r1, [pc, #52]	; (8002b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <LoopForever+0xe>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad0:	e002      	b.n	8002ad8 <LoopCopyDataInit>

08002ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad6:	3304      	adds	r3, #4

08002ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002adc:	d3f9      	bcc.n	8002ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ae0:	4c0a      	ldr	r4, [pc, #40]	; (8002b0c <LoopForever+0x16>)
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae4:	e001      	b.n	8002aea <LoopFillZerobss>

08002ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae8:	3204      	adds	r2, #4

08002aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aec:	d3fb      	bcc.n	8002ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aee:	f005 f92b 	bl	8007d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002af2:	f7ff f8d3 	bl	8001c9c <main>

08002af6 <LoopForever>:

LoopForever:
    b LoopForever
 8002af6:	e7fe      	b.n	8002af6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002af8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b00:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002b04:	0800b16c 	.word	0x0800b16c
  ldr r2, =_sbss
 8002b08:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002b0c:	200006a4 	.word	0x200006a4

08002b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b10:	e7fe      	b.n	8002b10 <ADC1_2_IRQHandler>

08002b12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b1c:	2003      	movs	r0, #3
 8002b1e:	f000 fe72 	bl	8003806 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b22:	200f      	movs	r0, #15
 8002b24:	f7ff f9ae 	bl	8001e84 <HAL_InitTick>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	71fb      	strb	r3, [r7, #7]
 8002b32:	e001      	b.n	8002b38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b34:	f7ff f982 	bl	8001e3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b38:	79fb      	ldrb	r3, [r7, #7]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_IncTick+0x20>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_IncTick+0x24>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4413      	add	r3, r2
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HAL_IncTick+0x24>)
 8002b56:	6013      	str	r3, [r2, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	2000000c 	.word	0x2000000c
 8002b68:	20000690 	.word	0x20000690

08002b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <HAL_GetTick+0x14>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000690 	.word	0x20000690

08002b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b8c:	f7ff ffee 	bl	8002b6c <HAL_GetTick>
 8002b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d005      	beq.n	8002baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_Delay+0x44>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002baa:	bf00      	nop
 8002bac:	f7ff ffde 	bl	8002b6c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d8f7      	bhi.n	8002bac <HAL_Delay+0x28>
  {
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	2000000c 	.word	0x2000000c

08002bcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0ed      	b.n	8002dba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe ff4e 	bl	8001a8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c00:	f7ff ffb4 	bl	8002b6c <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c06:	e012      	b.n	8002c2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c08:	f7ff ffb0 	bl	8002b6c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b0a      	cmp	r3, #10
 8002c14:	d90b      	bls.n	8002c2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2205      	movs	r2, #5
 8002c26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0c5      	b.n	8002dba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0e5      	beq.n	8002c08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0202 	bic.w	r2, r2, #2
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c4c:	f7ff ff8e 	bl	8002b6c <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c52:	e012      	b.n	8002c7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c54:	f7ff ff8a 	bl	8002b6c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b0a      	cmp	r3, #10
 8002c60:	d90b      	bls.n	8002c7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2205      	movs	r2, #5
 8002c72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e09f      	b.n	8002dba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e5      	bne.n	8002c54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7e1b      	ldrb	r3, [r3, #24]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d108      	bne.n	8002ca2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e007      	b.n	8002cb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7e5b      	ldrb	r3, [r3, #25]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d108      	bne.n	8002ccc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e007      	b.n	8002cdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7e9b      	ldrb	r3, [r3, #26]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0220 	orr.w	r2, r2, #32
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e007      	b.n	8002d06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0220 	bic.w	r2, r2, #32
 8002d04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	7edb      	ldrb	r3, [r3, #27]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d108      	bne.n	8002d20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0210 	bic.w	r2, r2, #16
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e007      	b.n	8002d30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0210 	orr.w	r2, r2, #16
 8002d2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7f1b      	ldrb	r3, [r3, #28]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d108      	bne.n	8002d4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0208 	orr.w	r2, r2, #8
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e007      	b.n	8002d5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0208 	bic.w	r2, r2, #8
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7f5b      	ldrb	r3, [r3, #29]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d108      	bne.n	8002d74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0204 	orr.w	r2, r2, #4
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e007      	b.n	8002d84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0204 	bic.w	r2, r2, #4
 8002d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	ea42 0103 	orr.w	r1, r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	1e5a      	subs	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b087      	sub	sp, #28
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d003      	beq.n	8002de8 <HAL_CAN_ConfigFilter+0x26>
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	f040 80aa 	bne.w	8002f3c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	2201      	movs	r2, #1
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	401a      	ands	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d123      	bne.n	8002e6a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3248      	adds	r2, #72	; 0x48
 8002e4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e60:	6979      	ldr	r1, [r7, #20]
 8002e62:	3348      	adds	r3, #72	; 0x48
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d122      	bne.n	8002eb8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	3248      	adds	r2, #72	; 0x48
 8002e98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002eac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002eae:	6979      	ldr	r1, [r7, #20]
 8002eb0:	3348      	adds	r3, #72	; 0x48
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	401a      	ands	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ed2:	e007      	b.n	8002ee4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002efe:	e007      	b.n	8002f10 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d107      	bne.n	8002f28 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f2e:	f023 0201 	bic.w	r2, r3, #1
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e006      	b.n	8002f4a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d12e      	bne.n	8002fc8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f82:	f7ff fdf3 	bl	8002b6c <HAL_GetTick>
 8002f86:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f88:	e012      	b.n	8002fb0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f8a:	f7ff fdef 	bl	8002b6c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b0a      	cmp	r3, #10
 8002f96:	d90b      	bls.n	8002fb0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e012      	b.n	8002fd6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e5      	bne.n	8002f8a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e006      	b.n	8002fd6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b087      	sub	sp, #28
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d003      	beq.n	8003002 <HAL_CAN_GetRxMessage+0x24>
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	f040 80f3 	bne.w	80031e8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10e      	bne.n	8003026 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d116      	bne.n	8003044 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0e7      	b.n	80031f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0d8      	b.n	80031f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	331b      	adds	r3, #27
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	4413      	add	r3, r2
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0204 	and.w	r2, r3, #4
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10c      	bne.n	800307c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	331b      	adds	r3, #27
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	4413      	add	r3, r2
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0d5b      	lsrs	r3, r3, #21
 8003072:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e00b      	b.n	8003094 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	331b      	adds	r3, #27
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	4413      	add	r3, r2
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	08db      	lsrs	r3, r3, #3
 800308c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	331b      	adds	r3, #27
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	4413      	add	r3, r2
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0202 	and.w	r2, r3, #2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	331b      	adds	r3, #27
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 020f 	and.w	r2, r3, #15
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	331b      	adds	r3, #27
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	4413      	add	r3, r2
 80030ce:	3304      	adds	r3, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	331b      	adds	r3, #27
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	4413      	add	r3, r2
 80030e6:	3304      	adds	r3, #4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	0c1b      	lsrs	r3, r3, #16
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	4413      	add	r3, r2
 8003112:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0a1a      	lsrs	r2, r3, #8
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	4413      	add	r3, r2
 800312c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	0c1a      	lsrs	r2, r3, #16
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	3302      	adds	r3, #2
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	4413      	add	r3, r2
 8003146:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0e1a      	lsrs	r2, r3, #24
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	3303      	adds	r3, #3
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	4413      	add	r3, r2
 8003160:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	3304      	adds	r3, #4
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	4413      	add	r3, r2
 8003178:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	0a1a      	lsrs	r2, r3, #8
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	3305      	adds	r3, #5
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	4413      	add	r3, r2
 8003192:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0c1a      	lsrs	r2, r3, #16
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	3306      	adds	r3, #6
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	0e1a      	lsrs	r2, r3, #24
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	3307      	adds	r3, #7
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d108      	bne.n	80031d4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0220 	orr.w	r2, r2, #32
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	e007      	b.n	80031e4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0220 	orr.w	r2, r2, #32
 80031e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e006      	b.n	80031f6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
  }
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003202:	b480      	push	{r7}
 8003204:	b085      	sub	sp, #20
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003212:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d002      	beq.n	8003220 <HAL_CAN_ActivateNotification+0x1e>
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d109      	bne.n	8003234 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6959      	ldr	r1, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e006      	b.n	8003242 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
  }
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b08a      	sub	sp, #40	; 0x28
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d07c      	beq.n	800338e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d023      	beq.n	80032e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2201      	movs	r2, #1
 80032a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f983 	bl	80035bc <HAL_CAN_TxMailbox0CompleteCallback>
 80032b6:	e016      	b.n	80032e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ca:	e00c      	b.n	80032e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	e002      	b.n	80032e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f989 	bl	80035f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d024      	beq.n	800333a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f963 	bl	80035d0 <HAL_CAN_TxMailbox1CompleteCallback>
 800330a:	e016      	b.n	800333a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	e00c      	b.n	800333a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	e002      	b.n	800333a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f969 	bl	800360c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d024      	beq.n	800338e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800334c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f943 	bl	80035e4 <HAL_CAN_TxMailbox2CompleteCallback>
 800335e:	e016      	b.n	800338e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	e00c      	b.n	800338e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
 8003386:	e002      	b.n	800338e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f949 	bl	8003620 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00c      	beq.n	80033b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2210      	movs	r2, #16
 80033b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2208      	movs	r2, #8
 80033cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f930 	bl	8003634 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7fd fda7 	bl	8000f40 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00c      	beq.n	8003416 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800340c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2210      	movs	r2, #16
 8003414:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00b      	beq.n	8003438 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d006      	beq.n	8003438 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2208      	movs	r2, #8
 8003430:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f912 	bl	800365c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f8f9 	bl	8003648 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00b      	beq.n	8003478 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d006      	beq.n	8003478 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2210      	movs	r2, #16
 8003470:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8fc 	bl	8003670 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d006      	beq.n	800349a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2208      	movs	r2, #8
 8003492:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8f5 	bl	8003684 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d07b      	beq.n	800359c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d072      	beq.n	8003594 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	f043 0302 	orr.w	r3, r3, #2
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003508:	2b00      	cmp	r3, #0
 800350a:	d043      	beq.n	8003594 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003512:	2b00      	cmp	r3, #0
 8003514:	d03e      	beq.n	8003594 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800351c:	2b60      	cmp	r3, #96	; 0x60
 800351e:	d02b      	beq.n	8003578 <HAL_CAN_IRQHandler+0x32a>
 8003520:	2b60      	cmp	r3, #96	; 0x60
 8003522:	d82e      	bhi.n	8003582 <HAL_CAN_IRQHandler+0x334>
 8003524:	2b50      	cmp	r3, #80	; 0x50
 8003526:	d022      	beq.n	800356e <HAL_CAN_IRQHandler+0x320>
 8003528:	2b50      	cmp	r3, #80	; 0x50
 800352a:	d82a      	bhi.n	8003582 <HAL_CAN_IRQHandler+0x334>
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d019      	beq.n	8003564 <HAL_CAN_IRQHandler+0x316>
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d826      	bhi.n	8003582 <HAL_CAN_IRQHandler+0x334>
 8003534:	2b30      	cmp	r3, #48	; 0x30
 8003536:	d010      	beq.n	800355a <HAL_CAN_IRQHandler+0x30c>
 8003538:	2b30      	cmp	r3, #48	; 0x30
 800353a:	d822      	bhi.n	8003582 <HAL_CAN_IRQHandler+0x334>
 800353c:	2b10      	cmp	r3, #16
 800353e:	d002      	beq.n	8003546 <HAL_CAN_IRQHandler+0x2f8>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d005      	beq.n	8003550 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003544:	e01d      	b.n	8003582 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	f043 0308 	orr.w	r3, r3, #8
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800354e:	e019      	b.n	8003584 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	f043 0310 	orr.w	r3, r3, #16
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003558:	e014      	b.n	8003584 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	f043 0320 	orr.w	r3, r3, #32
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003562:	e00f      	b.n	8003584 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800356c:	e00a      	b.n	8003584 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003576:	e005      	b.n	8003584 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003580:	e000      	b.n	8003584 <HAL_CAN_IRQHandler+0x336>
            break;
 8003582:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003592:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2204      	movs	r2, #4
 800359a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f872 	bl	8003698 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80035b4:	bf00      	nop
 80035b6:	3728      	adds	r7, #40	; 0x28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c8:	4013      	ands	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	60d3      	str	r3, [r2, #12]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <__NVIC_GetPriorityGrouping+0x18>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	f003 0307 	and.w	r3, r3, #7
}
 8003702:	4618      	mov	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	2b00      	cmp	r3, #0
 8003720:	db0b      	blt.n	800373a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	f003 021f 	and.w	r2, r3, #31
 8003728:	4907      	ldr	r1, [pc, #28]	; (8003748 <__NVIC_EnableIRQ+0x38>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2001      	movs	r0, #1
 8003732:	fa00 f202 	lsl.w	r2, r0, r2
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	e000e100 	.word	0xe000e100

0800374c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375c:	2b00      	cmp	r3, #0
 800375e:	db0a      	blt.n	8003776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	490c      	ldr	r1, [pc, #48]	; (8003798 <__NVIC_SetPriority+0x4c>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	0112      	lsls	r2, r2, #4
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	440b      	add	r3, r1
 8003770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003774:	e00a      	b.n	800378c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4908      	ldr	r1, [pc, #32]	; (800379c <__NVIC_SetPriority+0x50>)
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	3b04      	subs	r3, #4
 8003784:	0112      	lsls	r2, r2, #4
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	440b      	add	r3, r1
 800378a:	761a      	strb	r2, [r3, #24]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000e100 	.word	0xe000e100
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f1c3 0307 	rsb	r3, r3, #7
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	bf28      	it	cs
 80037be:	2304      	movcs	r3, #4
 80037c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3304      	adds	r3, #4
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d902      	bls.n	80037d0 <NVIC_EncodePriority+0x30>
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3b03      	subs	r3, #3
 80037ce:	e000      	b.n	80037d2 <NVIC_EncodePriority+0x32>
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43da      	mvns	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	401a      	ands	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	43d9      	mvns	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f8:	4313      	orrs	r3, r2
         );
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3724      	adds	r7, #36	; 0x24
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff4c 	bl	80036ac <__NVIC_SetPriorityGrouping>
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800382e:	f7ff ff61 	bl	80036f4 <__NVIC_GetPriorityGrouping>
 8003832:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	6978      	ldr	r0, [r7, #20]
 800383a:	f7ff ffb1 	bl	80037a0 <NVIC_EncodePriority>
 800383e:	4602      	mov	r2, r0
 8003840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff ff80 	bl	800374c <__NVIC_SetPriority>
}
 800384c:	bf00      	nop
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff54 	bl	8003710 <__NVIC_EnableIRQ>
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e098      	b.n	80039b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	4b4d      	ldr	r3, [pc, #308]	; (80039c0 <HAL_DMA_Init+0x150>)
 800388a:	429a      	cmp	r2, r3
 800388c:	d80f      	bhi.n	80038ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	4b4b      	ldr	r3, [pc, #300]	; (80039c4 <HAL_DMA_Init+0x154>)
 8003896:	4413      	add	r3, r2
 8003898:	4a4b      	ldr	r2, [pc, #300]	; (80039c8 <HAL_DMA_Init+0x158>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	009a      	lsls	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a48      	ldr	r2, [pc, #288]	; (80039cc <HAL_DMA_Init+0x15c>)
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40
 80038ac:	e00e      	b.n	80038cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b46      	ldr	r3, [pc, #280]	; (80039d0 <HAL_DMA_Init+0x160>)
 80038b6:	4413      	add	r3, r2
 80038b8:	4a43      	ldr	r2, [pc, #268]	; (80039c8 <HAL_DMA_Init+0x158>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	009a      	lsls	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a42      	ldr	r2, [pc, #264]	; (80039d4 <HAL_DMA_Init+0x164>)
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003926:	d039      	beq.n	800399c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	4a27      	ldr	r2, [pc, #156]	; (80039cc <HAL_DMA_Init+0x15c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d11a      	bne.n	8003968 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003932:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <HAL_DMA_Init+0x168>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f003 031c 	and.w	r3, r3, #28
 800393e:	210f      	movs	r1, #15
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	4924      	ldr	r1, [pc, #144]	; (80039d8 <HAL_DMA_Init+0x168>)
 8003948:	4013      	ands	r3, r2
 800394a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <HAL_DMA_Init+0x168>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	f003 031c 	and.w	r3, r3, #28
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	491d      	ldr	r1, [pc, #116]	; (80039d8 <HAL_DMA_Init+0x168>)
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]
 8003966:	e019      	b.n	800399c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003968:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <HAL_DMA_Init+0x16c>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	f003 031c 	and.w	r3, r3, #28
 8003974:	210f      	movs	r1, #15
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	4917      	ldr	r1, [pc, #92]	; (80039dc <HAL_DMA_Init+0x16c>)
 800397e:	4013      	ands	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <HAL_DMA_Init+0x16c>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6859      	ldr	r1, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f003 031c 	and.w	r3, r3, #28
 8003992:	fa01 f303 	lsl.w	r3, r1, r3
 8003996:	4911      	ldr	r1, [pc, #68]	; (80039dc <HAL_DMA_Init+0x16c>)
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40020407 	.word	0x40020407
 80039c4:	bffdfff8 	.word	0xbffdfff8
 80039c8:	cccccccd 	.word	0xcccccccd
 80039cc:	40020000 	.word	0x40020000
 80039d0:	bffdfbf8 	.word	0xbffdfbf8
 80039d4:	40020400 	.word	0x40020400
 80039d8:	400200a8 	.word	0x400200a8
 80039dc:	400204a8 	.word	0x400204a8

080039e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d008      	beq.n	8003a0a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2204      	movs	r2, #4
 80039fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e022      	b.n	8003a50 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 020e 	bic.w	r2, r2, #14
 8003a18:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f003 021c 	and.w	r2, r3, #28
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	2101      	movs	r1, #1
 8003a38:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d005      	beq.n	8003a80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2204      	movs	r2, #4
 8003a78:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
 8003a7e:	e029      	b.n	8003ad4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 020e 	bic.w	r2, r2, #14
 8003a8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	f003 021c 	and.w	r2, r3, #28
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	2101      	movs	r1, #1
 8003aae:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
    }
  }
  return status;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f003 031c 	and.w	r3, r3, #28
 8003afe:	2204      	movs	r2, #4
 8003b00:	409a      	lsls	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d026      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x7a>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d021      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d107      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0204 	bic.w	r2, r2, #4
 8003b30:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f003 021c 	and.w	r2, r3, #28
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	2104      	movs	r1, #4
 8003b40:	fa01 f202 	lsl.w	r2, r1, r2
 8003b44:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d071      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003b56:	e06c      	b.n	8003c32 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	f003 031c 	and.w	r3, r3, #28
 8003b60:	2202      	movs	r2, #2
 8003b62:	409a      	lsls	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02e      	beq.n	8003bca <HAL_DMA_IRQHandler+0xec>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d029      	beq.n	8003bca <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 020a 	bic.w	r2, r2, #10
 8003b92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	f003 021c 	and.w	r2, r3, #28
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	2102      	movs	r1, #2
 8003baa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d038      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bc8:	e033      	b.n	8003c32 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	f003 031c 	and.w	r3, r3, #28
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d02a      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x156>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d025      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 020e 	bic.w	r2, r2, #14
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	f003 021c 	and.w	r2, r3, #28
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
}
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c4a:	e17f      	b.n	8003f4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	2101      	movs	r1, #1
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	fa01 f303 	lsl.w	r3, r1, r3
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8171 	beq.w	8003f46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d005      	beq.n	8003c7c <HAL_GPIO_Init+0x40>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d130      	bne.n	8003cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	091b      	lsrs	r3, r3, #4
 8003cc8:	f003 0201 	and.w	r2, r3, #1
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d118      	bne.n	8003d1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	08db      	lsrs	r3, r3, #3
 8003d06:	f003 0201 	and.w	r2, r3, #1
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d017      	beq.n	8003d58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	2203      	movs	r2, #3
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d123      	bne.n	8003dac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	08da      	lsrs	r2, r3, #3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3208      	adds	r2, #8
 8003d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	220f      	movs	r2, #15
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	08da      	lsrs	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3208      	adds	r2, #8
 8003da6:	6939      	ldr	r1, [r7, #16]
 8003da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	2203      	movs	r2, #3
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0203 	and.w	r2, r3, #3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80ac 	beq.w	8003f46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dee:	4b5f      	ldr	r3, [pc, #380]	; (8003f6c <HAL_GPIO_Init+0x330>)
 8003df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df2:	4a5e      	ldr	r2, [pc, #376]	; (8003f6c <HAL_GPIO_Init+0x330>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6613      	str	r3, [r2, #96]	; 0x60
 8003dfa:	4b5c      	ldr	r3, [pc, #368]	; (8003f6c <HAL_GPIO_Init+0x330>)
 8003dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e06:	4a5a      	ldr	r2, [pc, #360]	; (8003f70 <HAL_GPIO_Init+0x334>)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	220f      	movs	r2, #15
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e30:	d025      	beq.n	8003e7e <HAL_GPIO_Init+0x242>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4f      	ldr	r2, [pc, #316]	; (8003f74 <HAL_GPIO_Init+0x338>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01f      	beq.n	8003e7a <HAL_GPIO_Init+0x23e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4e      	ldr	r2, [pc, #312]	; (8003f78 <HAL_GPIO_Init+0x33c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d019      	beq.n	8003e76 <HAL_GPIO_Init+0x23a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a4d      	ldr	r2, [pc, #308]	; (8003f7c <HAL_GPIO_Init+0x340>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_GPIO_Init+0x236>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a4c      	ldr	r2, [pc, #304]	; (8003f80 <HAL_GPIO_Init+0x344>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00d      	beq.n	8003e6e <HAL_GPIO_Init+0x232>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4b      	ldr	r2, [pc, #300]	; (8003f84 <HAL_GPIO_Init+0x348>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <HAL_GPIO_Init+0x22e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a4a      	ldr	r2, [pc, #296]	; (8003f88 <HAL_GPIO_Init+0x34c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d101      	bne.n	8003e66 <HAL_GPIO_Init+0x22a>
 8003e62:	2306      	movs	r3, #6
 8003e64:	e00c      	b.n	8003e80 <HAL_GPIO_Init+0x244>
 8003e66:	2307      	movs	r3, #7
 8003e68:	e00a      	b.n	8003e80 <HAL_GPIO_Init+0x244>
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	e008      	b.n	8003e80 <HAL_GPIO_Init+0x244>
 8003e6e:	2304      	movs	r3, #4
 8003e70:	e006      	b.n	8003e80 <HAL_GPIO_Init+0x244>
 8003e72:	2303      	movs	r3, #3
 8003e74:	e004      	b.n	8003e80 <HAL_GPIO_Init+0x244>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e002      	b.n	8003e80 <HAL_GPIO_Init+0x244>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_GPIO_Init+0x244>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	f002 0203 	and.w	r2, r2, #3
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	4093      	lsls	r3, r2
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e90:	4937      	ldr	r1, [pc, #220]	; (8003f70 <HAL_GPIO_Init+0x334>)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e9e:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <HAL_GPIO_Init+0x350>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ec2:	4a32      	ldr	r2, [pc, #200]	; (8003f8c <HAL_GPIO_Init+0x350>)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ec8:	4b30      	ldr	r3, [pc, #192]	; (8003f8c <HAL_GPIO_Init+0x350>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eec:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <HAL_GPIO_Init+0x350>)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ef2:	4b26      	ldr	r3, [pc, #152]	; (8003f8c <HAL_GPIO_Init+0x350>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f16:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <HAL_GPIO_Init+0x350>)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <HAL_GPIO_Init+0x350>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f40:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <HAL_GPIO_Init+0x350>)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	fa22 f303 	lsr.w	r3, r2, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f47f ae78 	bne.w	8003c4c <HAL_GPIO_Init+0x10>
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40010000 	.word	0x40010000
 8003f74:	48000400 	.word	0x48000400
 8003f78:	48000800 	.word	0x48000800
 8003f7c:	48000c00 	.word	0x48000c00
 8003f80:	48001000 	.word	0x48001000
 8003f84:	48001400 	.word	0x48001400
 8003f88:	48001800 	.word	0x48001800
 8003f8c:	40010400 	.word	0x40010400

08003f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	807b      	strh	r3, [r7, #2]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa0:	787b      	ldrb	r3, [r7, #1]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fac:	e002      	b.n	8003fb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40007000 	.word	0x40007000

08003fdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fea:	d130      	bne.n	800404e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fec:	4b23      	ldr	r3, [pc, #140]	; (800407c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff8:	d038      	beq.n	800406c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004002:	4a1e      	ldr	r2, [pc, #120]	; (800407c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004004:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004008:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800400a:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2232      	movs	r2, #50	; 0x32
 8004010:	fb02 f303 	mul.w	r3, r2, r3
 8004014:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	0c9b      	lsrs	r3, r3, #18
 800401c:	3301      	adds	r3, #1
 800401e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004020:	e002      	b.n	8004028 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3b01      	subs	r3, #1
 8004026:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004028:	4b14      	ldr	r3, [pc, #80]	; (800407c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004034:	d102      	bne.n	800403c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f2      	bne.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004048:	d110      	bne.n	800406c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e00f      	b.n	800406e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405a:	d007      	beq.n	800406c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800405c:	4b07      	ldr	r3, [pc, #28]	; (800407c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004064:	4a05      	ldr	r2, [pc, #20]	; (800407c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800406a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40007000 	.word	0x40007000
 8004080:	20000000 	.word	0x20000000
 8004084:	431bde83 	.word	0x431bde83

08004088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e3d4      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409a:	4ba1      	ldr	r3, [pc, #644]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a4:	4b9e      	ldr	r3, [pc, #632]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80e4 	beq.w	8004284 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_RCC_OscConfig+0x4a>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	f040 808b 	bne.w	80041e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	f040 8087 	bne.w	80041e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040d2:	4b93      	ldr	r3, [pc, #588]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_RCC_OscConfig+0x62>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e3ac      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1a      	ldr	r2, [r3, #32]
 80040ee:	4b8c      	ldr	r3, [pc, #560]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <HAL_RCC_OscConfig+0x7c>
 80040fa:	4b89      	ldr	r3, [pc, #548]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004102:	e005      	b.n	8004110 <HAL_RCC_OscConfig+0x88>
 8004104:	4b86      	ldr	r3, [pc, #536]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410a:	091b      	lsrs	r3, r3, #4
 800410c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004110:	4293      	cmp	r3, r2
 8004112:	d223      	bcs.n	800415c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fd73 	bl	8004c04 <RCC_SetFlashLatencyFromMSIRange>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e38d      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004128:	4b7d      	ldr	r3, [pc, #500]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a7c      	ldr	r2, [pc, #496]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 800412e:	f043 0308 	orr.w	r3, r3, #8
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b7a      	ldr	r3, [pc, #488]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	4977      	ldr	r1, [pc, #476]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004146:	4b76      	ldr	r3, [pc, #472]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	4972      	ldr	r1, [pc, #456]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004156:	4313      	orrs	r3, r2
 8004158:	604b      	str	r3, [r1, #4]
 800415a:	e025      	b.n	80041a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800415c:	4b70      	ldr	r3, [pc, #448]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a6f      	ldr	r2, [pc, #444]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004162:	f043 0308 	orr.w	r3, r3, #8
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b6d      	ldr	r3, [pc, #436]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	496a      	ldr	r1, [pc, #424]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800417a:	4b69      	ldr	r3, [pc, #420]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	4965      	ldr	r1, [pc, #404]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 800418a:	4313      	orrs	r3, r2
 800418c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fd33 	bl	8004c04 <RCC_SetFlashLatencyFromMSIRange>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e34d      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041a8:	f000 fc36 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b5c      	ldr	r3, [pc, #368]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	495a      	ldr	r1, [pc, #360]	; (8004324 <HAL_RCC_OscConfig+0x29c>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	4a58      	ldr	r2, [pc, #352]	; (8004328 <HAL_RCC_OscConfig+0x2a0>)
 80041c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041c8:	4b58      	ldr	r3, [pc, #352]	; (800432c <HAL_RCC_OscConfig+0x2a4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fd fe59 	bl	8001e84 <HAL_InitTick>
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d052      	beq.n	8004282 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	e331      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d032      	beq.n	800424e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041e8:	4b4d      	ldr	r3, [pc, #308]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a4c      	ldr	r2, [pc, #304]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041f4:	f7fe fcba 	bl	8002b6c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041fc:	f7fe fcb6 	bl	8002b6c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e31a      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800420e:	4b44      	ldr	r3, [pc, #272]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800421a:	4b41      	ldr	r3, [pc, #260]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a40      	ldr	r2, [pc, #256]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004220:	f043 0308 	orr.w	r3, r3, #8
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b3e      	ldr	r3, [pc, #248]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	493b      	ldr	r1, [pc, #236]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004238:	4b39      	ldr	r3, [pc, #228]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	4936      	ldr	r1, [pc, #216]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]
 800424c:	e01a      	b.n	8004284 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800424e:	4b34      	ldr	r3, [pc, #208]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a33      	ldr	r2, [pc, #204]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800425a:	f7fe fc87 	bl	8002b6c <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004262:	f7fe fc83 	bl	8002b6c <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e2e7      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004274:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f0      	bne.n	8004262 <HAL_RCC_OscConfig+0x1da>
 8004280:	e000      	b.n	8004284 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004282:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d074      	beq.n	800437a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b08      	cmp	r3, #8
 8004294:	d005      	beq.n	80042a2 <HAL_RCC_OscConfig+0x21a>
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b0c      	cmp	r3, #12
 800429a:	d10e      	bne.n	80042ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d10b      	bne.n	80042ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a2:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d064      	beq.n	8004378 <HAL_RCC_OscConfig+0x2f0>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d160      	bne.n	8004378 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e2c4      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c2:	d106      	bne.n	80042d2 <HAL_RCC_OscConfig+0x24a>
 80042c4:	4b16      	ldr	r3, [pc, #88]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a15      	ldr	r2, [pc, #84]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80042ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	e01d      	b.n	800430e <HAL_RCC_OscConfig+0x286>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042da:	d10c      	bne.n	80042f6 <HAL_RCC_OscConfig+0x26e>
 80042dc:	4b10      	ldr	r3, [pc, #64]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0f      	ldr	r2, [pc, #60]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80042e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	e00b      	b.n	800430e <HAL_RCC_OscConfig+0x286>
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a09      	ldr	r2, [pc, #36]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 80042fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	4b07      	ldr	r3, [pc, #28]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a06      	ldr	r2, [pc, #24]	; (8004320 <HAL_RCC_OscConfig+0x298>)
 8004308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01c      	beq.n	8004350 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004316:	f7fe fc29 	bl	8002b6c <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800431c:	e011      	b.n	8004342 <HAL_RCC_OscConfig+0x2ba>
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000
 8004324:	0800ad30 	.word	0x0800ad30
 8004328:	20000000 	.word	0x20000000
 800432c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004330:	f7fe fc1c 	bl	8002b6c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e280      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004342:	4baf      	ldr	r3, [pc, #700]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x2a8>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fe fc0c 	bl	8002b6c <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fe fc08 	bl	8002b6c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e26c      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800436a:	4ba5      	ldr	r3, [pc, #660]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x2d0>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d060      	beq.n	8004448 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b04      	cmp	r3, #4
 800438a:	d005      	beq.n	8004398 <HAL_RCC_OscConfig+0x310>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d119      	bne.n	80043c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d116      	bne.n	80043c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004398:	4b99      	ldr	r3, [pc, #612]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_RCC_OscConfig+0x328>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e249      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b0:	4b93      	ldr	r3, [pc, #588]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	4990      	ldr	r1, [pc, #576]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c4:	e040      	b.n	8004448 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d023      	beq.n	8004416 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ce:	4b8c      	ldr	r3, [pc, #560]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a8b      	ldr	r2, [pc, #556]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80043d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fe fbc7 	bl	8002b6c <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e2:	f7fe fbc3 	bl	8002b6c <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e227      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f4:	4b82      	ldr	r3, [pc, #520]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004400:	4b7f      	ldr	r3, [pc, #508]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	497c      	ldr	r1, [pc, #496]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
 8004414:	e018      	b.n	8004448 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004416:	4b7a      	ldr	r3, [pc, #488]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a79      	ldr	r2, [pc, #484]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 800441c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fe fba3 	bl	8002b6c <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442a:	f7fe fb9f 	bl	8002b6c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e203      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800443c:	4b70      	ldr	r3, [pc, #448]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d03c      	beq.n	80044ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01c      	beq.n	8004496 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445c:	4b68      	ldr	r3, [pc, #416]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 800445e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004462:	4a67      	ldr	r2, [pc, #412]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fe fb7e 	bl	8002b6c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004474:	f7fe fb7a 	bl	8002b6c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e1de      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004486:	4b5e      	ldr	r3, [pc, #376]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ef      	beq.n	8004474 <HAL_RCC_OscConfig+0x3ec>
 8004494:	e01b      	b.n	80044ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004496:	4b5a      	ldr	r3, [pc, #360]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449c:	4a58      	ldr	r2, [pc, #352]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a6:	f7fe fb61 	bl	8002b6c <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ae:	f7fe fb5d 	bl	8002b6c <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e1c1      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044c0:	4b4f      	ldr	r3, [pc, #316]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80044c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1ef      	bne.n	80044ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80a6 	beq.w	8004628 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044dc:	2300      	movs	r3, #0
 80044de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044e0:	4b47      	ldr	r3, [pc, #284]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10d      	bne.n	8004508 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ec:	4b44      	ldr	r3, [pc, #272]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	4a43      	ldr	r2, [pc, #268]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6593      	str	r3, [r2, #88]	; 0x58
 80044f8:	4b41      	ldr	r3, [pc, #260]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004504:	2301      	movs	r3, #1
 8004506:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004508:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <HAL_RCC_OscConfig+0x57c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d118      	bne.n	8004546 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004514:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_RCC_OscConfig+0x57c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a3a      	ldr	r2, [pc, #232]	; (8004604 <HAL_RCC_OscConfig+0x57c>)
 800451a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004520:	f7fe fb24 	bl	8002b6c <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004528:	f7fe fb20 	bl	8002b6c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e184      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800453a:	4b32      	ldr	r3, [pc, #200]	; (8004604 <HAL_RCC_OscConfig+0x57c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d108      	bne.n	8004560 <HAL_RCC_OscConfig+0x4d8>
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800455e:	e024      	b.n	80045aa <HAL_RCC_OscConfig+0x522>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d110      	bne.n	800458a <HAL_RCC_OscConfig+0x502>
 8004568:	4b25      	ldr	r3, [pc, #148]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	4a24      	ldr	r2, [pc, #144]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004570:	f043 0304 	orr.w	r3, r3, #4
 8004574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004578:	4b21      	ldr	r3, [pc, #132]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	4a20      	ldr	r2, [pc, #128]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004588:	e00f      	b.n	80045aa <HAL_RCC_OscConfig+0x522>
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800459a:	4b19      	ldr	r3, [pc, #100]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	4a17      	ldr	r2, [pc, #92]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80045a2:	f023 0304 	bic.w	r3, r3, #4
 80045a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fe fadb 	bl	8002b6c <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fe fad7 	bl	8002b6c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e139      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_OscConfig+0x578>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0ed      	beq.n	80045ba <HAL_RCC_OscConfig+0x532>
 80045de:	e01a      	b.n	8004616 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fe fac4 	bl	8002b6c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e6:	e00f      	b.n	8004608 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fe fac0 	bl	8002b6c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d906      	bls.n	8004608 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e122      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004608:	4b90      	ldr	r3, [pc, #576]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e8      	bne.n	80045e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004616:	7ffb      	ldrb	r3, [r7, #31]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d105      	bne.n	8004628 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461c:	4b8b      	ldr	r3, [pc, #556]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	4a8a      	ldr	r2, [pc, #552]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 8004622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004626:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8108 	beq.w	8004842 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	2b02      	cmp	r3, #2
 8004638:	f040 80d0 	bne.w	80047dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800463c:	4b83      	ldr	r3, [pc, #524]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 0203 	and.w	r2, r3, #3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	429a      	cmp	r2, r3
 800464e:	d130      	bne.n	80046b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	3b01      	subs	r3, #1
 800465c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d127      	bne.n	80046b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d11f      	bne.n	80046b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800467c:	2a07      	cmp	r2, #7
 800467e:	bf14      	ite	ne
 8004680:	2201      	movne	r2, #1
 8004682:	2200      	moveq	r2, #0
 8004684:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004686:	4293      	cmp	r3, r2
 8004688:	d113      	bne.n	80046b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	3b01      	subs	r3, #1
 8004698:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d109      	bne.n	80046b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	3b01      	subs	r3, #1
 80046ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d06e      	beq.n	8004790 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b0c      	cmp	r3, #12
 80046b6:	d069      	beq.n	800478c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046b8:	4b64      	ldr	r3, [pc, #400]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046c4:	4b61      	ldr	r3, [pc, #388]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0b7      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046d4:	4b5d      	ldr	r3, [pc, #372]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a5c      	ldr	r2, [pc, #368]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80046da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046e0:	f7fe fa44 	bl	8002b6c <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fe fa40 	bl	8002b6c <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0a4      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fa:	4b54      	ldr	r3, [pc, #336]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004706:	4b51      	ldr	r3, [pc, #324]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	4b51      	ldr	r3, [pc, #324]	; (8004850 <HAL_RCC_OscConfig+0x7c8>)
 800470c:	4013      	ands	r3, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004716:	3a01      	subs	r2, #1
 8004718:	0112      	lsls	r2, r2, #4
 800471a:	4311      	orrs	r1, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004720:	0212      	lsls	r2, r2, #8
 8004722:	4311      	orrs	r1, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004728:	0852      	lsrs	r2, r2, #1
 800472a:	3a01      	subs	r2, #1
 800472c:	0552      	lsls	r2, r2, #21
 800472e:	4311      	orrs	r1, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004734:	0852      	lsrs	r2, r2, #1
 8004736:	3a01      	subs	r2, #1
 8004738:	0652      	lsls	r2, r2, #25
 800473a:	4311      	orrs	r1, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004740:	0912      	lsrs	r2, r2, #4
 8004742:	0452      	lsls	r2, r2, #17
 8004744:	430a      	orrs	r2, r1
 8004746:	4941      	ldr	r1, [pc, #260]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800474c:	4b3f      	ldr	r3, [pc, #252]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3e      	ldr	r2, [pc, #248]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 8004752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004756:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004758:	4b3c      	ldr	r3, [pc, #240]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4a3b      	ldr	r2, [pc, #236]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 800475e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004762:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004764:	f7fe fa02 	bl	8002b6c <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fe f9fe 	bl	8002b6c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e062      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477e:	4b33      	ldr	r3, [pc, #204]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800478a:	e05a      	b.n	8004842 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e059      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004790:	4b2e      	ldr	r3, [pc, #184]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d152      	bne.n	8004842 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2a      	ldr	r2, [pc, #168]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80047a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047a8:	4b28      	ldr	r3, [pc, #160]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a27      	ldr	r2, [pc, #156]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80047ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047b4:	f7fe f9da 	bl	8002b6c <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047bc:	f7fe f9d6 	bl	8002b6c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e03a      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ce:	4b1f      	ldr	r3, [pc, #124]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0x734>
 80047da:	e032      	b.n	8004842 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d02d      	beq.n	800483e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e2:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a19      	ldr	r2, [pc, #100]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80047e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80047ee:	4b17      	ldr	r3, [pc, #92]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d105      	bne.n	8004806 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	4a13      	ldr	r2, [pc, #76]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 8004800:	f023 0303 	bic.w	r3, r3, #3
 8004804:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004806:	4b11      	ldr	r3, [pc, #68]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	4a10      	ldr	r2, [pc, #64]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 800480c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004814:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fe f9a9 	bl	8002b6c <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481e:	f7fe f9a5 	bl	8002b6c <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e009      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_RCC_OscConfig+0x7c4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f0      	bne.n	800481e <HAL_RCC_OscConfig+0x796>
 800483c:	e001      	b.n	8004842 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40021000 	.word	0x40021000
 8004850:	f99d808c 	.word	0xf99d808c

08004854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0c8      	b.n	80049fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004868:	4b66      	ldr	r3, [pc, #408]	; (8004a04 <HAL_RCC_ClockConfig+0x1b0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d910      	bls.n	8004898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <HAL_RCC_ClockConfig+0x1b0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 0207 	bic.w	r2, r3, #7
 800487e:	4961      	ldr	r1, [pc, #388]	; (8004a04 <HAL_RCC_ClockConfig+0x1b0>)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	4313      	orrs	r3, r2
 8004884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b5f      	ldr	r3, [pc, #380]	; (8004a04 <HAL_RCC_ClockConfig+0x1b0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0b0      	b.n	80049fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d04c      	beq.n	800493e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d107      	bne.n	80048bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ac:	4b56      	ldr	r3, [pc, #344]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d121      	bne.n	80048fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e09e      	b.n	80049fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048c4:	4b50      	ldr	r3, [pc, #320]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d115      	bne.n	80048fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e092      	b.n	80049fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d107      	bne.n	80048ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048dc:	4b4a      	ldr	r3, [pc, #296]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e086      	b.n	80049fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ec:	4b46      	ldr	r3, [pc, #280]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e07e      	b.n	80049fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048fc:	4b42      	ldr	r3, [pc, #264]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f023 0203 	bic.w	r2, r3, #3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	493f      	ldr	r1, [pc, #252]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490e:	f7fe f92d 	bl	8002b6c <HAL_GetTick>
 8004912:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004914:	e00a      	b.n	800492c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004916:	f7fe f929 	bl	8002b6c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f241 3288 	movw	r2, #5000	; 0x1388
 8004924:	4293      	cmp	r3, r2
 8004926:	d901      	bls.n	800492c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e066      	b.n	80049fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492c:	4b36      	ldr	r3, [pc, #216]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 020c 	and.w	r2, r3, #12
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	429a      	cmp	r2, r3
 800493c:	d1eb      	bne.n	8004916 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494a:	4b2f      	ldr	r3, [pc, #188]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	492c      	ldr	r1, [pc, #176]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800495c:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <HAL_RCC_ClockConfig+0x1b0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d210      	bcs.n	800498c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b26      	ldr	r3, [pc, #152]	; (8004a04 <HAL_RCC_ClockConfig+0x1b0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 0207 	bic.w	r2, r3, #7
 8004972:	4924      	ldr	r1, [pc, #144]	; (8004a04 <HAL_RCC_ClockConfig+0x1b0>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <HAL_RCC_ClockConfig+0x1b0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e036      	b.n	80049fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4918      	ldr	r1, [pc, #96]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b6:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4910      	ldr	r1, [pc, #64]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049ca:	f000 f825 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <HAL_RCC_ClockConfig+0x1b4>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	490c      	ldr	r1, [pc, #48]	; (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 80049dc:	5ccb      	ldrb	r3, [r1, r3]
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	fa22 f303 	lsr.w	r3, r2, r3
 80049e6:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fd fa48 	bl	8001e84 <HAL_InitTick>
 80049f4:	4603      	mov	r3, r0
 80049f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80049f8:	7afb      	ldrb	r3, [r7, #11]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40022000 	.word	0x40022000
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	0800ad30 	.word	0x0800ad30
 8004a10:	20000000 	.word	0x20000000
 8004a14:	20000008 	.word	0x20000008

08004a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a26:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a30:	4b3b      	ldr	r3, [pc, #236]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x34>
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d121      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d11e      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a4c:	4b34      	ldr	r3, [pc, #208]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a58:	4b31      	ldr	r3, [pc, #196]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	e005      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a68:	4b2d      	ldr	r3, [pc, #180]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a74:	4a2b      	ldr	r2, [pc, #172]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a90:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	e004      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a9c:	4b23      	ldr	r3, [pc, #140]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8004a9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b0c      	cmp	r3, #12
 8004aa4:	d134      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d003      	beq.n	8004abe <HAL_RCC_GetSysClockFreq+0xa6>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d003      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0xac>
 8004abc:	e005      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004abe:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ac0:	617b      	str	r3, [r7, #20]
      break;
 8004ac2:	e005      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ac6:	617b      	str	r3, [r7, #20]
      break;
 8004ac8:	e002      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	617b      	str	r3, [r7, #20]
      break;
 8004ace:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ad0:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	3301      	adds	r3, #1
 8004adc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	0a1b      	lsrs	r3, r3, #8
 8004ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	fb02 f203 	mul.w	r2, r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	0e5b      	lsrs	r3, r3, #25
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	3301      	adds	r3, #1
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b10:	69bb      	ldr	r3, [r7, #24]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3724      	adds	r7, #36	; 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000
 8004b24:	0800ad48 	.word	0x0800ad48
 8004b28:	00f42400 	.word	0x00f42400
 8004b2c:	007a1200 	.word	0x007a1200

08004b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000000 	.word	0x20000000

08004b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b4c:	f7ff fff0 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	0a1b      	lsrs	r3, r3, #8
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4904      	ldr	r1, [pc, #16]	; (8004b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	0800ad40 	.word	0x0800ad40

08004b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b78:	f7ff ffda 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	0adb      	lsrs	r3, r3, #11
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	4904      	ldr	r1, [pc, #16]	; (8004b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b8a:	5ccb      	ldrb	r3, [r1, r3]
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	0800ad40 	.word	0x0800ad40

08004ba0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	220f      	movs	r2, #15
 8004bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0203 	and.w	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <HAL_RCC_GetClockConfig+0x60>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0207 	and.w	r2, r3, #7
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	601a      	str	r2, [r3, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40022000 	.word	0x40022000

08004c04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c10:	4b2a      	ldr	r3, [pc, #168]	; (8004cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c1c:	f7ff f9d0 	bl	8003fc0 <HAL_PWREx_GetVoltageRange>
 8004c20:	6178      	str	r0, [r7, #20]
 8004c22:	e014      	b.n	8004c4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c24:	4b25      	ldr	r3, [pc, #148]	; (8004cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c30:	4b22      	ldr	r3, [pc, #136]	; (8004cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c3c:	f7ff f9c0 	bl	8003fc0 <HAL_PWREx_GetVoltageRange>
 8004c40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	4a1d      	ldr	r2, [pc, #116]	; (8004cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c54:	d10b      	bne.n	8004c6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d919      	bls.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2ba0      	cmp	r3, #160	; 0xa0
 8004c60:	d902      	bls.n	8004c68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c62:	2302      	movs	r3, #2
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	e013      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c68:	2301      	movs	r3, #1
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	e010      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b80      	cmp	r3, #128	; 0x80
 8004c72:	d902      	bls.n	8004c7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c74:	2303      	movs	r3, #3
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	e00a      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b80      	cmp	r3, #128	; 0x80
 8004c7e:	d102      	bne.n	8004c86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c80:	2302      	movs	r3, #2
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	e004      	b.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b70      	cmp	r3, #112	; 0x70
 8004c8a:	d101      	bne.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f023 0207 	bic.w	r2, r3, #7
 8004c98:	4909      	ldr	r1, [pc, #36]	; (8004cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ca0:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d001      	beq.n	8004cb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40022000 	.word	0x40022000

08004cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ccc:	2300      	movs	r3, #0
 8004cce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d041      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ce4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ce8:	d02a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004cea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cee:	d824      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cf4:	d008      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cfa:	d81e      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d04:	d010      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d06:	e018      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d08:	4b86      	ldr	r3, [pc, #536]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4a85      	ldr	r2, [pc, #532]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d12:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d14:	e015      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fabb 	bl	8005298 <RCCEx_PLLSAI1_Config>
 8004d22:	4603      	mov	r3, r0
 8004d24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d26:	e00c      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3320      	adds	r3, #32
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fba6 	bl	8005480 <RCCEx_PLLSAI2_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d38:	e003      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d3e:	e000      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d42:	7cfb      	ldrb	r3, [r7, #19]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d48:	4b76      	ldr	r3, [pc, #472]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d56:	4973      	ldr	r1, [pc, #460]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d5e:	e001      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d041      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d78:	d02a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d7e:	d824      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d84:	d008      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d8a:	d81e      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d94:	d010      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d96:	e018      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d98:	4b62      	ldr	r3, [pc, #392]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4a61      	ldr	r2, [pc, #388]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004da4:	e015      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3304      	adds	r3, #4
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fa73 	bl	8005298 <RCCEx_PLLSAI1_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004db6:	e00c      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3320      	adds	r3, #32
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fb5e 	bl	8005480 <RCCEx_PLLSAI2_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dc8:	e003      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	74fb      	strb	r3, [r7, #19]
      break;
 8004dce:	e000      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dd2:	7cfb      	ldrb	r3, [r7, #19]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10b      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dd8:	4b52      	ldr	r3, [pc, #328]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de6:	494f      	ldr	r1, [pc, #316]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dee:	e001      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df0:	7cfb      	ldrb	r3, [r7, #19]
 8004df2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80a0 	beq.w	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e02:	2300      	movs	r3, #0
 8004e04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e06:	4b47      	ldr	r3, [pc, #284]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e16:	2300      	movs	r3, #0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00d      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e1c:	4b41      	ldr	r3, [pc, #260]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	4a40      	ldr	r2, [pc, #256]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e26:	6593      	str	r3, [r2, #88]	; 0x58
 8004e28:	4b3e      	ldr	r3, [pc, #248]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e34:	2301      	movs	r3, #1
 8004e36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e38:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a3a      	ldr	r2, [pc, #232]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e44:	f7fd fe92 	bl	8002b6c <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e4a:	e009      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4c:	f7fd fe8e 	bl	8002b6c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d902      	bls.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e5e:	e005      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e60:	4b31      	ldr	r3, [pc, #196]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0ef      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e6c:	7cfb      	ldrb	r3, [r7, #19]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d15c      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e72:	4b2c      	ldr	r3, [pc, #176]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01f      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d019      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e90:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e9c:	4b21      	ldr	r3, [pc, #132]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea2:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eac:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb2:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ebc:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d016      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ece:	f7fd fe4d 	bl	8002b6c <HAL_GetTick>
 8004ed2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed4:	e00b      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7fd fe49 	bl	8002b6c <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d902      	bls.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	74fb      	strb	r3, [r7, #19]
            break;
 8004eec:	e006      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ec      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004efc:	7cfb      	ldrb	r3, [r7, #19]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f12:	4904      	ldr	r1, [pc, #16]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f1a:	e009      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f1c:	7cfb      	ldrb	r3, [r7, #19]
 8004f1e:	74bb      	strb	r3, [r7, #18]
 8004f20:	e006      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2c:	7cfb      	ldrb	r3, [r7, #19]
 8004f2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f30:	7c7b      	ldrb	r3, [r7, #17]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d105      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f36:	4b9e      	ldr	r3, [pc, #632]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3a:	4a9d      	ldr	r2, [pc, #628]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f4e:	4b98      	ldr	r3, [pc, #608]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f54:	f023 0203 	bic.w	r2, r3, #3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	4994      	ldr	r1, [pc, #592]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f70:	4b8f      	ldr	r3, [pc, #572]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f76:	f023 020c 	bic.w	r2, r3, #12
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	498c      	ldr	r1, [pc, #560]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f92:	4b87      	ldr	r3, [pc, #540]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	4983      	ldr	r1, [pc, #524]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fb4:	4b7e      	ldr	r3, [pc, #504]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	497b      	ldr	r1, [pc, #492]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fd6:	4b76      	ldr	r3, [pc, #472]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe4:	4972      	ldr	r1, [pc, #456]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ff8:	4b6d      	ldr	r3, [pc, #436]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	496a      	ldr	r1, [pc, #424]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800501a:	4b65      	ldr	r3, [pc, #404]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005020:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005028:	4961      	ldr	r1, [pc, #388]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800503c:	4b5c      	ldr	r3, [pc, #368]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504a:	4959      	ldr	r1, [pc, #356]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800505e:	4b54      	ldr	r3, [pc, #336]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005064:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506c:	4950      	ldr	r1, [pc, #320]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005080:	4b4b      	ldr	r3, [pc, #300]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	4948      	ldr	r1, [pc, #288]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050a2:	4b43      	ldr	r3, [pc, #268]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b0:	493f      	ldr	r1, [pc, #252]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d028      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050c4:	4b3a      	ldr	r3, [pc, #232]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d2:	4937      	ldr	r1, [pc, #220]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e2:	d106      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050e4:	4b32      	ldr	r3, [pc, #200]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4a31      	ldr	r2, [pc, #196]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ee:	60d3      	str	r3, [r2, #12]
 80050f0:	e011      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050fa:	d10c      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3304      	adds	r3, #4
 8005100:	2101      	movs	r1, #1
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f8c8 	bl	8005298 <RCCEx_PLLSAI1_Config>
 8005108:	4603      	mov	r3, r0
 800510a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800510c:	7cfb      	ldrb	r3, [r7, #19]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005112:	7cfb      	ldrb	r3, [r7, #19]
 8005114:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d028      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005122:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005128:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	491f      	ldr	r1, [pc, #124]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005140:	d106      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005142:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800514c:	60d3      	str	r3, [r2, #12]
 800514e:	e011      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005158:	d10c      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3304      	adds	r3, #4
 800515e:	2101      	movs	r1, #1
 8005160:	4618      	mov	r0, r3
 8005162:	f000 f899 	bl	8005298 <RCCEx_PLLSAI1_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800516a:	7cfb      	ldrb	r3, [r7, #19]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005170:	7cfb      	ldrb	r3, [r7, #19]
 8005172:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d02b      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518e:	4908      	ldr	r1, [pc, #32]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800519a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800519e:	d109      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a0:	4b03      	ldr	r3, [pc, #12]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4a02      	ldr	r2, [pc, #8]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051aa:	60d3      	str	r3, [r2, #12]
 80051ac:	e014      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	2101      	movs	r1, #1
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f867 	bl	8005298 <RCCEx_PLLSAI1_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ce:	7cfb      	ldrb	r3, [r7, #19]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d02f      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051e4:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051f2:	4928      	ldr	r1, [pc, #160]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005202:	d10d      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3304      	adds	r3, #4
 8005208:	2102      	movs	r1, #2
 800520a:	4618      	mov	r0, r3
 800520c:	f000 f844 	bl	8005298 <RCCEx_PLLSAI1_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d014      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800521a:	7cfb      	ldrb	r3, [r7, #19]
 800521c:	74bb      	strb	r3, [r7, #18]
 800521e:	e011      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005228:	d10c      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3320      	adds	r3, #32
 800522e:	2102      	movs	r1, #2
 8005230:	4618      	mov	r0, r3
 8005232:	f000 f925 	bl	8005480 <RCCEx_PLLSAI2_Config>
 8005236:	4603      	mov	r3, r0
 8005238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800523a:	7cfb      	ldrb	r3, [r7, #19]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005250:	4b10      	ldr	r3, [pc, #64]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525e:	490d      	ldr	r1, [pc, #52]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00b      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005272:	4b08      	ldr	r3, [pc, #32]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005282:	4904      	ldr	r1, [pc, #16]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800528a:	7cbb      	ldrb	r3, [r7, #18]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40021000 	.word	0x40021000

08005298 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052a6:	4b75      	ldr	r3, [pc, #468]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d018      	beq.n	80052e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052b2:	4b72      	ldr	r3, [pc, #456]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f003 0203 	and.w	r2, r3, #3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d10d      	bne.n	80052de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
       ||
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80052ca:	4b6c      	ldr	r3, [pc, #432]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
       ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d047      	beq.n	800536e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	73fb      	strb	r3, [r7, #15]
 80052e2:	e044      	b.n	800536e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d018      	beq.n	800531e <RCCEx_PLLSAI1_Config+0x86>
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d825      	bhi.n	800533c <RCCEx_PLLSAI1_Config+0xa4>
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d002      	beq.n	80052fa <RCCEx_PLLSAI1_Config+0x62>
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d009      	beq.n	800530c <RCCEx_PLLSAI1_Config+0x74>
 80052f8:	e020      	b.n	800533c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052fa:	4b60      	ldr	r3, [pc, #384]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d11d      	bne.n	8005342 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800530a:	e01a      	b.n	8005342 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800530c:	4b5b      	ldr	r3, [pc, #364]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005314:	2b00      	cmp	r3, #0
 8005316:	d116      	bne.n	8005346 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800531c:	e013      	b.n	8005346 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800531e:	4b57      	ldr	r3, [pc, #348]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10f      	bne.n	800534a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800532a:	4b54      	ldr	r3, [pc, #336]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800533a:	e006      	b.n	800534a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	73fb      	strb	r3, [r7, #15]
      break;
 8005340:	e004      	b.n	800534c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005342:	bf00      	nop
 8005344:	e002      	b.n	800534c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005346:	bf00      	nop
 8005348:	e000      	b.n	800534c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800534a:	bf00      	nop
    }

    if(status == HAL_OK)
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10d      	bne.n	800536e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005352:	4b4a      	ldr	r3, [pc, #296]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6819      	ldr	r1, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	3b01      	subs	r3, #1
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	430b      	orrs	r3, r1
 8005368:	4944      	ldr	r1, [pc, #272]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 800536a:	4313      	orrs	r3, r2
 800536c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d17d      	bne.n	8005470 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005374:	4b41      	ldr	r3, [pc, #260]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a40      	ldr	r2, [pc, #256]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 800537a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800537e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005380:	f7fd fbf4 	bl	8002b6c <HAL_GetTick>
 8005384:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005386:	e009      	b.n	800539c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005388:	f7fd fbf0 	bl	8002b6c <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d902      	bls.n	800539c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	73fb      	strb	r3, [r7, #15]
        break;
 800539a:	e005      	b.n	80053a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800539c:	4b37      	ldr	r3, [pc, #220]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1ef      	bne.n	8005388 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d160      	bne.n	8005470 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d111      	bne.n	80053d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053b4:	4b31      	ldr	r3, [pc, #196]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80053bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6892      	ldr	r2, [r2, #8]
 80053c4:	0211      	lsls	r1, r2, #8
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68d2      	ldr	r2, [r2, #12]
 80053ca:	0912      	lsrs	r2, r2, #4
 80053cc:	0452      	lsls	r2, r2, #17
 80053ce:	430a      	orrs	r2, r1
 80053d0:	492a      	ldr	r1, [pc, #168]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	610b      	str	r3, [r1, #16]
 80053d6:	e027      	b.n	8005428 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d112      	bne.n	8005404 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053de:	4b27      	ldr	r3, [pc, #156]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80053e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6892      	ldr	r2, [r2, #8]
 80053ee:	0211      	lsls	r1, r2, #8
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6912      	ldr	r2, [r2, #16]
 80053f4:	0852      	lsrs	r2, r2, #1
 80053f6:	3a01      	subs	r2, #1
 80053f8:	0552      	lsls	r2, r2, #21
 80053fa:	430a      	orrs	r2, r1
 80053fc:	491f      	ldr	r1, [pc, #124]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]
 8005402:	e011      	b.n	8005428 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005404:	4b1d      	ldr	r3, [pc, #116]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800540c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6892      	ldr	r2, [r2, #8]
 8005414:	0211      	lsls	r1, r2, #8
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6952      	ldr	r2, [r2, #20]
 800541a:	0852      	lsrs	r2, r2, #1
 800541c:	3a01      	subs	r2, #1
 800541e:	0652      	lsls	r2, r2, #25
 8005420:	430a      	orrs	r2, r1
 8005422:	4916      	ldr	r1, [pc, #88]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005424:	4313      	orrs	r3, r2
 8005426:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005428:	4b14      	ldr	r3, [pc, #80]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a13      	ldr	r2, [pc, #76]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 800542e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005432:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005434:	f7fd fb9a 	bl	8002b6c <HAL_GetTick>
 8005438:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800543a:	e009      	b.n	8005450 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800543c:	f7fd fb96 	bl	8002b6c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d902      	bls.n	8005450 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	73fb      	strb	r3, [r7, #15]
          break;
 800544e:	e005      	b.n	800545c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005450:	4b0a      	ldr	r3, [pc, #40]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0ef      	beq.n	800543c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005462:	4b06      	ldr	r3, [pc, #24]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005464:	691a      	ldr	r2, [r3, #16]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	4904      	ldr	r1, [pc, #16]	; (800547c <RCCEx_PLLSAI1_Config+0x1e4>)
 800546c:	4313      	orrs	r3, r2
 800546e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40021000 	.word	0x40021000

08005480 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800548e:	4b6a      	ldr	r3, [pc, #424]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d018      	beq.n	80054cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800549a:	4b67      	ldr	r3, [pc, #412]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0203 	and.w	r2, r3, #3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d10d      	bne.n	80054c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
       ||
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054b2:	4b61      	ldr	r3, [pc, #388]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
       ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d047      	beq.n	8005556 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	73fb      	strb	r3, [r7, #15]
 80054ca:	e044      	b.n	8005556 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d018      	beq.n	8005506 <RCCEx_PLLSAI2_Config+0x86>
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d825      	bhi.n	8005524 <RCCEx_PLLSAI2_Config+0xa4>
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d002      	beq.n	80054e2 <RCCEx_PLLSAI2_Config+0x62>
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d009      	beq.n	80054f4 <RCCEx_PLLSAI2_Config+0x74>
 80054e0:	e020      	b.n	8005524 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054e2:	4b55      	ldr	r3, [pc, #340]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d11d      	bne.n	800552a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054f2:	e01a      	b.n	800552a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054f4:	4b50      	ldr	r3, [pc, #320]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d116      	bne.n	800552e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005504:	e013      	b.n	800552e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005506:	4b4c      	ldr	r3, [pc, #304]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10f      	bne.n	8005532 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005512:	4b49      	ldr	r3, [pc, #292]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005522:	e006      	b.n	8005532 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      break;
 8005528:	e004      	b.n	8005534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800552a:	bf00      	nop
 800552c:	e002      	b.n	8005534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005532:	bf00      	nop
    }

    if(status == HAL_OK)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10d      	bne.n	8005556 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800553a:	4b3f      	ldr	r3, [pc, #252]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6819      	ldr	r1, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	3b01      	subs	r3, #1
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	430b      	orrs	r3, r1
 8005550:	4939      	ldr	r1, [pc, #228]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005552:	4313      	orrs	r3, r2
 8005554:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d167      	bne.n	800562c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800555c:	4b36      	ldr	r3, [pc, #216]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a35      	ldr	r2, [pc, #212]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005568:	f7fd fb00 	bl	8002b6c <HAL_GetTick>
 800556c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800556e:	e009      	b.n	8005584 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005570:	f7fd fafc 	bl	8002b6c <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d902      	bls.n	8005584 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	73fb      	strb	r3, [r7, #15]
        break;
 8005582:	e005      	b.n	8005590 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005584:	4b2c      	ldr	r3, [pc, #176]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ef      	bne.n	8005570 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d14a      	bne.n	800562c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d111      	bne.n	80055c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800559c:	4b26      	ldr	r3, [pc, #152]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6892      	ldr	r2, [r2, #8]
 80055ac:	0211      	lsls	r1, r2, #8
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68d2      	ldr	r2, [r2, #12]
 80055b2:	0912      	lsrs	r2, r2, #4
 80055b4:	0452      	lsls	r2, r2, #17
 80055b6:	430a      	orrs	r2, r1
 80055b8:	491f      	ldr	r1, [pc, #124]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	614b      	str	r3, [r1, #20]
 80055be:	e011      	b.n	80055e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055c0:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6892      	ldr	r2, [r2, #8]
 80055d0:	0211      	lsls	r1, r2, #8
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6912      	ldr	r2, [r2, #16]
 80055d6:	0852      	lsrs	r2, r2, #1
 80055d8:	3a01      	subs	r2, #1
 80055da:	0652      	lsls	r2, r2, #25
 80055dc:	430a      	orrs	r2, r1
 80055de:	4916      	ldr	r1, [pc, #88]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055e4:	4b14      	ldr	r3, [pc, #80]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fd fabc 	bl	8002b6c <HAL_GetTick>
 80055f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055f6:	e009      	b.n	800560c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055f8:	f7fd fab8 	bl	8002b6c <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d902      	bls.n	800560c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	73fb      	strb	r3, [r7, #15]
          break;
 800560a:	e005      	b.n	8005618 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ef      	beq.n	80055f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	4904      	ldr	r1, [pc, #16]	; (8005638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005628:	4313      	orrs	r3, r2
 800562a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000

0800563c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e049      	b.n	80056e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fc ff28 	bl	80024b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f000 fc80 	bl	8005f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d001      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e04f      	b.n	80057a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a23      	ldr	r2, [pc, #140]	; (80057b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01d      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x76>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572e:	d018      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x76>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1f      	ldr	r2, [pc, #124]	; (80057b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x76>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1e      	ldr	r2, [pc, #120]	; (80057b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00e      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x76>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <HAL_TIM_Base_Start_IT+0xd0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x76>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1b      	ldr	r2, [pc, #108]	; (80057c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x76>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a19      	ldr	r2, [pc, #100]	; (80057c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d115      	bne.n	800578e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	4b17      	ldr	r3, [pc, #92]	; (80057c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800576a:	4013      	ands	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b06      	cmp	r3, #6
 8005772:	d015      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0xb4>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577a:	d011      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578c:	e008      	b.n	80057a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e000      	b.n	80057a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40000c00 	.word	0x40000c00
 80057c0:	40013400 	.word	0x40013400
 80057c4:	40014000 	.word	0x40014000
 80057c8:	00010007 	.word	0x00010007

080057cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e049      	b.n	8005872 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fc fe16 	bl	8002424 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f000 fbb8 	bl	8005f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e041      	b.n	8005912 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f839 	bl	800591a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f000 fb60 	bl	8005f80 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0208 	bic.w	r2, r2, #8
 80058ce:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6819      	ldr	r1, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b02      	cmp	r3, #2
 8005942:	d122      	bne.n	800598a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b02      	cmp	r3, #2
 8005950:	d11b      	bne.n	800598a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f06f 0202 	mvn.w	r2, #2
 800595a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7fb fb4d 	bl	8001010 <HAL_TIM_IC_CaptureCallback>
 8005976:	e005      	b.n	8005984 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fae3 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 faea 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b04      	cmp	r3, #4
 8005996:	d122      	bne.n	80059de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d11b      	bne.n	80059de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f06f 0204 	mvn.w	r2, #4
 80059ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fb fb23 	bl	8001010 <HAL_TIM_IC_CaptureCallback>
 80059ca:	e005      	b.n	80059d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fab9 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fac0 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d122      	bne.n	8005a32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d11b      	bne.n	8005a32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f06f 0208 	mvn.w	r2, #8
 8005a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2204      	movs	r2, #4
 8005a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7fb faf9 	bl	8001010 <HAL_TIM_IC_CaptureCallback>
 8005a1e:	e005      	b.n	8005a2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fa8f 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa96 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	d122      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b10      	cmp	r3, #16
 8005a4c:	d11b      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f06f 0210 	mvn.w	r2, #16
 8005a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fb facf 	bl	8001010 <HAL_TIM_IC_CaptureCallback>
 8005a72:	e005      	b.n	8005a80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fa65 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa6c 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d10e      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d107      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f06f 0201 	mvn.w	r2, #1
 8005aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7fc f957 	bl	8001d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abc:	2b80      	cmp	r3, #128	; 0x80
 8005abe:	d10e      	bne.n	8005ade <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aca:	2b80      	cmp	r3, #128	; 0x80
 8005acc:	d107      	bne.n	8005ade <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fdcf 	bl	800667c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aec:	d10e      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af8:	2b80      	cmp	r3, #128	; 0x80
 8005afa:	d107      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fdc2 	bl	8006690 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b40      	cmp	r3, #64	; 0x40
 8005b18:	d10e      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	d107      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa1a 	bl	8005f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d10e      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d107      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0220 	mvn.w	r2, #32
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fd82 	bl	8006668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e088      	b.n	8005c9c <HAL_TIM_IC_ConfigChannel+0x130>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d11b      	bne.n	8005bd0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f000 fb18 	bl	80061dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 020c 	bic.w	r2, r2, #12
 8005bba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6999      	ldr	r1, [r3, #24]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	619a      	str	r2, [r3, #24]
 8005bce:	e060      	b.n	8005c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d11c      	bne.n	8005c10 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	6819      	ldr	r1, [r3, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f000 fb96 	bl	8006316 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699a      	ldr	r2, [r3, #24]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bf8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6999      	ldr	r1, [r3, #24]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	021a      	lsls	r2, r3, #8
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	619a      	str	r2, [r3, #24]
 8005c0e:	e040      	b.n	8005c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d11b      	bne.n	8005c4e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6819      	ldr	r1, [r3, #0]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f000 fbe3 	bl	80063f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 020c 	bic.w	r2, r2, #12
 8005c38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	61da      	str	r2, [r3, #28]
 8005c4c:	e021      	b.n	8005c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b0c      	cmp	r3, #12
 8005c52:	d11c      	bne.n	8005c8e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6819      	ldr	r1, [r3, #0]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f000 fc00 	bl	8006468 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69da      	ldr	r2, [r3, #28]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c76:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	69d9      	ldr	r1, [r3, #28]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	021a      	lsls	r2, r3, #8
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	61da      	str	r2, [r3, #28]
 8005c8c:	e001      	b.n	8005c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e0b6      	b.n	8005e2e <HAL_TIM_ConfigClockSource+0x18a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfc:	d03e      	beq.n	8005d7c <HAL_TIM_ConfigClockSource+0xd8>
 8005cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d02:	f200 8087 	bhi.w	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0a:	f000 8086 	beq.w	8005e1a <HAL_TIM_ConfigClockSource+0x176>
 8005d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d12:	d87f      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d14:	2b70      	cmp	r3, #112	; 0x70
 8005d16:	d01a      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0xaa>
 8005d18:	2b70      	cmp	r3, #112	; 0x70
 8005d1a:	d87b      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d1c:	2b60      	cmp	r3, #96	; 0x60
 8005d1e:	d050      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x11e>
 8005d20:	2b60      	cmp	r3, #96	; 0x60
 8005d22:	d877      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d24:	2b50      	cmp	r3, #80	; 0x50
 8005d26:	d03c      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0xfe>
 8005d28:	2b50      	cmp	r3, #80	; 0x50
 8005d2a:	d873      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d2c:	2b40      	cmp	r3, #64	; 0x40
 8005d2e:	d058      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x13e>
 8005d30:	2b40      	cmp	r3, #64	; 0x40
 8005d32:	d86f      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d34:	2b30      	cmp	r3, #48	; 0x30
 8005d36:	d064      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15e>
 8005d38:	2b30      	cmp	r3, #48	; 0x30
 8005d3a:	d86b      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d060      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15e>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d867      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d05c      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15e>
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d05a      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15e>
 8005d4c:	e062      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6899      	ldr	r1, [r3, #8]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f000 fbdb 	bl	8006518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	609a      	str	r2, [r3, #8]
      break;
 8005d7a:	e04f      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	6899      	ldr	r1, [r3, #8]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f000 fbc4 	bl	8006518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d9e:	609a      	str	r2, [r3, #8]
      break;
 8005da0:	e03c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6859      	ldr	r1, [r3, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f000 fa82 	bl	80062b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2150      	movs	r1, #80	; 0x50
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fb91 	bl	80064e2 <TIM_ITRx_SetConfig>
      break;
 8005dc0:	e02c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6859      	ldr	r1, [r3, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f000 fade 	bl	8006390 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2160      	movs	r1, #96	; 0x60
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fb81 	bl	80064e2 <TIM_ITRx_SetConfig>
      break;
 8005de0:	e01c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6859      	ldr	r1, [r3, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f000 fa62 	bl	80062b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2140      	movs	r1, #64	; 0x40
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fb71 	bl	80064e2 <TIM_ITRx_SetConfig>
      break;
 8005e00:	e00c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	f000 fb68 	bl	80064e2 <TIM_ITRx_SetConfig>
      break;
 8005e12:	e003      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e000      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e031      	b.n	8005eb2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f927 	bl	80060b4 <TIM_SlaveTimer_SetConfig>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e018      	b.n	8005eb2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e8e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e9e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b0c      	cmp	r3, #12
 8005ece:	d831      	bhi.n	8005f34 <HAL_TIM_ReadCapturedValue+0x78>
 8005ed0:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed6:	bf00      	nop
 8005ed8:	08005f0d 	.word	0x08005f0d
 8005edc:	08005f35 	.word	0x08005f35
 8005ee0:	08005f35 	.word	0x08005f35
 8005ee4:	08005f35 	.word	0x08005f35
 8005ee8:	08005f17 	.word	0x08005f17
 8005eec:	08005f35 	.word	0x08005f35
 8005ef0:	08005f35 	.word	0x08005f35
 8005ef4:	08005f35 	.word	0x08005f35
 8005ef8:	08005f21 	.word	0x08005f21
 8005efc:	08005f35 	.word	0x08005f35
 8005f00:	08005f35 	.word	0x08005f35
 8005f04:	08005f35 	.word	0x08005f35
 8005f08:	08005f2b 	.word	0x08005f2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f12:	60fb      	str	r3, [r7, #12]

      break;
 8005f14:	e00f      	b.n	8005f36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	60fb      	str	r3, [r7, #12]

      break;
 8005f1e:	e00a      	b.n	8005f36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f26:	60fb      	str	r3, [r7, #12]

      break;
 8005f28:	e005      	b.n	8005f36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	60fb      	str	r3, [r7, #12]

      break;
 8005f32:	e000      	b.n	8005f36 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f34:	bf00      	nop
  }

  return tmpreg;
 8005f36:	68fb      	ldr	r3, [r7, #12]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a40      	ldr	r2, [pc, #256]	; (8006094 <TIM_Base_SetConfig+0x114>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9e:	d00f      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a3d      	ldr	r2, [pc, #244]	; (8006098 <TIM_Base_SetConfig+0x118>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00b      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a3c      	ldr	r2, [pc, #240]	; (800609c <TIM_Base_SetConfig+0x11c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d007      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a3b      	ldr	r2, [pc, #236]	; (80060a0 <TIM_Base_SetConfig+0x120>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d003      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a3a      	ldr	r2, [pc, #232]	; (80060a4 <TIM_Base_SetConfig+0x124>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d108      	bne.n	8005fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a2f      	ldr	r2, [pc, #188]	; (8006094 <TIM_Base_SetConfig+0x114>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01f      	beq.n	800601a <TIM_Base_SetConfig+0x9a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe0:	d01b      	beq.n	800601a <TIM_Base_SetConfig+0x9a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a2c      	ldr	r2, [pc, #176]	; (8006098 <TIM_Base_SetConfig+0x118>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d017      	beq.n	800601a <TIM_Base_SetConfig+0x9a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a2b      	ldr	r2, [pc, #172]	; (800609c <TIM_Base_SetConfig+0x11c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d013      	beq.n	800601a <TIM_Base_SetConfig+0x9a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2a      	ldr	r2, [pc, #168]	; (80060a0 <TIM_Base_SetConfig+0x120>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00f      	beq.n	800601a <TIM_Base_SetConfig+0x9a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a29      	ldr	r2, [pc, #164]	; (80060a4 <TIM_Base_SetConfig+0x124>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00b      	beq.n	800601a <TIM_Base_SetConfig+0x9a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a28      	ldr	r2, [pc, #160]	; (80060a8 <TIM_Base_SetConfig+0x128>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d007      	beq.n	800601a <TIM_Base_SetConfig+0x9a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a27      	ldr	r2, [pc, #156]	; (80060ac <TIM_Base_SetConfig+0x12c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d003      	beq.n	800601a <TIM_Base_SetConfig+0x9a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a26      	ldr	r2, [pc, #152]	; (80060b0 <TIM_Base_SetConfig+0x130>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d108      	bne.n	800602c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a10      	ldr	r2, [pc, #64]	; (8006094 <TIM_Base_SetConfig+0x114>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00f      	beq.n	8006078 <TIM_Base_SetConfig+0xf8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a12      	ldr	r2, [pc, #72]	; (80060a4 <TIM_Base_SetConfig+0x124>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00b      	beq.n	8006078 <TIM_Base_SetConfig+0xf8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a11      	ldr	r2, [pc, #68]	; (80060a8 <TIM_Base_SetConfig+0x128>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d007      	beq.n	8006078 <TIM_Base_SetConfig+0xf8>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a10      	ldr	r2, [pc, #64]	; (80060ac <TIM_Base_SetConfig+0x12c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_Base_SetConfig+0xf8>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a0f      	ldr	r2, [pc, #60]	; (80060b0 <TIM_Base_SetConfig+0x130>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d103      	bne.n	8006080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	615a      	str	r2, [r3, #20]
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40013400 	.word	0x40013400
 80060a8:	40014000 	.word	0x40014000
 80060ac:	40014400 	.word	0x40014400
 80060b0:	40014800 	.word	0x40014800

080060b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e2:	f023 0307 	bic.w	r3, r3, #7
 80060e6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b70      	cmp	r3, #112	; 0x70
 8006100:	d01a      	beq.n	8006138 <TIM_SlaveTimer_SetConfig+0x84>
 8006102:	2b70      	cmp	r3, #112	; 0x70
 8006104:	d860      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x114>
 8006106:	2b60      	cmp	r3, #96	; 0x60
 8006108:	d054      	beq.n	80061b4 <TIM_SlaveTimer_SetConfig+0x100>
 800610a:	2b60      	cmp	r3, #96	; 0x60
 800610c:	d85c      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x114>
 800610e:	2b50      	cmp	r3, #80	; 0x50
 8006110:	d046      	beq.n	80061a0 <TIM_SlaveTimer_SetConfig+0xec>
 8006112:	2b50      	cmp	r3, #80	; 0x50
 8006114:	d858      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x114>
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d019      	beq.n	800614e <TIM_SlaveTimer_SetConfig+0x9a>
 800611a:	2b40      	cmp	r3, #64	; 0x40
 800611c:	d854      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x114>
 800611e:	2b30      	cmp	r3, #48	; 0x30
 8006120:	d055      	beq.n	80061ce <TIM_SlaveTimer_SetConfig+0x11a>
 8006122:	2b30      	cmp	r3, #48	; 0x30
 8006124:	d850      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x114>
 8006126:	2b20      	cmp	r3, #32
 8006128:	d051      	beq.n	80061ce <TIM_SlaveTimer_SetConfig+0x11a>
 800612a:	2b20      	cmp	r3, #32
 800612c:	d84c      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x114>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d04d      	beq.n	80061ce <TIM_SlaveTimer_SetConfig+0x11a>
 8006132:	2b10      	cmp	r3, #16
 8006134:	d04b      	beq.n	80061ce <TIM_SlaveTimer_SetConfig+0x11a>
 8006136:	e047      	b.n	80061c8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68d9      	ldr	r1, [r3, #12]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f000 f9e6 	bl	8006518 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800614c:	e040      	b.n	80061d0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b05      	cmp	r3, #5
 8006154:	d101      	bne.n	800615a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e03b      	b.n	80061d2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6a1a      	ldr	r2, [r3, #32]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006180:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	4313      	orrs	r3, r2
 800618c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	621a      	str	r2, [r3, #32]
      break;
 800619e:	e017      	b.n	80061d0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	6899      	ldr	r1, [r3, #8]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	461a      	mov	r2, r3
 80061ae:	f000 f883 	bl	80062b8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80061b2:	e00d      	b.n	80061d0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	6899      	ldr	r1, [r3, #8]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	461a      	mov	r2, r3
 80061c2:	f000 f8e5 	bl	8006390 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80061c6:	e003      	b.n	80061d0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	75fb      	strb	r3, [r7, #23]
      break;
 80061cc:	e000      	b.n	80061d0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80061ce:	bf00      	nop
  }

  return status;
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f023 0201 	bic.w	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4a26      	ldr	r2, [pc, #152]	; (80062a0 <TIM_TI1_SetConfig+0xc4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d017      	beq.n	800623a <TIM_TI1_SetConfig+0x5e>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006210:	d013      	beq.n	800623a <TIM_TI1_SetConfig+0x5e>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4a23      	ldr	r2, [pc, #140]	; (80062a4 <TIM_TI1_SetConfig+0xc8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00f      	beq.n	800623a <TIM_TI1_SetConfig+0x5e>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a22      	ldr	r2, [pc, #136]	; (80062a8 <TIM_TI1_SetConfig+0xcc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00b      	beq.n	800623a <TIM_TI1_SetConfig+0x5e>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4a21      	ldr	r2, [pc, #132]	; (80062ac <TIM_TI1_SetConfig+0xd0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d007      	beq.n	800623a <TIM_TI1_SetConfig+0x5e>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4a20      	ldr	r2, [pc, #128]	; (80062b0 <TIM_TI1_SetConfig+0xd4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d003      	beq.n	800623a <TIM_TI1_SetConfig+0x5e>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4a1f      	ldr	r2, [pc, #124]	; (80062b4 <TIM_TI1_SetConfig+0xd8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d101      	bne.n	800623e <TIM_TI1_SetConfig+0x62>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <TIM_TI1_SetConfig+0x64>
 800623e:	2300      	movs	r3, #0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	e003      	b.n	800625e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	b2db      	uxtb	r3, r3
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f023 030a 	bic.w	r3, r3, #10
 8006278:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f003 030a 	and.w	r3, r3, #10
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40012c00 	.word	0x40012c00
 80062a4:	40000400 	.word	0x40000400
 80062a8:	40000800 	.word	0x40000800
 80062ac:	40000c00 	.word	0x40000c00
 80062b0:	40013400 	.word	0x40013400
 80062b4:	40014000 	.word	0x40014000

080062b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f023 0201 	bic.w	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 030a 	bic.w	r3, r3, #10
 80062f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006316:	b480      	push	{r7}
 8006318:	b087      	sub	sp, #28
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
 8006322:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	f023 0210 	bic.w	r2, r3, #16
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006342:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	021b      	lsls	r3, r3, #8
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	031b      	lsls	r3, r3, #12
 800635a:	b29b      	uxth	r3, r3
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006368:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	621a      	str	r2, [r3, #32]
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f023 0210 	bic.w	r2, r3, #16
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	031b      	lsls	r3, r3, #12
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	621a      	str	r2, [r3, #32]
}
 80063e4:	bf00      	nop
 80063e6:	371c      	adds	r7, #28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f023 0303 	bic.w	r3, r3, #3
 800641c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800642c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	b2db      	uxtb	r3, r3
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006440:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	621a      	str	r2, [r3, #32]
}
 800645c:	bf00      	nop
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006494:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	031b      	lsls	r3, r3, #12
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80064ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	031b      	lsls	r3, r3, #12
 80064c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	621a      	str	r2, [r3, #32]
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	f043 0307 	orr.w	r3, r3, #7
 8006504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	609a      	str	r2, [r3, #8]
}
 800650c:	bf00      	nop
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	021a      	lsls	r2, r3, #8
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	431a      	orrs	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4313      	orrs	r3, r2
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	609a      	str	r2, [r3, #8]
}
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800656c:	2302      	movs	r3, #2
 800656e:	e068      	b.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a2e      	ldr	r2, [pc, #184]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d004      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a2d      	ldr	r2, [pc, #180]	; (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d108      	bne.n	80065b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1e      	ldr	r2, [pc, #120]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d01d      	beq.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e2:	d018      	beq.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1b      	ldr	r2, [pc, #108]	; (8006658 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1a      	ldr	r2, [pc, #104]	; (800665c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00e      	beq.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a18      	ldr	r2, [pc, #96]	; (8006660 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d009      	beq.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a13      	ldr	r2, [pc, #76]	; (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d004      	beq.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a14      	ldr	r2, [pc, #80]	; (8006664 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d10c      	bne.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800661c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	4313      	orrs	r3, r2
 8006626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40012c00 	.word	0x40012c00
 8006654:	40013400 	.word	0x40013400
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00
 8006664:	40014000 	.word	0x40014000

08006668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e040      	b.n	8006738 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fc f842 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2224      	movs	r2, #36	; 0x24
 80066d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0201 	bic.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fc18 	bl	8006f18 <UART_SetConfig>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e022      	b.n	8006738 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fe96 	bl	800742c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800670e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800671e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 ff1d 	bl	8007570 <UART_CheckIdleState>
 8006736:	4603      	mov	r3, r0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	; 0x28
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006754:	2b20      	cmp	r3, #32
 8006756:	f040 8082 	bne.w	800685e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <HAL_UART_Transmit+0x26>
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e07a      	b.n	8006860 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_UART_Transmit+0x38>
 8006774:	2302      	movs	r3, #2
 8006776:	e073      	b.n	8006860 <HAL_UART_Transmit+0x120>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2221      	movs	r2, #33	; 0x21
 800678c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800678e:	f7fc f9ed 	bl	8002b6c <HAL_GetTick>
 8006792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	88fa      	ldrh	r2, [r7, #6]
 8006798:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ac:	d108      	bne.n	80067c0 <HAL_UART_Transmit+0x80>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	e003      	b.n	80067c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067c4:	2300      	movs	r3, #0
 80067c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80067d0:	e02d      	b.n	800682e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2200      	movs	r2, #0
 80067da:	2180      	movs	r1, #128	; 0x80
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 ff10 	bl	8007602 <UART_WaitOnFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e039      	b.n	8006860 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10b      	bne.n	800680a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	881a      	ldrh	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067fe:	b292      	uxth	r2, r2
 8006800:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	3302      	adds	r3, #2
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	e008      	b.n	800681c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	781a      	ldrb	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	b292      	uxth	r2, r2
 8006814:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	3301      	adds	r3, #1
 800681a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1cb      	bne.n	80067d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2200      	movs	r2, #0
 8006842:	2140      	movs	r1, #64	; 0x40
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fedc 	bl	8007602 <UART_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e005      	b.n	8006860 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	e000      	b.n	8006860 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800685e:	2302      	movs	r3, #2
  }
}
 8006860:	4618      	mov	r0, r3
 8006862:	3720      	adds	r7, #32
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	4613      	mov	r3, r2
 8006874:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800687a:	2b20      	cmp	r3, #32
 800687c:	d142      	bne.n	8006904 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <HAL_UART_Receive_IT+0x22>
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e03b      	b.n	8006906 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_UART_Receive_IT+0x34>
 8006898:	2302      	movs	r3, #2
 800689a:	e034      	b.n	8006906 <HAL_UART_Receive_IT+0x9e>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a18      	ldr	r2, [pc, #96]	; (8006910 <HAL_UART_Receive_IT+0xa8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d01f      	beq.n	80068f4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d018      	beq.n	80068f4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	613b      	str	r3, [r7, #16]
   return(result);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	623b      	str	r3, [r7, #32]
 80068e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	69f9      	ldr	r1, [r7, #28]
 80068e6:	6a3a      	ldr	r2, [r7, #32]
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e6      	bne.n	80068c2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	461a      	mov	r2, r3
 80068f8:	68b9      	ldr	r1, [r7, #8]
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 ff46 	bl	800778c <UART_Start_Receive_IT>
 8006900:	4603      	mov	r3, r0
 8006902:	e000      	b.n	8006906 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006904:	2302      	movs	r3, #2
  }
}
 8006906:	4618      	mov	r0, r3
 8006908:	3728      	adds	r7, #40	; 0x28
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40008000 	.word	0x40008000

08006914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b0ba      	sub	sp, #232	; 0xe8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800693a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800693e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006942:	4013      	ands	r3, r2
 8006944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d115      	bne.n	800697c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00f      	beq.n	800697c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 82a6 	beq.w	8006ebe <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
      }
      return;
 800697a:	e2a0      	b.n	8006ebe <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800697c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8117 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006996:	4b85      	ldr	r3, [pc, #532]	; (8006bac <HAL_UART_IRQHandler+0x298>)
 8006998:	4013      	ands	r3, r2
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 810a 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d011      	beq.n	80069d0 <HAL_UART_IRQHandler+0xbc>
 80069ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2201      	movs	r2, #1
 80069be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c6:	f043 0201 	orr.w	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d011      	beq.n	8006a00 <HAL_UART_IRQHandler+0xec>
 80069dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2202      	movs	r2, #2
 80069ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f6:	f043 0204 	orr.w	r2, r3, #4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d011      	beq.n	8006a30 <HAL_UART_IRQHandler+0x11c>
 8006a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00b      	beq.n	8006a30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a26:	f043 0202 	orr.w	r2, r3, #2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a34:	f003 0308 	and.w	r3, r3, #8
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d017      	beq.n	8006a6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d105      	bne.n	8006a54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2208      	movs	r2, #8
 8006a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a62:	f043 0208 	orr.w	r2, r3, #8
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d012      	beq.n	8006a9e <HAL_UART_IRQHandler+0x18a>
 8006a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a94:	f043 0220 	orr.w	r2, r3, #32
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 820c 	beq.w	8006ec2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d005      	beq.n	8006af6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d04f      	beq.n	8006b96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 ff12 	bl	8007920 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d141      	bne.n	8006b8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3308      	adds	r3, #8
 8006b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1d9      	bne.n	8006b0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d013      	beq.n	8006b86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b62:	4a13      	ldr	r2, [pc, #76]	; (8006bb0 <HAL_UART_IRQHandler+0x29c>)
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fc ff76 	bl	8003a5c <HAL_DMA_Abort_IT>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d017      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006b80:	4610      	mov	r0, r2
 8006b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	e00f      	b.n	8006ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f9b0 	bl	8006eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8c:	e00b      	b.n	8006ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f9ac 	bl	8006eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	e007      	b.n	8006ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f9a8 	bl	8006eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006ba4:	e18d      	b.n	8006ec2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba6:	bf00      	nop
    return;
 8006ba8:	e18b      	b.n	8006ec2 <HAL_UART_IRQHandler+0x5ae>
 8006baa:	bf00      	nop
 8006bac:	04000120 	.word	0x04000120
 8006bb0:	080079e7 	.word	0x080079e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	f040 8146 	bne.w	8006e4a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 813f 	beq.w	8006e4a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8138 	beq.w	8006e4a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2210      	movs	r2, #16
 8006be0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	f040 80b4 	bne.w	8006d5a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 815f 	beq.w	8006ec6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c12:	429a      	cmp	r2, r3
 8006c14:	f080 8157 	bcs.w	8006ec6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f040 8085 	bne.w	8006d3e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1da      	bne.n	8006c34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ca2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006caa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e1      	bne.n	8006c7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ce0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ce4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e3      	bne.n	8006cba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d0e:	f023 0310 	bic.w	r3, r3, #16
 8006d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d20:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e4      	bne.n	8006cfe <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fc fe51 	bl	80039e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f8d4 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d58:	e0b5      	b.n	8006ec6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 80a7 	beq.w	8006eca <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006d7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80a2 	beq.w	8006eca <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006da8:	647b      	str	r3, [r7, #68]	; 0x44
 8006daa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e4      	bne.n	8006d86 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	623b      	str	r3, [r7, #32]
   return(result);
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006de0:	633a      	str	r2, [r7, #48]	; 0x30
 8006de2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e3      	bne.n	8006dbc <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0310 	bic.w	r3, r3, #16
 8006e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	69b9      	ldr	r1, [r7, #24]
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	617b      	str	r3, [r7, #20]
   return(result);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e4      	bne.n	8006e06 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f85c 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e48:	e03f      	b.n	8006eca <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00e      	beq.n	8006e74 <HAL_UART_IRQHandler+0x560>
 8006e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 ff5a 	bl	8007d26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e72:	e02d      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00e      	beq.n	8006e9e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d008      	beq.n	8006e9e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01c      	beq.n	8006ece <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
    }
    return;
 8006e9c:	e017      	b.n	8006ece <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d012      	beq.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
 8006eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00c      	beq.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fdab 	bl	8007a12 <UART_EndTransmit_IT>
    return;
 8006ebc:	e008      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ebe:	bf00      	nop
 8006ec0:	e006      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ec2:	bf00      	nop
 8006ec4:	e004      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ec6:	bf00      	nop
 8006ec8:	e002      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006eca:	bf00      	nop
 8006ecc:	e000      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ece:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ed0:	37e8      	adds	r7, #232	; 0xe8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop

08006ed8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f18:	b5b0      	push	{r4, r5, r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4bad      	ldr	r3, [pc, #692]	; (80071f8 <UART_SetConfig+0x2e0>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6812      	ldr	r2, [r2, #0]
 8006f4a:	69f9      	ldr	r1, [r7, #28]
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4aa2      	ldr	r2, [pc, #648]	; (80071fc <UART_SetConfig+0x2e4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a99      	ldr	r2, [pc, #612]	; (8007200 <UART_SetConfig+0x2e8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d121      	bne.n	8006fe2 <UART_SetConfig+0xca>
 8006f9e:	4b99      	ldr	r3, [pc, #612]	; (8007204 <UART_SetConfig+0x2ec>)
 8006fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa4:	f003 0303 	and.w	r3, r3, #3
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d817      	bhi.n	8006fdc <UART_SetConfig+0xc4>
 8006fac:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <UART_SetConfig+0x9c>)
 8006fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb2:	bf00      	nop
 8006fb4:	08006fc5 	.word	0x08006fc5
 8006fb8:	08006fd1 	.word	0x08006fd1
 8006fbc:	08006fcb 	.word	0x08006fcb
 8006fc0:	08006fd7 	.word	0x08006fd7
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	76fb      	strb	r3, [r7, #27]
 8006fc8:	e0e7      	b.n	800719a <UART_SetConfig+0x282>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	76fb      	strb	r3, [r7, #27]
 8006fce:	e0e4      	b.n	800719a <UART_SetConfig+0x282>
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	76fb      	strb	r3, [r7, #27]
 8006fd4:	e0e1      	b.n	800719a <UART_SetConfig+0x282>
 8006fd6:	2308      	movs	r3, #8
 8006fd8:	76fb      	strb	r3, [r7, #27]
 8006fda:	e0de      	b.n	800719a <UART_SetConfig+0x282>
 8006fdc:	2310      	movs	r3, #16
 8006fde:	76fb      	strb	r3, [r7, #27]
 8006fe0:	e0db      	b.n	800719a <UART_SetConfig+0x282>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a88      	ldr	r2, [pc, #544]	; (8007208 <UART_SetConfig+0x2f0>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d132      	bne.n	8007052 <UART_SetConfig+0x13a>
 8006fec:	4b85      	ldr	r3, [pc, #532]	; (8007204 <UART_SetConfig+0x2ec>)
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff2:	f003 030c 	and.w	r3, r3, #12
 8006ff6:	2b0c      	cmp	r3, #12
 8006ff8:	d828      	bhi.n	800704c <UART_SetConfig+0x134>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <UART_SetConfig+0xe8>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007035 	.word	0x08007035
 8007004:	0800704d 	.word	0x0800704d
 8007008:	0800704d 	.word	0x0800704d
 800700c:	0800704d 	.word	0x0800704d
 8007010:	08007041 	.word	0x08007041
 8007014:	0800704d 	.word	0x0800704d
 8007018:	0800704d 	.word	0x0800704d
 800701c:	0800704d 	.word	0x0800704d
 8007020:	0800703b 	.word	0x0800703b
 8007024:	0800704d 	.word	0x0800704d
 8007028:	0800704d 	.word	0x0800704d
 800702c:	0800704d 	.word	0x0800704d
 8007030:	08007047 	.word	0x08007047
 8007034:	2300      	movs	r3, #0
 8007036:	76fb      	strb	r3, [r7, #27]
 8007038:	e0af      	b.n	800719a <UART_SetConfig+0x282>
 800703a:	2302      	movs	r3, #2
 800703c:	76fb      	strb	r3, [r7, #27]
 800703e:	e0ac      	b.n	800719a <UART_SetConfig+0x282>
 8007040:	2304      	movs	r3, #4
 8007042:	76fb      	strb	r3, [r7, #27]
 8007044:	e0a9      	b.n	800719a <UART_SetConfig+0x282>
 8007046:	2308      	movs	r3, #8
 8007048:	76fb      	strb	r3, [r7, #27]
 800704a:	e0a6      	b.n	800719a <UART_SetConfig+0x282>
 800704c:	2310      	movs	r3, #16
 800704e:	76fb      	strb	r3, [r7, #27]
 8007050:	e0a3      	b.n	800719a <UART_SetConfig+0x282>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a6d      	ldr	r2, [pc, #436]	; (800720c <UART_SetConfig+0x2f4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d120      	bne.n	800709e <UART_SetConfig+0x186>
 800705c:	4b69      	ldr	r3, [pc, #420]	; (8007204 <UART_SetConfig+0x2ec>)
 800705e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007062:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007066:	2b30      	cmp	r3, #48	; 0x30
 8007068:	d013      	beq.n	8007092 <UART_SetConfig+0x17a>
 800706a:	2b30      	cmp	r3, #48	; 0x30
 800706c:	d814      	bhi.n	8007098 <UART_SetConfig+0x180>
 800706e:	2b20      	cmp	r3, #32
 8007070:	d009      	beq.n	8007086 <UART_SetConfig+0x16e>
 8007072:	2b20      	cmp	r3, #32
 8007074:	d810      	bhi.n	8007098 <UART_SetConfig+0x180>
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <UART_SetConfig+0x168>
 800707a:	2b10      	cmp	r3, #16
 800707c:	d006      	beq.n	800708c <UART_SetConfig+0x174>
 800707e:	e00b      	b.n	8007098 <UART_SetConfig+0x180>
 8007080:	2300      	movs	r3, #0
 8007082:	76fb      	strb	r3, [r7, #27]
 8007084:	e089      	b.n	800719a <UART_SetConfig+0x282>
 8007086:	2302      	movs	r3, #2
 8007088:	76fb      	strb	r3, [r7, #27]
 800708a:	e086      	b.n	800719a <UART_SetConfig+0x282>
 800708c:	2304      	movs	r3, #4
 800708e:	76fb      	strb	r3, [r7, #27]
 8007090:	e083      	b.n	800719a <UART_SetConfig+0x282>
 8007092:	2308      	movs	r3, #8
 8007094:	76fb      	strb	r3, [r7, #27]
 8007096:	e080      	b.n	800719a <UART_SetConfig+0x282>
 8007098:	2310      	movs	r3, #16
 800709a:	76fb      	strb	r3, [r7, #27]
 800709c:	e07d      	b.n	800719a <UART_SetConfig+0x282>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a5b      	ldr	r2, [pc, #364]	; (8007210 <UART_SetConfig+0x2f8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d120      	bne.n	80070ea <UART_SetConfig+0x1d2>
 80070a8:	4b56      	ldr	r3, [pc, #344]	; (8007204 <UART_SetConfig+0x2ec>)
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070b2:	2bc0      	cmp	r3, #192	; 0xc0
 80070b4:	d013      	beq.n	80070de <UART_SetConfig+0x1c6>
 80070b6:	2bc0      	cmp	r3, #192	; 0xc0
 80070b8:	d814      	bhi.n	80070e4 <UART_SetConfig+0x1cc>
 80070ba:	2b80      	cmp	r3, #128	; 0x80
 80070bc:	d009      	beq.n	80070d2 <UART_SetConfig+0x1ba>
 80070be:	2b80      	cmp	r3, #128	; 0x80
 80070c0:	d810      	bhi.n	80070e4 <UART_SetConfig+0x1cc>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <UART_SetConfig+0x1b4>
 80070c6:	2b40      	cmp	r3, #64	; 0x40
 80070c8:	d006      	beq.n	80070d8 <UART_SetConfig+0x1c0>
 80070ca:	e00b      	b.n	80070e4 <UART_SetConfig+0x1cc>
 80070cc:	2300      	movs	r3, #0
 80070ce:	76fb      	strb	r3, [r7, #27]
 80070d0:	e063      	b.n	800719a <UART_SetConfig+0x282>
 80070d2:	2302      	movs	r3, #2
 80070d4:	76fb      	strb	r3, [r7, #27]
 80070d6:	e060      	b.n	800719a <UART_SetConfig+0x282>
 80070d8:	2304      	movs	r3, #4
 80070da:	76fb      	strb	r3, [r7, #27]
 80070dc:	e05d      	b.n	800719a <UART_SetConfig+0x282>
 80070de:	2308      	movs	r3, #8
 80070e0:	76fb      	strb	r3, [r7, #27]
 80070e2:	e05a      	b.n	800719a <UART_SetConfig+0x282>
 80070e4:	2310      	movs	r3, #16
 80070e6:	76fb      	strb	r3, [r7, #27]
 80070e8:	e057      	b.n	800719a <UART_SetConfig+0x282>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a49      	ldr	r2, [pc, #292]	; (8007214 <UART_SetConfig+0x2fc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d125      	bne.n	8007140 <UART_SetConfig+0x228>
 80070f4:	4b43      	ldr	r3, [pc, #268]	; (8007204 <UART_SetConfig+0x2ec>)
 80070f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007102:	d017      	beq.n	8007134 <UART_SetConfig+0x21c>
 8007104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007108:	d817      	bhi.n	800713a <UART_SetConfig+0x222>
 800710a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800710e:	d00b      	beq.n	8007128 <UART_SetConfig+0x210>
 8007110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007114:	d811      	bhi.n	800713a <UART_SetConfig+0x222>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <UART_SetConfig+0x20a>
 800711a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800711e:	d006      	beq.n	800712e <UART_SetConfig+0x216>
 8007120:	e00b      	b.n	800713a <UART_SetConfig+0x222>
 8007122:	2300      	movs	r3, #0
 8007124:	76fb      	strb	r3, [r7, #27]
 8007126:	e038      	b.n	800719a <UART_SetConfig+0x282>
 8007128:	2302      	movs	r3, #2
 800712a:	76fb      	strb	r3, [r7, #27]
 800712c:	e035      	b.n	800719a <UART_SetConfig+0x282>
 800712e:	2304      	movs	r3, #4
 8007130:	76fb      	strb	r3, [r7, #27]
 8007132:	e032      	b.n	800719a <UART_SetConfig+0x282>
 8007134:	2308      	movs	r3, #8
 8007136:	76fb      	strb	r3, [r7, #27]
 8007138:	e02f      	b.n	800719a <UART_SetConfig+0x282>
 800713a:	2310      	movs	r3, #16
 800713c:	76fb      	strb	r3, [r7, #27]
 800713e:	e02c      	b.n	800719a <UART_SetConfig+0x282>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2d      	ldr	r2, [pc, #180]	; (80071fc <UART_SetConfig+0x2e4>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d125      	bne.n	8007196 <UART_SetConfig+0x27e>
 800714a:	4b2e      	ldr	r3, [pc, #184]	; (8007204 <UART_SetConfig+0x2ec>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007150:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007154:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007158:	d017      	beq.n	800718a <UART_SetConfig+0x272>
 800715a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800715e:	d817      	bhi.n	8007190 <UART_SetConfig+0x278>
 8007160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007164:	d00b      	beq.n	800717e <UART_SetConfig+0x266>
 8007166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800716a:	d811      	bhi.n	8007190 <UART_SetConfig+0x278>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <UART_SetConfig+0x260>
 8007170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007174:	d006      	beq.n	8007184 <UART_SetConfig+0x26c>
 8007176:	e00b      	b.n	8007190 <UART_SetConfig+0x278>
 8007178:	2300      	movs	r3, #0
 800717a:	76fb      	strb	r3, [r7, #27]
 800717c:	e00d      	b.n	800719a <UART_SetConfig+0x282>
 800717e:	2302      	movs	r3, #2
 8007180:	76fb      	strb	r3, [r7, #27]
 8007182:	e00a      	b.n	800719a <UART_SetConfig+0x282>
 8007184:	2304      	movs	r3, #4
 8007186:	76fb      	strb	r3, [r7, #27]
 8007188:	e007      	b.n	800719a <UART_SetConfig+0x282>
 800718a:	2308      	movs	r3, #8
 800718c:	76fb      	strb	r3, [r7, #27]
 800718e:	e004      	b.n	800719a <UART_SetConfig+0x282>
 8007190:	2310      	movs	r3, #16
 8007192:	76fb      	strb	r3, [r7, #27]
 8007194:	e001      	b.n	800719a <UART_SetConfig+0x282>
 8007196:	2310      	movs	r3, #16
 8007198:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a17      	ldr	r2, [pc, #92]	; (80071fc <UART_SetConfig+0x2e4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	f040 8087 	bne.w	80072b4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071a6:	7efb      	ldrb	r3, [r7, #27]
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d837      	bhi.n	800721c <UART_SetConfig+0x304>
 80071ac:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <UART_SetConfig+0x29c>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071d9 	.word	0x080071d9
 80071b8:	0800721d 	.word	0x0800721d
 80071bc:	080071e1 	.word	0x080071e1
 80071c0:	0800721d 	.word	0x0800721d
 80071c4:	080071e7 	.word	0x080071e7
 80071c8:	0800721d 	.word	0x0800721d
 80071cc:	0800721d 	.word	0x0800721d
 80071d0:	0800721d 	.word	0x0800721d
 80071d4:	080071ef 	.word	0x080071ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d8:	f7fd fcb6 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 80071dc:	6178      	str	r0, [r7, #20]
        break;
 80071de:	e022      	b.n	8007226 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071e0:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <UART_SetConfig+0x300>)
 80071e2:	617b      	str	r3, [r7, #20]
        break;
 80071e4:	e01f      	b.n	8007226 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071e6:	f7fd fc17 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80071ea:	6178      	str	r0, [r7, #20]
        break;
 80071ec:	e01b      	b.n	8007226 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f2:	617b      	str	r3, [r7, #20]
        break;
 80071f4:	e017      	b.n	8007226 <UART_SetConfig+0x30e>
 80071f6:	bf00      	nop
 80071f8:	efff69f3 	.word	0xefff69f3
 80071fc:	40008000 	.word	0x40008000
 8007200:	40013800 	.word	0x40013800
 8007204:	40021000 	.word	0x40021000
 8007208:	40004400 	.word	0x40004400
 800720c:	40004800 	.word	0x40004800
 8007210:	40004c00 	.word	0x40004c00
 8007214:	40005000 	.word	0x40005000
 8007218:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	76bb      	strb	r3, [r7, #26]
        break;
 8007224:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80f1 	beq.w	8007410 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	4613      	mov	r3, r2
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	4413      	add	r3, r2
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	429a      	cmp	r2, r3
 800723c:	d305      	bcc.n	800724a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	429a      	cmp	r2, r3
 8007248:	d902      	bls.n	8007250 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	76bb      	strb	r3, [r7, #26]
 800724e:	e0df      	b.n	8007410 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	4618      	mov	r0, r3
 8007254:	f04f 0100 	mov.w	r1, #0
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	f04f 0300 	mov.w	r3, #0
 8007260:	020b      	lsls	r3, r1, #8
 8007262:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007266:	0202      	lsls	r2, r0, #8
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	6849      	ldr	r1, [r1, #4]
 800726c:	0849      	lsrs	r1, r1, #1
 800726e:	4608      	mov	r0, r1
 8007270:	f04f 0100 	mov.w	r1, #0
 8007274:	1814      	adds	r4, r2, r0
 8007276:	eb43 0501 	adc.w	r5, r3, r1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	461a      	mov	r2, r3
 8007280:	f04f 0300 	mov.w	r3, #0
 8007284:	4620      	mov	r0, r4
 8007286:	4629      	mov	r1, r5
 8007288:	f7f9 fcde 	bl	8000c48 <__aeabi_uldivmod>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4613      	mov	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800729a:	d308      	bcc.n	80072ae <UART_SetConfig+0x396>
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a2:	d204      	bcs.n	80072ae <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	60da      	str	r2, [r3, #12]
 80072ac:	e0b0      	b.n	8007410 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	76bb      	strb	r3, [r7, #26]
 80072b2:	e0ad      	b.n	8007410 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072bc:	d15b      	bne.n	8007376 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80072be:	7efb      	ldrb	r3, [r7, #27]
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d828      	bhi.n	8007316 <UART_SetConfig+0x3fe>
 80072c4:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <UART_SetConfig+0x3b4>)
 80072c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	080072f1 	.word	0x080072f1
 80072d0:	080072f9 	.word	0x080072f9
 80072d4:	08007301 	.word	0x08007301
 80072d8:	08007317 	.word	0x08007317
 80072dc:	08007307 	.word	0x08007307
 80072e0:	08007317 	.word	0x08007317
 80072e4:	08007317 	.word	0x08007317
 80072e8:	08007317 	.word	0x08007317
 80072ec:	0800730f 	.word	0x0800730f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072f0:	f7fd fc2a 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 80072f4:	6178      	str	r0, [r7, #20]
        break;
 80072f6:	e013      	b.n	8007320 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072f8:	f7fd fc3c 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 80072fc:	6178      	str	r0, [r7, #20]
        break;
 80072fe:	e00f      	b.n	8007320 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007300:	4b49      	ldr	r3, [pc, #292]	; (8007428 <UART_SetConfig+0x510>)
 8007302:	617b      	str	r3, [r7, #20]
        break;
 8007304:	e00c      	b.n	8007320 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007306:	f7fd fb87 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800730a:	6178      	str	r0, [r7, #20]
        break;
 800730c:	e008      	b.n	8007320 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007312:	617b      	str	r3, [r7, #20]
        break;
 8007314:	e004      	b.n	8007320 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	76bb      	strb	r3, [r7, #26]
        break;
 800731e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d074      	beq.n	8007410 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	005a      	lsls	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	085b      	lsrs	r3, r3, #1
 8007330:	441a      	add	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	fbb2 f3f3 	udiv	r3, r2, r3
 800733a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b0f      	cmp	r3, #15
 8007340:	d916      	bls.n	8007370 <UART_SetConfig+0x458>
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007348:	d212      	bcs.n	8007370 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	b29b      	uxth	r3, r3
 800734e:	f023 030f 	bic.w	r3, r3, #15
 8007352:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	b29b      	uxth	r3, r3
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	b29a      	uxth	r2, r3
 8007360:	89fb      	ldrh	r3, [r7, #14]
 8007362:	4313      	orrs	r3, r2
 8007364:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	89fa      	ldrh	r2, [r7, #14]
 800736c:	60da      	str	r2, [r3, #12]
 800736e:	e04f      	b.n	8007410 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	76bb      	strb	r3, [r7, #26]
 8007374:	e04c      	b.n	8007410 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007376:	7efb      	ldrb	r3, [r7, #27]
 8007378:	2b08      	cmp	r3, #8
 800737a:	d828      	bhi.n	80073ce <UART_SetConfig+0x4b6>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <UART_SetConfig+0x46c>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073b1 	.word	0x080073b1
 800738c:	080073b9 	.word	0x080073b9
 8007390:	080073cf 	.word	0x080073cf
 8007394:	080073bf 	.word	0x080073bf
 8007398:	080073cf 	.word	0x080073cf
 800739c:	080073cf 	.word	0x080073cf
 80073a0:	080073cf 	.word	0x080073cf
 80073a4:	080073c7 	.word	0x080073c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073a8:	f7fd fbce 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 80073ac:	6178      	str	r0, [r7, #20]
        break;
 80073ae:	e013      	b.n	80073d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b0:	f7fd fbe0 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 80073b4:	6178      	str	r0, [r7, #20]
        break;
 80073b6:	e00f      	b.n	80073d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b8:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <UART_SetConfig+0x510>)
 80073ba:	617b      	str	r3, [r7, #20]
        break;
 80073bc:	e00c      	b.n	80073d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073be:	f7fd fb2b 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80073c2:	6178      	str	r0, [r7, #20]
        break;
 80073c4:	e008      	b.n	80073d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ca:	617b      	str	r3, [r7, #20]
        break;
 80073cc:	e004      	b.n	80073d8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	76bb      	strb	r3, [r7, #26]
        break;
 80073d6:	bf00      	nop
    }

    if (pclk != 0U)
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d018      	beq.n	8007410 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	085a      	lsrs	r2, r3, #1
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	441a      	add	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b0f      	cmp	r3, #15
 80073f6:	d909      	bls.n	800740c <UART_SetConfig+0x4f4>
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073fe:	d205      	bcs.n	800740c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60da      	str	r2, [r3, #12]
 800740a:	e001      	b.n	8007410 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800741c:	7ebb      	ldrb	r3, [r7, #26]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3720      	adds	r7, #32
 8007422:	46bd      	mov	sp, r7
 8007424:	bdb0      	pop	{r4, r5, r7, pc}
 8007426:	bf00      	nop
 8007428:	00f42400 	.word	0x00f42400

0800742c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01a      	beq.n	8007542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800752a:	d10a      	bne.n	8007542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	605a      	str	r2, [r3, #4]
  }
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af02      	add	r7, sp, #8
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007580:	f7fb faf4 	bl	8002b6c <HAL_GetTick>
 8007584:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0308 	and.w	r3, r3, #8
 8007590:	2b08      	cmp	r3, #8
 8007592:	d10e      	bne.n	80075b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f82d 	bl	8007602 <UART_WaitOnFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e023      	b.n	80075fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d10e      	bne.n	80075de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f817 	bl	8007602 <UART_WaitOnFlagUntilTimeout>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e00d      	b.n	80075fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2220      	movs	r2, #32
 80075e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b09c      	sub	sp, #112	; 0x70
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	603b      	str	r3, [r7, #0]
 800760e:	4613      	mov	r3, r2
 8007610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007612:	e0a5      	b.n	8007760 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761a:	f000 80a1 	beq.w	8007760 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800761e:	f7fb faa5 	bl	8002b6c <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800762a:	429a      	cmp	r2, r3
 800762c:	d302      	bcc.n	8007634 <UART_WaitOnFlagUntilTimeout+0x32>
 800762e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007630:	2b00      	cmp	r3, #0
 8007632:	d13e      	bne.n	80076b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007648:	667b      	str	r3, [r7, #100]	; 0x64
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007654:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007658:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e6      	bne.n	8007634 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	663b      	str	r3, [r7, #96]	; 0x60
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3308      	adds	r3, #8
 8007684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007686:	64ba      	str	r2, [r7, #72]	; 0x48
 8007688:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800768c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e5      	bne.n	8007666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2220      	movs	r2, #32
 800769e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e067      	b.n	8007782 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d04f      	beq.n	8007760 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ce:	d147      	bne.n	8007760 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
 80076f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f8:	637b      	str	r3, [r7, #52]	; 0x34
 80076fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e6      	bne.n	80076da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	613b      	str	r3, [r7, #16]
   return(result);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f023 0301 	bic.w	r3, r3, #1
 8007722:	66bb      	str	r3, [r7, #104]	; 0x68
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800772c:	623a      	str	r2, [r7, #32]
 800772e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	69f9      	ldr	r1, [r7, #28]
 8007732:	6a3a      	ldr	r2, [r7, #32]
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	61bb      	str	r3, [r7, #24]
   return(result);
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e5      	bne.n	800770c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2220      	movs	r2, #32
 800774a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2220      	movs	r2, #32
 8007750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e010      	b.n	8007782 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69da      	ldr	r2, [r3, #28]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4013      	ands	r3, r2
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	429a      	cmp	r2, r3
 800776e:	bf0c      	ite	eq
 8007770:	2301      	moveq	r3, #1
 8007772:	2300      	movne	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	461a      	mov	r2, r3
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	429a      	cmp	r2, r3
 800777c:	f43f af4a 	beq.w	8007614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3770      	adds	r7, #112	; 0x70
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800778c:	b480      	push	{r7}
 800778e:	b097      	sub	sp, #92	; 0x5c
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	4613      	mov	r3, r2
 8007798:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	88fa      	ldrh	r2, [r7, #6]
 80077a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077be:	d10e      	bne.n	80077de <UART_Start_Receive_IT+0x52>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d105      	bne.n	80077d4 <UART_Start_Receive_IT+0x48>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077d2:	e02d      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	22ff      	movs	r2, #255	; 0xff
 80077d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077dc:	e028      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10d      	bne.n	8007802 <UART_Start_Receive_IT+0x76>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <UART_Start_Receive_IT+0x6c>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	22ff      	movs	r2, #255	; 0xff
 80077f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077f6:	e01b      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	227f      	movs	r2, #127	; 0x7f
 80077fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007800:	e016      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800780a:	d10d      	bne.n	8007828 <UART_Start_Receive_IT+0x9c>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <UART_Start_Receive_IT+0x92>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	227f      	movs	r2, #127	; 0x7f
 8007818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800781c:	e008      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	223f      	movs	r2, #63	; 0x3f
 8007822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007826:	e003      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2222      	movs	r2, #34	; 0x22
 800783c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	657b      	str	r3, [r7, #84]	; 0x54
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3308      	adds	r3, #8
 800785c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800785e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007860:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800786c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e5      	bne.n	800783e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787a:	d107      	bne.n	800788c <UART_Start_Receive_IT+0x100>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4a24      	ldr	r2, [pc, #144]	; (8007918 <UART_Start_Receive_IT+0x18c>)
 8007888:	665a      	str	r2, [r3, #100]	; 0x64
 800788a:	e002      	b.n	8007892 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4a23      	ldr	r2, [pc, #140]	; (800791c <UART_Start_Receive_IT+0x190>)
 8007890:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d019      	beq.n	80078d6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80078b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
 80078c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e6      	bne.n	80078a2 <UART_Start_Receive_IT+0x116>
 80078d4:	e018      	b.n	8007908 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	613b      	str	r3, [r7, #16]
   return(result);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f043 0320 	orr.w	r3, r3, #32
 80078ea:	653b      	str	r3, [r7, #80]	; 0x50
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	461a      	mov	r2, r3
 80078f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f4:	623b      	str	r3, [r7, #32]
 80078f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	69f9      	ldr	r1, [r7, #28]
 80078fa:	6a3a      	ldr	r2, [r7, #32]
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	61bb      	str	r3, [r7, #24]
   return(result);
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e6      	bne.n	80078d6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	375c      	adds	r7, #92	; 0x5c
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	08007bc7 	.word	0x08007bc7
 800791c:	08007a67 	.word	0x08007a67

08007920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007920:	b480      	push	{r7}
 8007922:	b095      	sub	sp, #84	; 0x54
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800793c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007946:	643b      	str	r3, [r7, #64]	; 0x40
 8007948:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800794c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e6      	bne.n	8007928 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3308      	adds	r3, #8
 8007960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	61fb      	str	r3, [r7, #28]
   return(result);
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	64bb      	str	r3, [r7, #72]	; 0x48
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3308      	adds	r3, #8
 8007978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800797a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800797c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e5      	bne.n	800795a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007992:	2b01      	cmp	r3, #1
 8007994:	d118      	bne.n	80079c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f023 0310 	bic.w	r3, r3, #16
 80079aa:	647b      	str	r3, [r7, #68]	; 0x44
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	6979      	ldr	r1, [r7, #20]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	613b      	str	r3, [r7, #16]
   return(result);
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e6      	bne.n	8007996 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2220      	movs	r2, #32
 80079cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80079da:	bf00      	nop
 80079dc:	3754      	adds	r7, #84	; 0x54
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f7ff fa71 	bl	8006eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b088      	sub	sp, #32
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	e853 3f00 	ldrex	r3, [r3]
 8007a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	461a      	mov	r2, r3
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	61bb      	str	r3, [r7, #24]
 8007a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3c:	6979      	ldr	r1, [r7, #20]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	e841 2300 	strex	r3, r2, [r1]
 8007a44:	613b      	str	r3, [r7, #16]
   return(result);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1e6      	bne.n	8007a1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff fa3d 	bl	8006ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a5e:	bf00      	nop
 8007a60:	3720      	adds	r7, #32
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b096      	sub	sp, #88	; 0x58
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a7c:	2b22      	cmp	r3, #34	; 0x22
 8007a7e:	f040 8094 	bne.w	8007baa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a88:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007a90:	b2d9      	uxtb	r1, r3
 8007a92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9c:	400a      	ands	r2, r1
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d179      	bne.n	8007bbe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ada:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ade:	653b      	str	r3, [r7, #80]	; 0x50
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8007aea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007af0:	e841 2300 	strex	r3, r2, [r1]
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e6      	bne.n	8007aca <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3308      	adds	r3, #8
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	f023 0301 	bic.w	r3, r3, #1
 8007b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3308      	adds	r3, #8
 8007b1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b1c:	633a      	str	r2, [r7, #48]	; 0x30
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e5      	bne.n	8007afc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d12e      	bne.n	8007ba2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0310 	bic.w	r3, r3, #16
 8007b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b68:	61fb      	str	r3, [r7, #28]
 8007b6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	69b9      	ldr	r1, [r7, #24]
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	617b      	str	r3, [r7, #20]
   return(result);
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e6      	bne.n	8007b4a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	f003 0310 	and.w	r3, r3, #16
 8007b86:	2b10      	cmp	r3, #16
 8007b88:	d103      	bne.n	8007b92 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2210      	movs	r2, #16
 8007b90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff f9b0 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ba0:	e00d      	b.n	8007bbe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7fa fcc2 	bl	800252c <HAL_UART_RxCpltCallback>
}
 8007ba8:	e009      	b.n	8007bbe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	8b1b      	ldrh	r3, [r3, #24]
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0208 	orr.w	r2, r2, #8
 8007bba:	b292      	uxth	r2, r2
 8007bbc:	831a      	strh	r2, [r3, #24]
}
 8007bbe:	bf00      	nop
 8007bc0:	3758      	adds	r7, #88	; 0x58
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b096      	sub	sp, #88	; 0x58
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bd4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bdc:	2b22      	cmp	r3, #34	; 0x22
 8007bde:	f040 8094 	bne.w	8007d0a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007be8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007bf2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007bf6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c06:	1c9a      	adds	r2, r3, #2
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d179      	bne.n	8007d1e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c48:	643b      	str	r3, [r7, #64]	; 0x40
 8007c4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e6      	bne.n	8007c2a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3308      	adds	r3, #8
 8007c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	f023 0301 	bic.w	r3, r3, #1
 8007c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e5      	bne.n	8007c5c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2220      	movs	r2, #32
 8007c94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d12e      	bne.n	8007d02 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f023 0310 	bic.w	r3, r3, #16
 8007cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc8:	61bb      	str	r3, [r7, #24]
 8007cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6979      	ldr	r1, [r7, #20]
 8007cce:	69ba      	ldr	r2, [r7, #24]
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e6      	bne.n	8007caa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f003 0310 	and.w	r3, r3, #16
 8007ce6:	2b10      	cmp	r3, #16
 8007ce8:	d103      	bne.n	8007cf2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2210      	movs	r2, #16
 8007cf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff f900 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d00:	e00d      	b.n	8007d1e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7fa fc12 	bl	800252c <HAL_UART_RxCpltCallback>
}
 8007d08:	e009      	b.n	8007d1e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	8b1b      	ldrh	r3, [r3, #24]
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0208 	orr.w	r2, r2, #8
 8007d1a:	b292      	uxth	r2, r2
 8007d1c:	831a      	strh	r2, [r3, #24]
}
 8007d1e:	bf00      	nop
 8007d20:	3758      	adds	r7, #88	; 0x58
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
	...

08007d3c <__errno>:
 8007d3c:	4b01      	ldr	r3, [pc, #4]	; (8007d44 <__errno+0x8>)
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	20000010 	.word	0x20000010

08007d48 <__libc_init_array>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	4d0d      	ldr	r5, [pc, #52]	; (8007d80 <__libc_init_array+0x38>)
 8007d4c:	4c0d      	ldr	r4, [pc, #52]	; (8007d84 <__libc_init_array+0x3c>)
 8007d4e:	1b64      	subs	r4, r4, r5
 8007d50:	10a4      	asrs	r4, r4, #2
 8007d52:	2600      	movs	r6, #0
 8007d54:	42a6      	cmp	r6, r4
 8007d56:	d109      	bne.n	8007d6c <__libc_init_array+0x24>
 8007d58:	4d0b      	ldr	r5, [pc, #44]	; (8007d88 <__libc_init_array+0x40>)
 8007d5a:	4c0c      	ldr	r4, [pc, #48]	; (8007d8c <__libc_init_array+0x44>)
 8007d5c:	f002 feca 	bl	800aaf4 <_init>
 8007d60:	1b64      	subs	r4, r4, r5
 8007d62:	10a4      	asrs	r4, r4, #2
 8007d64:	2600      	movs	r6, #0
 8007d66:	42a6      	cmp	r6, r4
 8007d68:	d105      	bne.n	8007d76 <__libc_init_array+0x2e>
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d70:	4798      	blx	r3
 8007d72:	3601      	adds	r6, #1
 8007d74:	e7ee      	b.n	8007d54 <__libc_init_array+0xc>
 8007d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7a:	4798      	blx	r3
 8007d7c:	3601      	adds	r6, #1
 8007d7e:	e7f2      	b.n	8007d66 <__libc_init_array+0x1e>
 8007d80:	0800b164 	.word	0x0800b164
 8007d84:	0800b164 	.word	0x0800b164
 8007d88:	0800b164 	.word	0x0800b164
 8007d8c:	0800b168 	.word	0x0800b168

08007d90 <memset>:
 8007d90:	4402      	add	r2, r0
 8007d92:	4603      	mov	r3, r0
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d100      	bne.n	8007d9a <memset+0xa>
 8007d98:	4770      	bx	lr
 8007d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d9e:	e7f9      	b.n	8007d94 <memset+0x4>

08007da0 <__cvt>:
 8007da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007da4:	ec55 4b10 	vmov	r4, r5, d0
 8007da8:	2d00      	cmp	r5, #0
 8007daa:	460e      	mov	r6, r1
 8007dac:	4619      	mov	r1, r3
 8007dae:	462b      	mov	r3, r5
 8007db0:	bfbb      	ittet	lt
 8007db2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007db6:	461d      	movlt	r5, r3
 8007db8:	2300      	movge	r3, #0
 8007dba:	232d      	movlt	r3, #45	; 0x2d
 8007dbc:	700b      	strb	r3, [r1, #0]
 8007dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007dc4:	4691      	mov	r9, r2
 8007dc6:	f023 0820 	bic.w	r8, r3, #32
 8007dca:	bfbc      	itt	lt
 8007dcc:	4622      	movlt	r2, r4
 8007dce:	4614      	movlt	r4, r2
 8007dd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dd4:	d005      	beq.n	8007de2 <__cvt+0x42>
 8007dd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007dda:	d100      	bne.n	8007dde <__cvt+0x3e>
 8007ddc:	3601      	adds	r6, #1
 8007dde:	2102      	movs	r1, #2
 8007de0:	e000      	b.n	8007de4 <__cvt+0x44>
 8007de2:	2103      	movs	r1, #3
 8007de4:	ab03      	add	r3, sp, #12
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	ab02      	add	r3, sp, #8
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	ec45 4b10 	vmov	d0, r4, r5
 8007df0:	4653      	mov	r3, sl
 8007df2:	4632      	mov	r2, r6
 8007df4:	f000 fd00 	bl	80087f8 <_dtoa_r>
 8007df8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	d102      	bne.n	8007e06 <__cvt+0x66>
 8007e00:	f019 0f01 	tst.w	r9, #1
 8007e04:	d022      	beq.n	8007e4c <__cvt+0xac>
 8007e06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e0a:	eb07 0906 	add.w	r9, r7, r6
 8007e0e:	d110      	bne.n	8007e32 <__cvt+0x92>
 8007e10:	783b      	ldrb	r3, [r7, #0]
 8007e12:	2b30      	cmp	r3, #48	; 0x30
 8007e14:	d10a      	bne.n	8007e2c <__cvt+0x8c>
 8007e16:	2200      	movs	r2, #0
 8007e18:	2300      	movs	r3, #0
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f7f8 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e22:	b918      	cbnz	r0, 8007e2c <__cvt+0x8c>
 8007e24:	f1c6 0601 	rsb	r6, r6, #1
 8007e28:	f8ca 6000 	str.w	r6, [sl]
 8007e2c:	f8da 3000 	ldr.w	r3, [sl]
 8007e30:	4499      	add	r9, r3
 8007e32:	2200      	movs	r2, #0
 8007e34:	2300      	movs	r3, #0
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f8 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e3e:	b108      	cbz	r0, 8007e44 <__cvt+0xa4>
 8007e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e44:	2230      	movs	r2, #48	; 0x30
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	454b      	cmp	r3, r9
 8007e4a:	d307      	bcc.n	8007e5c <__cvt+0xbc>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e50:	1bdb      	subs	r3, r3, r7
 8007e52:	4638      	mov	r0, r7
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	b004      	add	sp, #16
 8007e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5c:	1c59      	adds	r1, r3, #1
 8007e5e:	9103      	str	r1, [sp, #12]
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e7f0      	b.n	8007e46 <__cvt+0xa6>

08007e64 <__exponent>:
 8007e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e66:	4603      	mov	r3, r0
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	bfb8      	it	lt
 8007e6c:	4249      	neglt	r1, r1
 8007e6e:	f803 2b02 	strb.w	r2, [r3], #2
 8007e72:	bfb4      	ite	lt
 8007e74:	222d      	movlt	r2, #45	; 0x2d
 8007e76:	222b      	movge	r2, #43	; 0x2b
 8007e78:	2909      	cmp	r1, #9
 8007e7a:	7042      	strb	r2, [r0, #1]
 8007e7c:	dd2a      	ble.n	8007ed4 <__exponent+0x70>
 8007e7e:	f10d 0407 	add.w	r4, sp, #7
 8007e82:	46a4      	mov	ip, r4
 8007e84:	270a      	movs	r7, #10
 8007e86:	46a6      	mov	lr, r4
 8007e88:	460a      	mov	r2, r1
 8007e8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e8e:	fb07 1516 	mls	r5, r7, r6, r1
 8007e92:	3530      	adds	r5, #48	; 0x30
 8007e94:	2a63      	cmp	r2, #99	; 0x63
 8007e96:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	dcf1      	bgt.n	8007e86 <__exponent+0x22>
 8007ea2:	3130      	adds	r1, #48	; 0x30
 8007ea4:	f1ae 0502 	sub.w	r5, lr, #2
 8007ea8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007eac:	1c44      	adds	r4, r0, #1
 8007eae:	4629      	mov	r1, r5
 8007eb0:	4561      	cmp	r1, ip
 8007eb2:	d30a      	bcc.n	8007eca <__exponent+0x66>
 8007eb4:	f10d 0209 	add.w	r2, sp, #9
 8007eb8:	eba2 020e 	sub.w	r2, r2, lr
 8007ebc:	4565      	cmp	r5, ip
 8007ebe:	bf88      	it	hi
 8007ec0:	2200      	movhi	r2, #0
 8007ec2:	4413      	add	r3, r2
 8007ec4:	1a18      	subs	r0, r3, r0
 8007ec6:	b003      	add	sp, #12
 8007ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ece:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ed2:	e7ed      	b.n	8007eb0 <__exponent+0x4c>
 8007ed4:	2330      	movs	r3, #48	; 0x30
 8007ed6:	3130      	adds	r1, #48	; 0x30
 8007ed8:	7083      	strb	r3, [r0, #2]
 8007eda:	70c1      	strb	r1, [r0, #3]
 8007edc:	1d03      	adds	r3, r0, #4
 8007ede:	e7f1      	b.n	8007ec4 <__exponent+0x60>

08007ee0 <_printf_float>:
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	ed2d 8b02 	vpush	{d8}
 8007ee8:	b08d      	sub	sp, #52	; 0x34
 8007eea:	460c      	mov	r4, r1
 8007eec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ef0:	4616      	mov	r6, r2
 8007ef2:	461f      	mov	r7, r3
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	f001 fa6b 	bl	80093d0 <_localeconv_r>
 8007efa:	f8d0 a000 	ldr.w	sl, [r0]
 8007efe:	4650      	mov	r0, sl
 8007f00:	f7f8 f966 	bl	80001d0 <strlen>
 8007f04:	2300      	movs	r3, #0
 8007f06:	930a      	str	r3, [sp, #40]	; 0x28
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	9305      	str	r3, [sp, #20]
 8007f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f14:	3307      	adds	r3, #7
 8007f16:	f023 0307 	bic.w	r3, r3, #7
 8007f1a:	f103 0208 	add.w	r2, r3, #8
 8007f1e:	f8c8 2000 	str.w	r2, [r8]
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f32:	9307      	str	r3, [sp, #28]
 8007f34:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f38:	ee08 0a10 	vmov	s16, r0
 8007f3c:	4b9f      	ldr	r3, [pc, #636]	; (80081bc <_printf_float+0x2dc>)
 8007f3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f42:	f04f 32ff 	mov.w	r2, #4294967295
 8007f46:	f7f8 fdf1 	bl	8000b2c <__aeabi_dcmpun>
 8007f4a:	bb88      	cbnz	r0, 8007fb0 <_printf_float+0xd0>
 8007f4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f50:	4b9a      	ldr	r3, [pc, #616]	; (80081bc <_printf_float+0x2dc>)
 8007f52:	f04f 32ff 	mov.w	r2, #4294967295
 8007f56:	f7f8 fdcb 	bl	8000af0 <__aeabi_dcmple>
 8007f5a:	bb48      	cbnz	r0, 8007fb0 <_printf_float+0xd0>
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2300      	movs	r3, #0
 8007f60:	4640      	mov	r0, r8
 8007f62:	4649      	mov	r1, r9
 8007f64:	f7f8 fdba 	bl	8000adc <__aeabi_dcmplt>
 8007f68:	b110      	cbz	r0, 8007f70 <_printf_float+0x90>
 8007f6a:	232d      	movs	r3, #45	; 0x2d
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f70:	4b93      	ldr	r3, [pc, #588]	; (80081c0 <_printf_float+0x2e0>)
 8007f72:	4894      	ldr	r0, [pc, #592]	; (80081c4 <_printf_float+0x2e4>)
 8007f74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f78:	bf94      	ite	ls
 8007f7a:	4698      	movls	r8, r3
 8007f7c:	4680      	movhi	r8, r0
 8007f7e:	2303      	movs	r3, #3
 8007f80:	6123      	str	r3, [r4, #16]
 8007f82:	9b05      	ldr	r3, [sp, #20]
 8007f84:	f023 0204 	bic.w	r2, r3, #4
 8007f88:	6022      	str	r2, [r4, #0]
 8007f8a:	f04f 0900 	mov.w	r9, #0
 8007f8e:	9700      	str	r7, [sp, #0]
 8007f90:	4633      	mov	r3, r6
 8007f92:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f94:	4621      	mov	r1, r4
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 f9d8 	bl	800834c <_printf_common>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	f040 8090 	bne.w	80080c2 <_printf_float+0x1e2>
 8007fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa6:	b00d      	add	sp, #52	; 0x34
 8007fa8:	ecbd 8b02 	vpop	{d8}
 8007fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	f7f8 fdb8 	bl	8000b2c <__aeabi_dcmpun>
 8007fbc:	b140      	cbz	r0, 8007fd0 <_printf_float+0xf0>
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bfbc      	itt	lt
 8007fc4:	232d      	movlt	r3, #45	; 0x2d
 8007fc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fca:	487f      	ldr	r0, [pc, #508]	; (80081c8 <_printf_float+0x2e8>)
 8007fcc:	4b7f      	ldr	r3, [pc, #508]	; (80081cc <_printf_float+0x2ec>)
 8007fce:	e7d1      	b.n	8007f74 <_printf_float+0x94>
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fd6:	9206      	str	r2, [sp, #24]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	d13f      	bne.n	800805c <_printf_float+0x17c>
 8007fdc:	2306      	movs	r3, #6
 8007fde:	6063      	str	r3, [r4, #4]
 8007fe0:	9b05      	ldr	r3, [sp, #20]
 8007fe2:	6861      	ldr	r1, [r4, #4]
 8007fe4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9303      	str	r3, [sp, #12]
 8007fec:	ab0a      	add	r3, sp, #40	; 0x28
 8007fee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007ff2:	ab09      	add	r3, sp, #36	; 0x24
 8007ff4:	ec49 8b10 	vmov	d0, r8, r9
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	6022      	str	r2, [r4, #0]
 8007ffc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008000:	4628      	mov	r0, r5
 8008002:	f7ff fecd 	bl	8007da0 <__cvt>
 8008006:	9b06      	ldr	r3, [sp, #24]
 8008008:	9909      	ldr	r1, [sp, #36]	; 0x24
 800800a:	2b47      	cmp	r3, #71	; 0x47
 800800c:	4680      	mov	r8, r0
 800800e:	d108      	bne.n	8008022 <_printf_float+0x142>
 8008010:	1cc8      	adds	r0, r1, #3
 8008012:	db02      	blt.n	800801a <_printf_float+0x13a>
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	4299      	cmp	r1, r3
 8008018:	dd41      	ble.n	800809e <_printf_float+0x1be>
 800801a:	f1ab 0b02 	sub.w	fp, fp, #2
 800801e:	fa5f fb8b 	uxtb.w	fp, fp
 8008022:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008026:	d820      	bhi.n	800806a <_printf_float+0x18a>
 8008028:	3901      	subs	r1, #1
 800802a:	465a      	mov	r2, fp
 800802c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008030:	9109      	str	r1, [sp, #36]	; 0x24
 8008032:	f7ff ff17 	bl	8007e64 <__exponent>
 8008036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008038:	1813      	adds	r3, r2, r0
 800803a:	2a01      	cmp	r2, #1
 800803c:	4681      	mov	r9, r0
 800803e:	6123      	str	r3, [r4, #16]
 8008040:	dc02      	bgt.n	8008048 <_printf_float+0x168>
 8008042:	6822      	ldr	r2, [r4, #0]
 8008044:	07d2      	lsls	r2, r2, #31
 8008046:	d501      	bpl.n	800804c <_printf_float+0x16c>
 8008048:	3301      	adds	r3, #1
 800804a:	6123      	str	r3, [r4, #16]
 800804c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008050:	2b00      	cmp	r3, #0
 8008052:	d09c      	beq.n	8007f8e <_printf_float+0xae>
 8008054:	232d      	movs	r3, #45	; 0x2d
 8008056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800805a:	e798      	b.n	8007f8e <_printf_float+0xae>
 800805c:	9a06      	ldr	r2, [sp, #24]
 800805e:	2a47      	cmp	r2, #71	; 0x47
 8008060:	d1be      	bne.n	8007fe0 <_printf_float+0x100>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1bc      	bne.n	8007fe0 <_printf_float+0x100>
 8008066:	2301      	movs	r3, #1
 8008068:	e7b9      	b.n	8007fde <_printf_float+0xfe>
 800806a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800806e:	d118      	bne.n	80080a2 <_printf_float+0x1c2>
 8008070:	2900      	cmp	r1, #0
 8008072:	6863      	ldr	r3, [r4, #4]
 8008074:	dd0b      	ble.n	800808e <_printf_float+0x1ae>
 8008076:	6121      	str	r1, [r4, #16]
 8008078:	b913      	cbnz	r3, 8008080 <_printf_float+0x1a0>
 800807a:	6822      	ldr	r2, [r4, #0]
 800807c:	07d0      	lsls	r0, r2, #31
 800807e:	d502      	bpl.n	8008086 <_printf_float+0x1a6>
 8008080:	3301      	adds	r3, #1
 8008082:	440b      	add	r3, r1
 8008084:	6123      	str	r3, [r4, #16]
 8008086:	65a1      	str	r1, [r4, #88]	; 0x58
 8008088:	f04f 0900 	mov.w	r9, #0
 800808c:	e7de      	b.n	800804c <_printf_float+0x16c>
 800808e:	b913      	cbnz	r3, 8008096 <_printf_float+0x1b6>
 8008090:	6822      	ldr	r2, [r4, #0]
 8008092:	07d2      	lsls	r2, r2, #31
 8008094:	d501      	bpl.n	800809a <_printf_float+0x1ba>
 8008096:	3302      	adds	r3, #2
 8008098:	e7f4      	b.n	8008084 <_printf_float+0x1a4>
 800809a:	2301      	movs	r3, #1
 800809c:	e7f2      	b.n	8008084 <_printf_float+0x1a4>
 800809e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80080a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a4:	4299      	cmp	r1, r3
 80080a6:	db05      	blt.n	80080b4 <_printf_float+0x1d4>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	6121      	str	r1, [r4, #16]
 80080ac:	07d8      	lsls	r0, r3, #31
 80080ae:	d5ea      	bpl.n	8008086 <_printf_float+0x1a6>
 80080b0:	1c4b      	adds	r3, r1, #1
 80080b2:	e7e7      	b.n	8008084 <_printf_float+0x1a4>
 80080b4:	2900      	cmp	r1, #0
 80080b6:	bfd4      	ite	le
 80080b8:	f1c1 0202 	rsble	r2, r1, #2
 80080bc:	2201      	movgt	r2, #1
 80080be:	4413      	add	r3, r2
 80080c0:	e7e0      	b.n	8008084 <_printf_float+0x1a4>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	055a      	lsls	r2, r3, #21
 80080c6:	d407      	bmi.n	80080d8 <_printf_float+0x1f8>
 80080c8:	6923      	ldr	r3, [r4, #16]
 80080ca:	4642      	mov	r2, r8
 80080cc:	4631      	mov	r1, r6
 80080ce:	4628      	mov	r0, r5
 80080d0:	47b8      	blx	r7
 80080d2:	3001      	adds	r0, #1
 80080d4:	d12c      	bne.n	8008130 <_printf_float+0x250>
 80080d6:	e764      	b.n	8007fa2 <_printf_float+0xc2>
 80080d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080dc:	f240 80e0 	bls.w	80082a0 <_printf_float+0x3c0>
 80080e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080e4:	2200      	movs	r2, #0
 80080e6:	2300      	movs	r3, #0
 80080e8:	f7f8 fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d034      	beq.n	800815a <_printf_float+0x27a>
 80080f0:	4a37      	ldr	r2, [pc, #220]	; (80081d0 <_printf_float+0x2f0>)
 80080f2:	2301      	movs	r3, #1
 80080f4:	4631      	mov	r1, r6
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	f43f af51 	beq.w	8007fa2 <_printf_float+0xc2>
 8008100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008104:	429a      	cmp	r2, r3
 8008106:	db02      	blt.n	800810e <_printf_float+0x22e>
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	07d8      	lsls	r0, r3, #31
 800810c:	d510      	bpl.n	8008130 <_printf_float+0x250>
 800810e:	ee18 3a10 	vmov	r3, s16
 8008112:	4652      	mov	r2, sl
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f af41 	beq.w	8007fa2 <_printf_float+0xc2>
 8008120:	f04f 0800 	mov.w	r8, #0
 8008124:	f104 091a 	add.w	r9, r4, #26
 8008128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800812a:	3b01      	subs	r3, #1
 800812c:	4543      	cmp	r3, r8
 800812e:	dc09      	bgt.n	8008144 <_printf_float+0x264>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	079b      	lsls	r3, r3, #30
 8008134:	f100 8105 	bmi.w	8008342 <_printf_float+0x462>
 8008138:	68e0      	ldr	r0, [r4, #12]
 800813a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800813c:	4298      	cmp	r0, r3
 800813e:	bfb8      	it	lt
 8008140:	4618      	movlt	r0, r3
 8008142:	e730      	b.n	8007fa6 <_printf_float+0xc6>
 8008144:	2301      	movs	r3, #1
 8008146:	464a      	mov	r2, r9
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f43f af27 	beq.w	8007fa2 <_printf_float+0xc2>
 8008154:	f108 0801 	add.w	r8, r8, #1
 8008158:	e7e6      	b.n	8008128 <_printf_float+0x248>
 800815a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815c:	2b00      	cmp	r3, #0
 800815e:	dc39      	bgt.n	80081d4 <_printf_float+0x2f4>
 8008160:	4a1b      	ldr	r2, [pc, #108]	; (80081d0 <_printf_float+0x2f0>)
 8008162:	2301      	movs	r3, #1
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	47b8      	blx	r7
 800816a:	3001      	adds	r0, #1
 800816c:	f43f af19 	beq.w	8007fa2 <_printf_float+0xc2>
 8008170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008174:	4313      	orrs	r3, r2
 8008176:	d102      	bne.n	800817e <_printf_float+0x29e>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	07d9      	lsls	r1, r3, #31
 800817c:	d5d8      	bpl.n	8008130 <_printf_float+0x250>
 800817e:	ee18 3a10 	vmov	r3, s16
 8008182:	4652      	mov	r2, sl
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f af09 	beq.w	8007fa2 <_printf_float+0xc2>
 8008190:	f04f 0900 	mov.w	r9, #0
 8008194:	f104 0a1a 	add.w	sl, r4, #26
 8008198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819a:	425b      	negs	r3, r3
 800819c:	454b      	cmp	r3, r9
 800819e:	dc01      	bgt.n	80081a4 <_printf_float+0x2c4>
 80081a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a2:	e792      	b.n	80080ca <_printf_float+0x1ea>
 80081a4:	2301      	movs	r3, #1
 80081a6:	4652      	mov	r2, sl
 80081a8:	4631      	mov	r1, r6
 80081aa:	4628      	mov	r0, r5
 80081ac:	47b8      	blx	r7
 80081ae:	3001      	adds	r0, #1
 80081b0:	f43f aef7 	beq.w	8007fa2 <_printf_float+0xc2>
 80081b4:	f109 0901 	add.w	r9, r9, #1
 80081b8:	e7ee      	b.n	8008198 <_printf_float+0x2b8>
 80081ba:	bf00      	nop
 80081bc:	7fefffff 	.word	0x7fefffff
 80081c0:	0800ad7c 	.word	0x0800ad7c
 80081c4:	0800ad80 	.word	0x0800ad80
 80081c8:	0800ad88 	.word	0x0800ad88
 80081cc:	0800ad84 	.word	0x0800ad84
 80081d0:	0800ad8c 	.word	0x0800ad8c
 80081d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081d8:	429a      	cmp	r2, r3
 80081da:	bfa8      	it	ge
 80081dc:	461a      	movge	r2, r3
 80081de:	2a00      	cmp	r2, #0
 80081e0:	4691      	mov	r9, r2
 80081e2:	dc37      	bgt.n	8008254 <_printf_float+0x374>
 80081e4:	f04f 0b00 	mov.w	fp, #0
 80081e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ec:	f104 021a 	add.w	r2, r4, #26
 80081f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081f2:	9305      	str	r3, [sp, #20]
 80081f4:	eba3 0309 	sub.w	r3, r3, r9
 80081f8:	455b      	cmp	r3, fp
 80081fa:	dc33      	bgt.n	8008264 <_printf_float+0x384>
 80081fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008200:	429a      	cmp	r2, r3
 8008202:	db3b      	blt.n	800827c <_printf_float+0x39c>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	07da      	lsls	r2, r3, #31
 8008208:	d438      	bmi.n	800827c <_printf_float+0x39c>
 800820a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800820c:	9b05      	ldr	r3, [sp, #20]
 800820e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	eba2 0901 	sub.w	r9, r2, r1
 8008216:	4599      	cmp	r9, r3
 8008218:	bfa8      	it	ge
 800821a:	4699      	movge	r9, r3
 800821c:	f1b9 0f00 	cmp.w	r9, #0
 8008220:	dc35      	bgt.n	800828e <_printf_float+0x3ae>
 8008222:	f04f 0800 	mov.w	r8, #0
 8008226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800822a:	f104 0a1a 	add.w	sl, r4, #26
 800822e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008232:	1a9b      	subs	r3, r3, r2
 8008234:	eba3 0309 	sub.w	r3, r3, r9
 8008238:	4543      	cmp	r3, r8
 800823a:	f77f af79 	ble.w	8008130 <_printf_float+0x250>
 800823e:	2301      	movs	r3, #1
 8008240:	4652      	mov	r2, sl
 8008242:	4631      	mov	r1, r6
 8008244:	4628      	mov	r0, r5
 8008246:	47b8      	blx	r7
 8008248:	3001      	adds	r0, #1
 800824a:	f43f aeaa 	beq.w	8007fa2 <_printf_float+0xc2>
 800824e:	f108 0801 	add.w	r8, r8, #1
 8008252:	e7ec      	b.n	800822e <_printf_float+0x34e>
 8008254:	4613      	mov	r3, r2
 8008256:	4631      	mov	r1, r6
 8008258:	4642      	mov	r2, r8
 800825a:	4628      	mov	r0, r5
 800825c:	47b8      	blx	r7
 800825e:	3001      	adds	r0, #1
 8008260:	d1c0      	bne.n	80081e4 <_printf_float+0x304>
 8008262:	e69e      	b.n	8007fa2 <_printf_float+0xc2>
 8008264:	2301      	movs	r3, #1
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	9205      	str	r2, [sp, #20]
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	f43f ae97 	beq.w	8007fa2 <_printf_float+0xc2>
 8008274:	9a05      	ldr	r2, [sp, #20]
 8008276:	f10b 0b01 	add.w	fp, fp, #1
 800827a:	e7b9      	b.n	80081f0 <_printf_float+0x310>
 800827c:	ee18 3a10 	vmov	r3, s16
 8008280:	4652      	mov	r2, sl
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	d1be      	bne.n	800820a <_printf_float+0x32a>
 800828c:	e689      	b.n	8007fa2 <_printf_float+0xc2>
 800828e:	9a05      	ldr	r2, [sp, #20]
 8008290:	464b      	mov	r3, r9
 8008292:	4442      	add	r2, r8
 8008294:	4631      	mov	r1, r6
 8008296:	4628      	mov	r0, r5
 8008298:	47b8      	blx	r7
 800829a:	3001      	adds	r0, #1
 800829c:	d1c1      	bne.n	8008222 <_printf_float+0x342>
 800829e:	e680      	b.n	8007fa2 <_printf_float+0xc2>
 80082a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082a2:	2a01      	cmp	r2, #1
 80082a4:	dc01      	bgt.n	80082aa <_printf_float+0x3ca>
 80082a6:	07db      	lsls	r3, r3, #31
 80082a8:	d538      	bpl.n	800831c <_printf_float+0x43c>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4642      	mov	r2, r8
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	f43f ae74 	beq.w	8007fa2 <_printf_float+0xc2>
 80082ba:	ee18 3a10 	vmov	r3, s16
 80082be:	4652      	mov	r2, sl
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b8      	blx	r7
 80082c6:	3001      	adds	r0, #1
 80082c8:	f43f ae6b 	beq.w	8007fa2 <_printf_float+0xc2>
 80082cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082d0:	2200      	movs	r2, #0
 80082d2:	2300      	movs	r3, #0
 80082d4:	f7f8 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80082d8:	b9d8      	cbnz	r0, 8008312 <_printf_float+0x432>
 80082da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082dc:	f108 0201 	add.w	r2, r8, #1
 80082e0:	3b01      	subs	r3, #1
 80082e2:	4631      	mov	r1, r6
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b8      	blx	r7
 80082e8:	3001      	adds	r0, #1
 80082ea:	d10e      	bne.n	800830a <_printf_float+0x42a>
 80082ec:	e659      	b.n	8007fa2 <_printf_float+0xc2>
 80082ee:	2301      	movs	r3, #1
 80082f0:	4652      	mov	r2, sl
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	f43f ae52 	beq.w	8007fa2 <_printf_float+0xc2>
 80082fe:	f108 0801 	add.w	r8, r8, #1
 8008302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008304:	3b01      	subs	r3, #1
 8008306:	4543      	cmp	r3, r8
 8008308:	dcf1      	bgt.n	80082ee <_printf_float+0x40e>
 800830a:	464b      	mov	r3, r9
 800830c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008310:	e6dc      	b.n	80080cc <_printf_float+0x1ec>
 8008312:	f04f 0800 	mov.w	r8, #0
 8008316:	f104 0a1a 	add.w	sl, r4, #26
 800831a:	e7f2      	b.n	8008302 <_printf_float+0x422>
 800831c:	2301      	movs	r3, #1
 800831e:	4642      	mov	r2, r8
 8008320:	e7df      	b.n	80082e2 <_printf_float+0x402>
 8008322:	2301      	movs	r3, #1
 8008324:	464a      	mov	r2, r9
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	47b8      	blx	r7
 800832c:	3001      	adds	r0, #1
 800832e:	f43f ae38 	beq.w	8007fa2 <_printf_float+0xc2>
 8008332:	f108 0801 	add.w	r8, r8, #1
 8008336:	68e3      	ldr	r3, [r4, #12]
 8008338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800833a:	1a5b      	subs	r3, r3, r1
 800833c:	4543      	cmp	r3, r8
 800833e:	dcf0      	bgt.n	8008322 <_printf_float+0x442>
 8008340:	e6fa      	b.n	8008138 <_printf_float+0x258>
 8008342:	f04f 0800 	mov.w	r8, #0
 8008346:	f104 0919 	add.w	r9, r4, #25
 800834a:	e7f4      	b.n	8008336 <_printf_float+0x456>

0800834c <_printf_common>:
 800834c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008350:	4616      	mov	r6, r2
 8008352:	4699      	mov	r9, r3
 8008354:	688a      	ldr	r2, [r1, #8]
 8008356:	690b      	ldr	r3, [r1, #16]
 8008358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800835c:	4293      	cmp	r3, r2
 800835e:	bfb8      	it	lt
 8008360:	4613      	movlt	r3, r2
 8008362:	6033      	str	r3, [r6, #0]
 8008364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008368:	4607      	mov	r7, r0
 800836a:	460c      	mov	r4, r1
 800836c:	b10a      	cbz	r2, 8008372 <_printf_common+0x26>
 800836e:	3301      	adds	r3, #1
 8008370:	6033      	str	r3, [r6, #0]
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	0699      	lsls	r1, r3, #26
 8008376:	bf42      	ittt	mi
 8008378:	6833      	ldrmi	r3, [r6, #0]
 800837a:	3302      	addmi	r3, #2
 800837c:	6033      	strmi	r3, [r6, #0]
 800837e:	6825      	ldr	r5, [r4, #0]
 8008380:	f015 0506 	ands.w	r5, r5, #6
 8008384:	d106      	bne.n	8008394 <_printf_common+0x48>
 8008386:	f104 0a19 	add.w	sl, r4, #25
 800838a:	68e3      	ldr	r3, [r4, #12]
 800838c:	6832      	ldr	r2, [r6, #0]
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	42ab      	cmp	r3, r5
 8008392:	dc26      	bgt.n	80083e2 <_printf_common+0x96>
 8008394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008398:	1e13      	subs	r3, r2, #0
 800839a:	6822      	ldr	r2, [r4, #0]
 800839c:	bf18      	it	ne
 800839e:	2301      	movne	r3, #1
 80083a0:	0692      	lsls	r2, r2, #26
 80083a2:	d42b      	bmi.n	80083fc <_printf_common+0xb0>
 80083a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083a8:	4649      	mov	r1, r9
 80083aa:	4638      	mov	r0, r7
 80083ac:	47c0      	blx	r8
 80083ae:	3001      	adds	r0, #1
 80083b0:	d01e      	beq.n	80083f0 <_printf_common+0xa4>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	68e5      	ldr	r5, [r4, #12]
 80083b6:	6832      	ldr	r2, [r6, #0]
 80083b8:	f003 0306 	and.w	r3, r3, #6
 80083bc:	2b04      	cmp	r3, #4
 80083be:	bf08      	it	eq
 80083c0:	1aad      	subeq	r5, r5, r2
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	6922      	ldr	r2, [r4, #16]
 80083c6:	bf0c      	ite	eq
 80083c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083cc:	2500      	movne	r5, #0
 80083ce:	4293      	cmp	r3, r2
 80083d0:	bfc4      	itt	gt
 80083d2:	1a9b      	subgt	r3, r3, r2
 80083d4:	18ed      	addgt	r5, r5, r3
 80083d6:	2600      	movs	r6, #0
 80083d8:	341a      	adds	r4, #26
 80083da:	42b5      	cmp	r5, r6
 80083dc:	d11a      	bne.n	8008414 <_printf_common+0xc8>
 80083de:	2000      	movs	r0, #0
 80083e0:	e008      	b.n	80083f4 <_printf_common+0xa8>
 80083e2:	2301      	movs	r3, #1
 80083e4:	4652      	mov	r2, sl
 80083e6:	4649      	mov	r1, r9
 80083e8:	4638      	mov	r0, r7
 80083ea:	47c0      	blx	r8
 80083ec:	3001      	adds	r0, #1
 80083ee:	d103      	bne.n	80083f8 <_printf_common+0xac>
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f8:	3501      	adds	r5, #1
 80083fa:	e7c6      	b.n	800838a <_printf_common+0x3e>
 80083fc:	18e1      	adds	r1, r4, r3
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	2030      	movs	r0, #48	; 0x30
 8008402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008406:	4422      	add	r2, r4
 8008408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800840c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008410:	3302      	adds	r3, #2
 8008412:	e7c7      	b.n	80083a4 <_printf_common+0x58>
 8008414:	2301      	movs	r3, #1
 8008416:	4622      	mov	r2, r4
 8008418:	4649      	mov	r1, r9
 800841a:	4638      	mov	r0, r7
 800841c:	47c0      	blx	r8
 800841e:	3001      	adds	r0, #1
 8008420:	d0e6      	beq.n	80083f0 <_printf_common+0xa4>
 8008422:	3601      	adds	r6, #1
 8008424:	e7d9      	b.n	80083da <_printf_common+0x8e>
	...

08008428 <_printf_i>:
 8008428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	460c      	mov	r4, r1
 800842e:	4691      	mov	r9, r2
 8008430:	7e27      	ldrb	r7, [r4, #24]
 8008432:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008434:	2f78      	cmp	r7, #120	; 0x78
 8008436:	4680      	mov	r8, r0
 8008438:	469a      	mov	sl, r3
 800843a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800843e:	d807      	bhi.n	8008450 <_printf_i+0x28>
 8008440:	2f62      	cmp	r7, #98	; 0x62
 8008442:	d80a      	bhi.n	800845a <_printf_i+0x32>
 8008444:	2f00      	cmp	r7, #0
 8008446:	f000 80d8 	beq.w	80085fa <_printf_i+0x1d2>
 800844a:	2f58      	cmp	r7, #88	; 0x58
 800844c:	f000 80a3 	beq.w	8008596 <_printf_i+0x16e>
 8008450:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008458:	e03a      	b.n	80084d0 <_printf_i+0xa8>
 800845a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800845e:	2b15      	cmp	r3, #21
 8008460:	d8f6      	bhi.n	8008450 <_printf_i+0x28>
 8008462:	a001      	add	r0, pc, #4	; (adr r0, 8008468 <_printf_i+0x40>)
 8008464:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008468:	080084c1 	.word	0x080084c1
 800846c:	080084d5 	.word	0x080084d5
 8008470:	08008451 	.word	0x08008451
 8008474:	08008451 	.word	0x08008451
 8008478:	08008451 	.word	0x08008451
 800847c:	08008451 	.word	0x08008451
 8008480:	080084d5 	.word	0x080084d5
 8008484:	08008451 	.word	0x08008451
 8008488:	08008451 	.word	0x08008451
 800848c:	08008451 	.word	0x08008451
 8008490:	08008451 	.word	0x08008451
 8008494:	080085e1 	.word	0x080085e1
 8008498:	08008505 	.word	0x08008505
 800849c:	080085c3 	.word	0x080085c3
 80084a0:	08008451 	.word	0x08008451
 80084a4:	08008451 	.word	0x08008451
 80084a8:	08008603 	.word	0x08008603
 80084ac:	08008451 	.word	0x08008451
 80084b0:	08008505 	.word	0x08008505
 80084b4:	08008451 	.word	0x08008451
 80084b8:	08008451 	.word	0x08008451
 80084bc:	080085cb 	.word	0x080085cb
 80084c0:	680b      	ldr	r3, [r1, #0]
 80084c2:	1d1a      	adds	r2, r3, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	600a      	str	r2, [r1, #0]
 80084c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084d0:	2301      	movs	r3, #1
 80084d2:	e0a3      	b.n	800861c <_printf_i+0x1f4>
 80084d4:	6825      	ldr	r5, [r4, #0]
 80084d6:	6808      	ldr	r0, [r1, #0]
 80084d8:	062e      	lsls	r6, r5, #24
 80084da:	f100 0304 	add.w	r3, r0, #4
 80084de:	d50a      	bpl.n	80084f6 <_printf_i+0xce>
 80084e0:	6805      	ldr	r5, [r0, #0]
 80084e2:	600b      	str	r3, [r1, #0]
 80084e4:	2d00      	cmp	r5, #0
 80084e6:	da03      	bge.n	80084f0 <_printf_i+0xc8>
 80084e8:	232d      	movs	r3, #45	; 0x2d
 80084ea:	426d      	negs	r5, r5
 80084ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084f0:	485e      	ldr	r0, [pc, #376]	; (800866c <_printf_i+0x244>)
 80084f2:	230a      	movs	r3, #10
 80084f4:	e019      	b.n	800852a <_printf_i+0x102>
 80084f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084fa:	6805      	ldr	r5, [r0, #0]
 80084fc:	600b      	str	r3, [r1, #0]
 80084fe:	bf18      	it	ne
 8008500:	b22d      	sxthne	r5, r5
 8008502:	e7ef      	b.n	80084e4 <_printf_i+0xbc>
 8008504:	680b      	ldr	r3, [r1, #0]
 8008506:	6825      	ldr	r5, [r4, #0]
 8008508:	1d18      	adds	r0, r3, #4
 800850a:	6008      	str	r0, [r1, #0]
 800850c:	0628      	lsls	r0, r5, #24
 800850e:	d501      	bpl.n	8008514 <_printf_i+0xec>
 8008510:	681d      	ldr	r5, [r3, #0]
 8008512:	e002      	b.n	800851a <_printf_i+0xf2>
 8008514:	0669      	lsls	r1, r5, #25
 8008516:	d5fb      	bpl.n	8008510 <_printf_i+0xe8>
 8008518:	881d      	ldrh	r5, [r3, #0]
 800851a:	4854      	ldr	r0, [pc, #336]	; (800866c <_printf_i+0x244>)
 800851c:	2f6f      	cmp	r7, #111	; 0x6f
 800851e:	bf0c      	ite	eq
 8008520:	2308      	moveq	r3, #8
 8008522:	230a      	movne	r3, #10
 8008524:	2100      	movs	r1, #0
 8008526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800852a:	6866      	ldr	r6, [r4, #4]
 800852c:	60a6      	str	r6, [r4, #8]
 800852e:	2e00      	cmp	r6, #0
 8008530:	bfa2      	ittt	ge
 8008532:	6821      	ldrge	r1, [r4, #0]
 8008534:	f021 0104 	bicge.w	r1, r1, #4
 8008538:	6021      	strge	r1, [r4, #0]
 800853a:	b90d      	cbnz	r5, 8008540 <_printf_i+0x118>
 800853c:	2e00      	cmp	r6, #0
 800853e:	d04d      	beq.n	80085dc <_printf_i+0x1b4>
 8008540:	4616      	mov	r6, r2
 8008542:	fbb5 f1f3 	udiv	r1, r5, r3
 8008546:	fb03 5711 	mls	r7, r3, r1, r5
 800854a:	5dc7      	ldrb	r7, [r0, r7]
 800854c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008550:	462f      	mov	r7, r5
 8008552:	42bb      	cmp	r3, r7
 8008554:	460d      	mov	r5, r1
 8008556:	d9f4      	bls.n	8008542 <_printf_i+0x11a>
 8008558:	2b08      	cmp	r3, #8
 800855a:	d10b      	bne.n	8008574 <_printf_i+0x14c>
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	07df      	lsls	r7, r3, #31
 8008560:	d508      	bpl.n	8008574 <_printf_i+0x14c>
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	6861      	ldr	r1, [r4, #4]
 8008566:	4299      	cmp	r1, r3
 8008568:	bfde      	ittt	le
 800856a:	2330      	movle	r3, #48	; 0x30
 800856c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008570:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008574:	1b92      	subs	r2, r2, r6
 8008576:	6122      	str	r2, [r4, #16]
 8008578:	f8cd a000 	str.w	sl, [sp]
 800857c:	464b      	mov	r3, r9
 800857e:	aa03      	add	r2, sp, #12
 8008580:	4621      	mov	r1, r4
 8008582:	4640      	mov	r0, r8
 8008584:	f7ff fee2 	bl	800834c <_printf_common>
 8008588:	3001      	adds	r0, #1
 800858a:	d14c      	bne.n	8008626 <_printf_i+0x1fe>
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	b004      	add	sp, #16
 8008592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008596:	4835      	ldr	r0, [pc, #212]	; (800866c <_printf_i+0x244>)
 8008598:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	680e      	ldr	r6, [r1, #0]
 80085a0:	061f      	lsls	r7, r3, #24
 80085a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80085a6:	600e      	str	r6, [r1, #0]
 80085a8:	d514      	bpl.n	80085d4 <_printf_i+0x1ac>
 80085aa:	07d9      	lsls	r1, r3, #31
 80085ac:	bf44      	itt	mi
 80085ae:	f043 0320 	orrmi.w	r3, r3, #32
 80085b2:	6023      	strmi	r3, [r4, #0]
 80085b4:	b91d      	cbnz	r5, 80085be <_printf_i+0x196>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	f023 0320 	bic.w	r3, r3, #32
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	2310      	movs	r3, #16
 80085c0:	e7b0      	b.n	8008524 <_printf_i+0xfc>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	f043 0320 	orr.w	r3, r3, #32
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	2378      	movs	r3, #120	; 0x78
 80085cc:	4828      	ldr	r0, [pc, #160]	; (8008670 <_printf_i+0x248>)
 80085ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085d2:	e7e3      	b.n	800859c <_printf_i+0x174>
 80085d4:	065e      	lsls	r6, r3, #25
 80085d6:	bf48      	it	mi
 80085d8:	b2ad      	uxthmi	r5, r5
 80085da:	e7e6      	b.n	80085aa <_printf_i+0x182>
 80085dc:	4616      	mov	r6, r2
 80085de:	e7bb      	b.n	8008558 <_printf_i+0x130>
 80085e0:	680b      	ldr	r3, [r1, #0]
 80085e2:	6826      	ldr	r6, [r4, #0]
 80085e4:	6960      	ldr	r0, [r4, #20]
 80085e6:	1d1d      	adds	r5, r3, #4
 80085e8:	600d      	str	r5, [r1, #0]
 80085ea:	0635      	lsls	r5, r6, #24
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	d501      	bpl.n	80085f4 <_printf_i+0x1cc>
 80085f0:	6018      	str	r0, [r3, #0]
 80085f2:	e002      	b.n	80085fa <_printf_i+0x1d2>
 80085f4:	0671      	lsls	r1, r6, #25
 80085f6:	d5fb      	bpl.n	80085f0 <_printf_i+0x1c8>
 80085f8:	8018      	strh	r0, [r3, #0]
 80085fa:	2300      	movs	r3, #0
 80085fc:	6123      	str	r3, [r4, #16]
 80085fe:	4616      	mov	r6, r2
 8008600:	e7ba      	b.n	8008578 <_printf_i+0x150>
 8008602:	680b      	ldr	r3, [r1, #0]
 8008604:	1d1a      	adds	r2, r3, #4
 8008606:	600a      	str	r2, [r1, #0]
 8008608:	681e      	ldr	r6, [r3, #0]
 800860a:	6862      	ldr	r2, [r4, #4]
 800860c:	2100      	movs	r1, #0
 800860e:	4630      	mov	r0, r6
 8008610:	f7f7 fde6 	bl	80001e0 <memchr>
 8008614:	b108      	cbz	r0, 800861a <_printf_i+0x1f2>
 8008616:	1b80      	subs	r0, r0, r6
 8008618:	6060      	str	r0, [r4, #4]
 800861a:	6863      	ldr	r3, [r4, #4]
 800861c:	6123      	str	r3, [r4, #16]
 800861e:	2300      	movs	r3, #0
 8008620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008624:	e7a8      	b.n	8008578 <_printf_i+0x150>
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	4632      	mov	r2, r6
 800862a:	4649      	mov	r1, r9
 800862c:	4640      	mov	r0, r8
 800862e:	47d0      	blx	sl
 8008630:	3001      	adds	r0, #1
 8008632:	d0ab      	beq.n	800858c <_printf_i+0x164>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	079b      	lsls	r3, r3, #30
 8008638:	d413      	bmi.n	8008662 <_printf_i+0x23a>
 800863a:	68e0      	ldr	r0, [r4, #12]
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	4298      	cmp	r0, r3
 8008640:	bfb8      	it	lt
 8008642:	4618      	movlt	r0, r3
 8008644:	e7a4      	b.n	8008590 <_printf_i+0x168>
 8008646:	2301      	movs	r3, #1
 8008648:	4632      	mov	r2, r6
 800864a:	4649      	mov	r1, r9
 800864c:	4640      	mov	r0, r8
 800864e:	47d0      	blx	sl
 8008650:	3001      	adds	r0, #1
 8008652:	d09b      	beq.n	800858c <_printf_i+0x164>
 8008654:	3501      	adds	r5, #1
 8008656:	68e3      	ldr	r3, [r4, #12]
 8008658:	9903      	ldr	r1, [sp, #12]
 800865a:	1a5b      	subs	r3, r3, r1
 800865c:	42ab      	cmp	r3, r5
 800865e:	dcf2      	bgt.n	8008646 <_printf_i+0x21e>
 8008660:	e7eb      	b.n	800863a <_printf_i+0x212>
 8008662:	2500      	movs	r5, #0
 8008664:	f104 0619 	add.w	r6, r4, #25
 8008668:	e7f5      	b.n	8008656 <_printf_i+0x22e>
 800866a:	bf00      	nop
 800866c:	0800ad8e 	.word	0x0800ad8e
 8008670:	0800ad9f 	.word	0x0800ad9f

08008674 <sniprintf>:
 8008674:	b40c      	push	{r2, r3}
 8008676:	b530      	push	{r4, r5, lr}
 8008678:	4b17      	ldr	r3, [pc, #92]	; (80086d8 <sniprintf+0x64>)
 800867a:	1e0c      	subs	r4, r1, #0
 800867c:	681d      	ldr	r5, [r3, #0]
 800867e:	b09d      	sub	sp, #116	; 0x74
 8008680:	da08      	bge.n	8008694 <sniprintf+0x20>
 8008682:	238b      	movs	r3, #139	; 0x8b
 8008684:	602b      	str	r3, [r5, #0]
 8008686:	f04f 30ff 	mov.w	r0, #4294967295
 800868a:	b01d      	add	sp, #116	; 0x74
 800868c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008690:	b002      	add	sp, #8
 8008692:	4770      	bx	lr
 8008694:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008698:	f8ad 3014 	strh.w	r3, [sp, #20]
 800869c:	bf14      	ite	ne
 800869e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80086a2:	4623      	moveq	r3, r4
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	9307      	str	r3, [sp, #28]
 80086a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086ac:	9002      	str	r0, [sp, #8]
 80086ae:	9006      	str	r0, [sp, #24]
 80086b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086b6:	ab21      	add	r3, sp, #132	; 0x84
 80086b8:	a902      	add	r1, sp, #8
 80086ba:	4628      	mov	r0, r5
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	f001 fb35 	bl	8009d2c <_svfiprintf_r>
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	bfbc      	itt	lt
 80086c6:	238b      	movlt	r3, #139	; 0x8b
 80086c8:	602b      	strlt	r3, [r5, #0]
 80086ca:	2c00      	cmp	r4, #0
 80086cc:	d0dd      	beq.n	800868a <sniprintf+0x16>
 80086ce:	9b02      	ldr	r3, [sp, #8]
 80086d0:	2200      	movs	r2, #0
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	e7d9      	b.n	800868a <sniprintf+0x16>
 80086d6:	bf00      	nop
 80086d8:	20000010 	.word	0x20000010

080086dc <quorem>:
 80086dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e0:	6903      	ldr	r3, [r0, #16]
 80086e2:	690c      	ldr	r4, [r1, #16]
 80086e4:	42a3      	cmp	r3, r4
 80086e6:	4607      	mov	r7, r0
 80086e8:	f2c0 8081 	blt.w	80087ee <quorem+0x112>
 80086ec:	3c01      	subs	r4, #1
 80086ee:	f101 0814 	add.w	r8, r1, #20
 80086f2:	f100 0514 	add.w	r5, r0, #20
 80086f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008700:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008704:	3301      	adds	r3, #1
 8008706:	429a      	cmp	r2, r3
 8008708:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800870c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008710:	fbb2 f6f3 	udiv	r6, r2, r3
 8008714:	d331      	bcc.n	800877a <quorem+0x9e>
 8008716:	f04f 0e00 	mov.w	lr, #0
 800871a:	4640      	mov	r0, r8
 800871c:	46ac      	mov	ip, r5
 800871e:	46f2      	mov	sl, lr
 8008720:	f850 2b04 	ldr.w	r2, [r0], #4
 8008724:	b293      	uxth	r3, r2
 8008726:	fb06 e303 	mla	r3, r6, r3, lr
 800872a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800872e:	b29b      	uxth	r3, r3
 8008730:	ebaa 0303 	sub.w	r3, sl, r3
 8008734:	0c12      	lsrs	r2, r2, #16
 8008736:	f8dc a000 	ldr.w	sl, [ip]
 800873a:	fb06 e202 	mla	r2, r6, r2, lr
 800873e:	fa13 f38a 	uxtah	r3, r3, sl
 8008742:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008746:	fa1f fa82 	uxth.w	sl, r2
 800874a:	f8dc 2000 	ldr.w	r2, [ip]
 800874e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008752:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008756:	b29b      	uxth	r3, r3
 8008758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800875c:	4581      	cmp	r9, r0
 800875e:	f84c 3b04 	str.w	r3, [ip], #4
 8008762:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008766:	d2db      	bcs.n	8008720 <quorem+0x44>
 8008768:	f855 300b 	ldr.w	r3, [r5, fp]
 800876c:	b92b      	cbnz	r3, 800877a <quorem+0x9e>
 800876e:	9b01      	ldr	r3, [sp, #4]
 8008770:	3b04      	subs	r3, #4
 8008772:	429d      	cmp	r5, r3
 8008774:	461a      	mov	r2, r3
 8008776:	d32e      	bcc.n	80087d6 <quorem+0xfa>
 8008778:	613c      	str	r4, [r7, #16]
 800877a:	4638      	mov	r0, r7
 800877c:	f001 f8c0 	bl	8009900 <__mcmp>
 8008780:	2800      	cmp	r0, #0
 8008782:	db24      	blt.n	80087ce <quorem+0xf2>
 8008784:	3601      	adds	r6, #1
 8008786:	4628      	mov	r0, r5
 8008788:	f04f 0c00 	mov.w	ip, #0
 800878c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008790:	f8d0 e000 	ldr.w	lr, [r0]
 8008794:	b293      	uxth	r3, r2
 8008796:	ebac 0303 	sub.w	r3, ip, r3
 800879a:	0c12      	lsrs	r2, r2, #16
 800879c:	fa13 f38e 	uxtah	r3, r3, lr
 80087a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ae:	45c1      	cmp	r9, r8
 80087b0:	f840 3b04 	str.w	r3, [r0], #4
 80087b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087b8:	d2e8      	bcs.n	800878c <quorem+0xb0>
 80087ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087c2:	b922      	cbnz	r2, 80087ce <quorem+0xf2>
 80087c4:	3b04      	subs	r3, #4
 80087c6:	429d      	cmp	r5, r3
 80087c8:	461a      	mov	r2, r3
 80087ca:	d30a      	bcc.n	80087e2 <quorem+0x106>
 80087cc:	613c      	str	r4, [r7, #16]
 80087ce:	4630      	mov	r0, r6
 80087d0:	b003      	add	sp, #12
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	6812      	ldr	r2, [r2, #0]
 80087d8:	3b04      	subs	r3, #4
 80087da:	2a00      	cmp	r2, #0
 80087dc:	d1cc      	bne.n	8008778 <quorem+0x9c>
 80087de:	3c01      	subs	r4, #1
 80087e0:	e7c7      	b.n	8008772 <quorem+0x96>
 80087e2:	6812      	ldr	r2, [r2, #0]
 80087e4:	3b04      	subs	r3, #4
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	d1f0      	bne.n	80087cc <quorem+0xf0>
 80087ea:	3c01      	subs	r4, #1
 80087ec:	e7eb      	b.n	80087c6 <quorem+0xea>
 80087ee:	2000      	movs	r0, #0
 80087f0:	e7ee      	b.n	80087d0 <quorem+0xf4>
 80087f2:	0000      	movs	r0, r0
 80087f4:	0000      	movs	r0, r0
	...

080087f8 <_dtoa_r>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	ed2d 8b02 	vpush	{d8}
 8008800:	ec57 6b10 	vmov	r6, r7, d0
 8008804:	b095      	sub	sp, #84	; 0x54
 8008806:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008808:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800880c:	9105      	str	r1, [sp, #20]
 800880e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008812:	4604      	mov	r4, r0
 8008814:	9209      	str	r2, [sp, #36]	; 0x24
 8008816:	930f      	str	r3, [sp, #60]	; 0x3c
 8008818:	b975      	cbnz	r5, 8008838 <_dtoa_r+0x40>
 800881a:	2010      	movs	r0, #16
 800881c:	f000 fddc 	bl	80093d8 <malloc>
 8008820:	4602      	mov	r2, r0
 8008822:	6260      	str	r0, [r4, #36]	; 0x24
 8008824:	b920      	cbnz	r0, 8008830 <_dtoa_r+0x38>
 8008826:	4bb2      	ldr	r3, [pc, #712]	; (8008af0 <_dtoa_r+0x2f8>)
 8008828:	21ea      	movs	r1, #234	; 0xea
 800882a:	48b2      	ldr	r0, [pc, #712]	; (8008af4 <_dtoa_r+0x2fc>)
 800882c:	f001 fb8e 	bl	8009f4c <__assert_func>
 8008830:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008834:	6005      	str	r5, [r0, #0]
 8008836:	60c5      	str	r5, [r0, #12]
 8008838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800883a:	6819      	ldr	r1, [r3, #0]
 800883c:	b151      	cbz	r1, 8008854 <_dtoa_r+0x5c>
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	604a      	str	r2, [r1, #4]
 8008842:	2301      	movs	r3, #1
 8008844:	4093      	lsls	r3, r2
 8008846:	608b      	str	r3, [r1, #8]
 8008848:	4620      	mov	r0, r4
 800884a:	f000 fe1b 	bl	8009484 <_Bfree>
 800884e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008850:	2200      	movs	r2, #0
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	1e3b      	subs	r3, r7, #0
 8008856:	bfb9      	ittee	lt
 8008858:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800885c:	9303      	strlt	r3, [sp, #12]
 800885e:	2300      	movge	r3, #0
 8008860:	f8c8 3000 	strge.w	r3, [r8]
 8008864:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008868:	4ba3      	ldr	r3, [pc, #652]	; (8008af8 <_dtoa_r+0x300>)
 800886a:	bfbc      	itt	lt
 800886c:	2201      	movlt	r2, #1
 800886e:	f8c8 2000 	strlt.w	r2, [r8]
 8008872:	ea33 0309 	bics.w	r3, r3, r9
 8008876:	d11b      	bne.n	80088b0 <_dtoa_r+0xb8>
 8008878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800887a:	f242 730f 	movw	r3, #9999	; 0x270f
 800887e:	6013      	str	r3, [r2, #0]
 8008880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008884:	4333      	orrs	r3, r6
 8008886:	f000 857a 	beq.w	800937e <_dtoa_r+0xb86>
 800888a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800888c:	b963      	cbnz	r3, 80088a8 <_dtoa_r+0xb0>
 800888e:	4b9b      	ldr	r3, [pc, #620]	; (8008afc <_dtoa_r+0x304>)
 8008890:	e024      	b.n	80088dc <_dtoa_r+0xe4>
 8008892:	4b9b      	ldr	r3, [pc, #620]	; (8008b00 <_dtoa_r+0x308>)
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	3308      	adds	r3, #8
 8008898:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	9800      	ldr	r0, [sp, #0]
 800889e:	b015      	add	sp, #84	; 0x54
 80088a0:	ecbd 8b02 	vpop	{d8}
 80088a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a8:	4b94      	ldr	r3, [pc, #592]	; (8008afc <_dtoa_r+0x304>)
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	3303      	adds	r3, #3
 80088ae:	e7f3      	b.n	8008898 <_dtoa_r+0xa0>
 80088b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088b4:	2200      	movs	r2, #0
 80088b6:	ec51 0b17 	vmov	r0, r1, d7
 80088ba:	2300      	movs	r3, #0
 80088bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80088c0:	f7f8 f902 	bl	8000ac8 <__aeabi_dcmpeq>
 80088c4:	4680      	mov	r8, r0
 80088c6:	b158      	cbz	r0, 80088e0 <_dtoa_r+0xe8>
 80088c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088ca:	2301      	movs	r3, #1
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 8551 	beq.w	8009378 <_dtoa_r+0xb80>
 80088d6:	488b      	ldr	r0, [pc, #556]	; (8008b04 <_dtoa_r+0x30c>)
 80088d8:	6018      	str	r0, [r3, #0]
 80088da:	1e43      	subs	r3, r0, #1
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	e7dd      	b.n	800889c <_dtoa_r+0xa4>
 80088e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80088e4:	aa12      	add	r2, sp, #72	; 0x48
 80088e6:	a913      	add	r1, sp, #76	; 0x4c
 80088e8:	4620      	mov	r0, r4
 80088ea:	f001 f8ad 	bl	8009a48 <__d2b>
 80088ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80088f2:	4683      	mov	fp, r0
 80088f4:	2d00      	cmp	r5, #0
 80088f6:	d07c      	beq.n	80089f2 <_dtoa_r+0x1fa>
 80088f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80088fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008902:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008906:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800890a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800890e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008912:	4b7d      	ldr	r3, [pc, #500]	; (8008b08 <_dtoa_r+0x310>)
 8008914:	2200      	movs	r2, #0
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f7 fcb5 	bl	8000288 <__aeabi_dsub>
 800891e:	a36e      	add	r3, pc, #440	; (adr r3, 8008ad8 <_dtoa_r+0x2e0>)
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f7f7 fe68 	bl	80005f8 <__aeabi_dmul>
 8008928:	a36d      	add	r3, pc, #436	; (adr r3, 8008ae0 <_dtoa_r+0x2e8>)
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	f7f7 fcad 	bl	800028c <__adddf3>
 8008932:	4606      	mov	r6, r0
 8008934:	4628      	mov	r0, r5
 8008936:	460f      	mov	r7, r1
 8008938:	f7f7 fdf4 	bl	8000524 <__aeabi_i2d>
 800893c:	a36a      	add	r3, pc, #424	; (adr r3, 8008ae8 <_dtoa_r+0x2f0>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f7f7 fe59 	bl	80005f8 <__aeabi_dmul>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	4630      	mov	r0, r6
 800894c:	4639      	mov	r1, r7
 800894e:	f7f7 fc9d 	bl	800028c <__adddf3>
 8008952:	4606      	mov	r6, r0
 8008954:	460f      	mov	r7, r1
 8008956:	f7f8 f8ff 	bl	8000b58 <__aeabi_d2iz>
 800895a:	2200      	movs	r2, #0
 800895c:	4682      	mov	sl, r0
 800895e:	2300      	movs	r3, #0
 8008960:	4630      	mov	r0, r6
 8008962:	4639      	mov	r1, r7
 8008964:	f7f8 f8ba 	bl	8000adc <__aeabi_dcmplt>
 8008968:	b148      	cbz	r0, 800897e <_dtoa_r+0x186>
 800896a:	4650      	mov	r0, sl
 800896c:	f7f7 fdda 	bl	8000524 <__aeabi_i2d>
 8008970:	4632      	mov	r2, r6
 8008972:	463b      	mov	r3, r7
 8008974:	f7f8 f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008978:	b908      	cbnz	r0, 800897e <_dtoa_r+0x186>
 800897a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800897e:	f1ba 0f16 	cmp.w	sl, #22
 8008982:	d854      	bhi.n	8008a2e <_dtoa_r+0x236>
 8008984:	4b61      	ldr	r3, [pc, #388]	; (8008b0c <_dtoa_r+0x314>)
 8008986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008992:	f7f8 f8a3 	bl	8000adc <__aeabi_dcmplt>
 8008996:	2800      	cmp	r0, #0
 8008998:	d04b      	beq.n	8008a32 <_dtoa_r+0x23a>
 800899a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800899e:	2300      	movs	r3, #0
 80089a0:	930e      	str	r3, [sp, #56]	; 0x38
 80089a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089a4:	1b5d      	subs	r5, r3, r5
 80089a6:	1e6b      	subs	r3, r5, #1
 80089a8:	9304      	str	r3, [sp, #16]
 80089aa:	bf43      	ittte	mi
 80089ac:	2300      	movmi	r3, #0
 80089ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80089b2:	9304      	strmi	r3, [sp, #16]
 80089b4:	f04f 0800 	movpl.w	r8, #0
 80089b8:	f1ba 0f00 	cmp.w	sl, #0
 80089bc:	db3b      	blt.n	8008a36 <_dtoa_r+0x23e>
 80089be:	9b04      	ldr	r3, [sp, #16]
 80089c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80089c4:	4453      	add	r3, sl
 80089c6:	9304      	str	r3, [sp, #16]
 80089c8:	2300      	movs	r3, #0
 80089ca:	9306      	str	r3, [sp, #24]
 80089cc:	9b05      	ldr	r3, [sp, #20]
 80089ce:	2b09      	cmp	r3, #9
 80089d0:	d869      	bhi.n	8008aa6 <_dtoa_r+0x2ae>
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	bfc4      	itt	gt
 80089d6:	3b04      	subgt	r3, #4
 80089d8:	9305      	strgt	r3, [sp, #20]
 80089da:	9b05      	ldr	r3, [sp, #20]
 80089dc:	f1a3 0302 	sub.w	r3, r3, #2
 80089e0:	bfcc      	ite	gt
 80089e2:	2500      	movgt	r5, #0
 80089e4:	2501      	movle	r5, #1
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d869      	bhi.n	8008abe <_dtoa_r+0x2c6>
 80089ea:	e8df f003 	tbb	[pc, r3]
 80089ee:	4e2c      	.short	0x4e2c
 80089f0:	5a4c      	.short	0x5a4c
 80089f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80089f6:	441d      	add	r5, r3
 80089f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	bfc1      	itttt	gt
 8008a00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a08:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a10:	bfda      	itte	le
 8008a12:	f1c3 0320 	rsble	r3, r3, #32
 8008a16:	fa06 f003 	lslle.w	r0, r6, r3
 8008a1a:	4318      	orrgt	r0, r3
 8008a1c:	f7f7 fd72 	bl	8000504 <__aeabi_ui2d>
 8008a20:	2301      	movs	r3, #1
 8008a22:	4606      	mov	r6, r0
 8008a24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a28:	3d01      	subs	r5, #1
 8008a2a:	9310      	str	r3, [sp, #64]	; 0x40
 8008a2c:	e771      	b.n	8008912 <_dtoa_r+0x11a>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e7b6      	b.n	80089a0 <_dtoa_r+0x1a8>
 8008a32:	900e      	str	r0, [sp, #56]	; 0x38
 8008a34:	e7b5      	b.n	80089a2 <_dtoa_r+0x1aa>
 8008a36:	f1ca 0300 	rsb	r3, sl, #0
 8008a3a:	9306      	str	r3, [sp, #24]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	eba8 080a 	sub.w	r8, r8, sl
 8008a42:	930d      	str	r3, [sp, #52]	; 0x34
 8008a44:	e7c2      	b.n	80089cc <_dtoa_r+0x1d4>
 8008a46:	2300      	movs	r3, #0
 8008a48:	9308      	str	r3, [sp, #32]
 8008a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dc39      	bgt.n	8008ac4 <_dtoa_r+0x2cc>
 8008a50:	f04f 0901 	mov.w	r9, #1
 8008a54:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a58:	464b      	mov	r3, r9
 8008a5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a60:	2200      	movs	r2, #0
 8008a62:	6042      	str	r2, [r0, #4]
 8008a64:	2204      	movs	r2, #4
 8008a66:	f102 0614 	add.w	r6, r2, #20
 8008a6a:	429e      	cmp	r6, r3
 8008a6c:	6841      	ldr	r1, [r0, #4]
 8008a6e:	d92f      	bls.n	8008ad0 <_dtoa_r+0x2d8>
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fcc7 	bl	8009404 <_Balloc>
 8008a76:	9000      	str	r0, [sp, #0]
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d14b      	bne.n	8008b14 <_dtoa_r+0x31c>
 8008a7c:	4b24      	ldr	r3, [pc, #144]	; (8008b10 <_dtoa_r+0x318>)
 8008a7e:	4602      	mov	r2, r0
 8008a80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a84:	e6d1      	b.n	800882a <_dtoa_r+0x32>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e7de      	b.n	8008a48 <_dtoa_r+0x250>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9308      	str	r3, [sp, #32]
 8008a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a90:	eb0a 0903 	add.w	r9, sl, r3
 8008a94:	f109 0301 	add.w	r3, r9, #1
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	9301      	str	r3, [sp, #4]
 8008a9c:	bfb8      	it	lt
 8008a9e:	2301      	movlt	r3, #1
 8008aa0:	e7dd      	b.n	8008a5e <_dtoa_r+0x266>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e7f2      	b.n	8008a8c <_dtoa_r+0x294>
 8008aa6:	2501      	movs	r5, #1
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	9305      	str	r3, [sp, #20]
 8008aac:	9508      	str	r5, [sp, #32]
 8008aae:	f04f 39ff 	mov.w	r9, #4294967295
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ab8:	2312      	movs	r3, #18
 8008aba:	9209      	str	r2, [sp, #36]	; 0x24
 8008abc:	e7cf      	b.n	8008a5e <_dtoa_r+0x266>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	9308      	str	r3, [sp, #32]
 8008ac2:	e7f4      	b.n	8008aae <_dtoa_r+0x2b6>
 8008ac4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008ac8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008acc:	464b      	mov	r3, r9
 8008ace:	e7c6      	b.n	8008a5e <_dtoa_r+0x266>
 8008ad0:	3101      	adds	r1, #1
 8008ad2:	6041      	str	r1, [r0, #4]
 8008ad4:	0052      	lsls	r2, r2, #1
 8008ad6:	e7c6      	b.n	8008a66 <_dtoa_r+0x26e>
 8008ad8:	636f4361 	.word	0x636f4361
 8008adc:	3fd287a7 	.word	0x3fd287a7
 8008ae0:	8b60c8b3 	.word	0x8b60c8b3
 8008ae4:	3fc68a28 	.word	0x3fc68a28
 8008ae8:	509f79fb 	.word	0x509f79fb
 8008aec:	3fd34413 	.word	0x3fd34413
 8008af0:	0800adbd 	.word	0x0800adbd
 8008af4:	0800add4 	.word	0x0800add4
 8008af8:	7ff00000 	.word	0x7ff00000
 8008afc:	0800adb9 	.word	0x0800adb9
 8008b00:	0800adb0 	.word	0x0800adb0
 8008b04:	0800ad8d 	.word	0x0800ad8d
 8008b08:	3ff80000 	.word	0x3ff80000
 8008b0c:	0800aed0 	.word	0x0800aed0
 8008b10:	0800ae33 	.word	0x0800ae33
 8008b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b16:	9a00      	ldr	r2, [sp, #0]
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	9b01      	ldr	r3, [sp, #4]
 8008b1c:	2b0e      	cmp	r3, #14
 8008b1e:	f200 80ad 	bhi.w	8008c7c <_dtoa_r+0x484>
 8008b22:	2d00      	cmp	r5, #0
 8008b24:	f000 80aa 	beq.w	8008c7c <_dtoa_r+0x484>
 8008b28:	f1ba 0f00 	cmp.w	sl, #0
 8008b2c:	dd36      	ble.n	8008b9c <_dtoa_r+0x3a4>
 8008b2e:	4ac3      	ldr	r2, [pc, #780]	; (8008e3c <_dtoa_r+0x644>)
 8008b30:	f00a 030f 	and.w	r3, sl, #15
 8008b34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b38:	ed93 7b00 	vldr	d7, [r3]
 8008b3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008b40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008b44:	eeb0 8a47 	vmov.f32	s16, s14
 8008b48:	eef0 8a67 	vmov.f32	s17, s15
 8008b4c:	d016      	beq.n	8008b7c <_dtoa_r+0x384>
 8008b4e:	4bbc      	ldr	r3, [pc, #752]	; (8008e40 <_dtoa_r+0x648>)
 8008b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b58:	f7f7 fe78 	bl	800084c <__aeabi_ddiv>
 8008b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b60:	f007 070f 	and.w	r7, r7, #15
 8008b64:	2503      	movs	r5, #3
 8008b66:	4eb6      	ldr	r6, [pc, #728]	; (8008e40 <_dtoa_r+0x648>)
 8008b68:	b957      	cbnz	r7, 8008b80 <_dtoa_r+0x388>
 8008b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b6e:	ec53 2b18 	vmov	r2, r3, d8
 8008b72:	f7f7 fe6b 	bl	800084c <__aeabi_ddiv>
 8008b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b7a:	e029      	b.n	8008bd0 <_dtoa_r+0x3d8>
 8008b7c:	2502      	movs	r5, #2
 8008b7e:	e7f2      	b.n	8008b66 <_dtoa_r+0x36e>
 8008b80:	07f9      	lsls	r1, r7, #31
 8008b82:	d508      	bpl.n	8008b96 <_dtoa_r+0x39e>
 8008b84:	ec51 0b18 	vmov	r0, r1, d8
 8008b88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b8c:	f7f7 fd34 	bl	80005f8 <__aeabi_dmul>
 8008b90:	ec41 0b18 	vmov	d8, r0, r1
 8008b94:	3501      	adds	r5, #1
 8008b96:	107f      	asrs	r7, r7, #1
 8008b98:	3608      	adds	r6, #8
 8008b9a:	e7e5      	b.n	8008b68 <_dtoa_r+0x370>
 8008b9c:	f000 80a6 	beq.w	8008cec <_dtoa_r+0x4f4>
 8008ba0:	f1ca 0600 	rsb	r6, sl, #0
 8008ba4:	4ba5      	ldr	r3, [pc, #660]	; (8008e3c <_dtoa_r+0x644>)
 8008ba6:	4fa6      	ldr	r7, [pc, #664]	; (8008e40 <_dtoa_r+0x648>)
 8008ba8:	f006 020f 	and.w	r2, r6, #15
 8008bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bb8:	f7f7 fd1e 	bl	80005f8 <__aeabi_dmul>
 8008bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc0:	1136      	asrs	r6, r6, #4
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	2502      	movs	r5, #2
 8008bc6:	2e00      	cmp	r6, #0
 8008bc8:	f040 8085 	bne.w	8008cd6 <_dtoa_r+0x4de>
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1d2      	bne.n	8008b76 <_dtoa_r+0x37e>
 8008bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 808c 	beq.w	8008cf0 <_dtoa_r+0x4f8>
 8008bd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008bdc:	4b99      	ldr	r3, [pc, #612]	; (8008e44 <_dtoa_r+0x64c>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	4630      	mov	r0, r6
 8008be2:	4639      	mov	r1, r7
 8008be4:	f7f7 ff7a 	bl	8000adc <__aeabi_dcmplt>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	f000 8081 	beq.w	8008cf0 <_dtoa_r+0x4f8>
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d07d      	beq.n	8008cf0 <_dtoa_r+0x4f8>
 8008bf4:	f1b9 0f00 	cmp.w	r9, #0
 8008bf8:	dd3c      	ble.n	8008c74 <_dtoa_r+0x47c>
 8008bfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008bfe:	9307      	str	r3, [sp, #28]
 8008c00:	2200      	movs	r2, #0
 8008c02:	4b91      	ldr	r3, [pc, #580]	; (8008e48 <_dtoa_r+0x650>)
 8008c04:	4630      	mov	r0, r6
 8008c06:	4639      	mov	r1, r7
 8008c08:	f7f7 fcf6 	bl	80005f8 <__aeabi_dmul>
 8008c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c10:	3501      	adds	r5, #1
 8008c12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008c16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f7f7 fc82 	bl	8000524 <__aeabi_i2d>
 8008c20:	4632      	mov	r2, r6
 8008c22:	463b      	mov	r3, r7
 8008c24:	f7f7 fce8 	bl	80005f8 <__aeabi_dmul>
 8008c28:	4b88      	ldr	r3, [pc, #544]	; (8008e4c <_dtoa_r+0x654>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f7f7 fb2e 	bl	800028c <__adddf3>
 8008c30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c38:	9303      	str	r3, [sp, #12]
 8008c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d15c      	bne.n	8008cfa <_dtoa_r+0x502>
 8008c40:	4b83      	ldr	r3, [pc, #524]	; (8008e50 <_dtoa_r+0x658>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	4630      	mov	r0, r6
 8008c46:	4639      	mov	r1, r7
 8008c48:	f7f7 fb1e 	bl	8000288 <__aeabi_dsub>
 8008c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c50:	4606      	mov	r6, r0
 8008c52:	460f      	mov	r7, r1
 8008c54:	f7f7 ff60 	bl	8000b18 <__aeabi_dcmpgt>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	f040 8296 	bne.w	800918a <_dtoa_r+0x992>
 8008c5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c62:	4630      	mov	r0, r6
 8008c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c68:	4639      	mov	r1, r7
 8008c6a:	f7f7 ff37 	bl	8000adc <__aeabi_dcmplt>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f040 8288 	bne.w	8009184 <_dtoa_r+0x98c>
 8008c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f2c0 8158 	blt.w	8008f34 <_dtoa_r+0x73c>
 8008c84:	f1ba 0f0e 	cmp.w	sl, #14
 8008c88:	f300 8154 	bgt.w	8008f34 <_dtoa_r+0x73c>
 8008c8c:	4b6b      	ldr	r3, [pc, #428]	; (8008e3c <_dtoa_r+0x644>)
 8008c8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f280 80e3 	bge.w	8008e64 <_dtoa_r+0x66c>
 8008c9e:	9b01      	ldr	r3, [sp, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f300 80df 	bgt.w	8008e64 <_dtoa_r+0x66c>
 8008ca6:	f040 826d 	bne.w	8009184 <_dtoa_r+0x98c>
 8008caa:	4b69      	ldr	r3, [pc, #420]	; (8008e50 <_dtoa_r+0x658>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4640      	mov	r0, r8
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	f7f7 fca1 	bl	80005f8 <__aeabi_dmul>
 8008cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cba:	f7f7 ff23 	bl	8000b04 <__aeabi_dcmpge>
 8008cbe:	9e01      	ldr	r6, [sp, #4]
 8008cc0:	4637      	mov	r7, r6
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	f040 8243 	bne.w	800914e <_dtoa_r+0x956>
 8008cc8:	9d00      	ldr	r5, [sp, #0]
 8008cca:	2331      	movs	r3, #49	; 0x31
 8008ccc:	f805 3b01 	strb.w	r3, [r5], #1
 8008cd0:	f10a 0a01 	add.w	sl, sl, #1
 8008cd4:	e23f      	b.n	8009156 <_dtoa_r+0x95e>
 8008cd6:	07f2      	lsls	r2, r6, #31
 8008cd8:	d505      	bpl.n	8008ce6 <_dtoa_r+0x4ee>
 8008cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cde:	f7f7 fc8b 	bl	80005f8 <__aeabi_dmul>
 8008ce2:	3501      	adds	r5, #1
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	1076      	asrs	r6, r6, #1
 8008ce8:	3708      	adds	r7, #8
 8008cea:	e76c      	b.n	8008bc6 <_dtoa_r+0x3ce>
 8008cec:	2502      	movs	r5, #2
 8008cee:	e76f      	b.n	8008bd0 <_dtoa_r+0x3d8>
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf8:	e78d      	b.n	8008c16 <_dtoa_r+0x41e>
 8008cfa:	9900      	ldr	r1, [sp, #0]
 8008cfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d00:	4b4e      	ldr	r3, [pc, #312]	; (8008e3c <_dtoa_r+0x644>)
 8008d02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d06:	4401      	add	r1, r0
 8008d08:	9102      	str	r1, [sp, #8]
 8008d0a:	9908      	ldr	r1, [sp, #32]
 8008d0c:	eeb0 8a47 	vmov.f32	s16, s14
 8008d10:	eef0 8a67 	vmov.f32	s17, s15
 8008d14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d1c:	2900      	cmp	r1, #0
 8008d1e:	d045      	beq.n	8008dac <_dtoa_r+0x5b4>
 8008d20:	494c      	ldr	r1, [pc, #304]	; (8008e54 <_dtoa_r+0x65c>)
 8008d22:	2000      	movs	r0, #0
 8008d24:	f7f7 fd92 	bl	800084c <__aeabi_ddiv>
 8008d28:	ec53 2b18 	vmov	r2, r3, d8
 8008d2c:	f7f7 faac 	bl	8000288 <__aeabi_dsub>
 8008d30:	9d00      	ldr	r5, [sp, #0]
 8008d32:	ec41 0b18 	vmov	d8, r0, r1
 8008d36:	4639      	mov	r1, r7
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7f7 ff0d 	bl	8000b58 <__aeabi_d2iz>
 8008d3e:	900c      	str	r0, [sp, #48]	; 0x30
 8008d40:	f7f7 fbf0 	bl	8000524 <__aeabi_i2d>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f7 fa9c 	bl	8000288 <__aeabi_dsub>
 8008d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d52:	3330      	adds	r3, #48	; 0x30
 8008d54:	f805 3b01 	strb.w	r3, [r5], #1
 8008d58:	ec53 2b18 	vmov	r2, r3, d8
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	460f      	mov	r7, r1
 8008d60:	f7f7 febc 	bl	8000adc <__aeabi_dcmplt>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d165      	bne.n	8008e34 <_dtoa_r+0x63c>
 8008d68:	4632      	mov	r2, r6
 8008d6a:	463b      	mov	r3, r7
 8008d6c:	4935      	ldr	r1, [pc, #212]	; (8008e44 <_dtoa_r+0x64c>)
 8008d6e:	2000      	movs	r0, #0
 8008d70:	f7f7 fa8a 	bl	8000288 <__aeabi_dsub>
 8008d74:	ec53 2b18 	vmov	r2, r3, d8
 8008d78:	f7f7 feb0 	bl	8000adc <__aeabi_dcmplt>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	f040 80b9 	bne.w	8008ef4 <_dtoa_r+0x6fc>
 8008d82:	9b02      	ldr	r3, [sp, #8]
 8008d84:	429d      	cmp	r5, r3
 8008d86:	f43f af75 	beq.w	8008c74 <_dtoa_r+0x47c>
 8008d8a:	4b2f      	ldr	r3, [pc, #188]	; (8008e48 <_dtoa_r+0x650>)
 8008d8c:	ec51 0b18 	vmov	r0, r1, d8
 8008d90:	2200      	movs	r2, #0
 8008d92:	f7f7 fc31 	bl	80005f8 <__aeabi_dmul>
 8008d96:	4b2c      	ldr	r3, [pc, #176]	; (8008e48 <_dtoa_r+0x650>)
 8008d98:	ec41 0b18 	vmov	d8, r0, r1
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4630      	mov	r0, r6
 8008da0:	4639      	mov	r1, r7
 8008da2:	f7f7 fc29 	bl	80005f8 <__aeabi_dmul>
 8008da6:	4606      	mov	r6, r0
 8008da8:	460f      	mov	r7, r1
 8008daa:	e7c4      	b.n	8008d36 <_dtoa_r+0x53e>
 8008dac:	ec51 0b17 	vmov	r0, r1, d7
 8008db0:	f7f7 fc22 	bl	80005f8 <__aeabi_dmul>
 8008db4:	9b02      	ldr	r3, [sp, #8]
 8008db6:	9d00      	ldr	r5, [sp, #0]
 8008db8:	930c      	str	r3, [sp, #48]	; 0x30
 8008dba:	ec41 0b18 	vmov	d8, r0, r1
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f7f7 fec9 	bl	8000b58 <__aeabi_d2iz>
 8008dc6:	9011      	str	r0, [sp, #68]	; 0x44
 8008dc8:	f7f7 fbac 	bl	8000524 <__aeabi_i2d>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	f7f7 fa58 	bl	8000288 <__aeabi_dsub>
 8008dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dda:	3330      	adds	r3, #48	; 0x30
 8008ddc:	f805 3b01 	strb.w	r3, [r5], #1
 8008de0:	9b02      	ldr	r3, [sp, #8]
 8008de2:	429d      	cmp	r5, r3
 8008de4:	4606      	mov	r6, r0
 8008de6:	460f      	mov	r7, r1
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	d134      	bne.n	8008e58 <_dtoa_r+0x660>
 8008dee:	4b19      	ldr	r3, [pc, #100]	; (8008e54 <_dtoa_r+0x65c>)
 8008df0:	ec51 0b18 	vmov	r0, r1, d8
 8008df4:	f7f7 fa4a 	bl	800028c <__adddf3>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	4639      	mov	r1, r7
 8008e00:	f7f7 fe8a 	bl	8000b18 <__aeabi_dcmpgt>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d175      	bne.n	8008ef4 <_dtoa_r+0x6fc>
 8008e08:	ec53 2b18 	vmov	r2, r3, d8
 8008e0c:	4911      	ldr	r1, [pc, #68]	; (8008e54 <_dtoa_r+0x65c>)
 8008e0e:	2000      	movs	r0, #0
 8008e10:	f7f7 fa3a 	bl	8000288 <__aeabi_dsub>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4630      	mov	r0, r6
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	f7f7 fe5e 	bl	8000adc <__aeabi_dcmplt>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	f43f af27 	beq.w	8008c74 <_dtoa_r+0x47c>
 8008e26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e28:	1e6b      	subs	r3, r5, #1
 8008e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8008e2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e30:	2b30      	cmp	r3, #48	; 0x30
 8008e32:	d0f8      	beq.n	8008e26 <_dtoa_r+0x62e>
 8008e34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008e38:	e04a      	b.n	8008ed0 <_dtoa_r+0x6d8>
 8008e3a:	bf00      	nop
 8008e3c:	0800aed0 	.word	0x0800aed0
 8008e40:	0800aea8 	.word	0x0800aea8
 8008e44:	3ff00000 	.word	0x3ff00000
 8008e48:	40240000 	.word	0x40240000
 8008e4c:	401c0000 	.word	0x401c0000
 8008e50:	40140000 	.word	0x40140000
 8008e54:	3fe00000 	.word	0x3fe00000
 8008e58:	4baf      	ldr	r3, [pc, #700]	; (8009118 <_dtoa_r+0x920>)
 8008e5a:	f7f7 fbcd 	bl	80005f8 <__aeabi_dmul>
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	e7ac      	b.n	8008dbe <_dtoa_r+0x5c6>
 8008e64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e68:	9d00      	ldr	r5, [sp, #0]
 8008e6a:	4642      	mov	r2, r8
 8008e6c:	464b      	mov	r3, r9
 8008e6e:	4630      	mov	r0, r6
 8008e70:	4639      	mov	r1, r7
 8008e72:	f7f7 fceb 	bl	800084c <__aeabi_ddiv>
 8008e76:	f7f7 fe6f 	bl	8000b58 <__aeabi_d2iz>
 8008e7a:	9002      	str	r0, [sp, #8]
 8008e7c:	f7f7 fb52 	bl	8000524 <__aeabi_i2d>
 8008e80:	4642      	mov	r2, r8
 8008e82:	464b      	mov	r3, r9
 8008e84:	f7f7 fbb8 	bl	80005f8 <__aeabi_dmul>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	4639      	mov	r1, r7
 8008e90:	f7f7 f9fa 	bl	8000288 <__aeabi_dsub>
 8008e94:	9e02      	ldr	r6, [sp, #8]
 8008e96:	9f01      	ldr	r7, [sp, #4]
 8008e98:	3630      	adds	r6, #48	; 0x30
 8008e9a:	f805 6b01 	strb.w	r6, [r5], #1
 8008e9e:	9e00      	ldr	r6, [sp, #0]
 8008ea0:	1bae      	subs	r6, r5, r6
 8008ea2:	42b7      	cmp	r7, r6
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	d137      	bne.n	8008f1a <_dtoa_r+0x722>
 8008eaa:	f7f7 f9ef 	bl	800028c <__adddf3>
 8008eae:	4642      	mov	r2, r8
 8008eb0:	464b      	mov	r3, r9
 8008eb2:	4606      	mov	r6, r0
 8008eb4:	460f      	mov	r7, r1
 8008eb6:	f7f7 fe2f 	bl	8000b18 <__aeabi_dcmpgt>
 8008eba:	b9c8      	cbnz	r0, 8008ef0 <_dtoa_r+0x6f8>
 8008ebc:	4642      	mov	r2, r8
 8008ebe:	464b      	mov	r3, r9
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	f7f7 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ec8:	b110      	cbz	r0, 8008ed0 <_dtoa_r+0x6d8>
 8008eca:	9b02      	ldr	r3, [sp, #8]
 8008ecc:	07d9      	lsls	r1, r3, #31
 8008ece:	d40f      	bmi.n	8008ef0 <_dtoa_r+0x6f8>
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	4659      	mov	r1, fp
 8008ed4:	f000 fad6 	bl	8009484 <_Bfree>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	702b      	strb	r3, [r5, #0]
 8008edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ede:	f10a 0001 	add.w	r0, sl, #1
 8008ee2:	6018      	str	r0, [r3, #0]
 8008ee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f43f acd8 	beq.w	800889c <_dtoa_r+0xa4>
 8008eec:	601d      	str	r5, [r3, #0]
 8008eee:	e4d5      	b.n	800889c <_dtoa_r+0xa4>
 8008ef0:	f8cd a01c 	str.w	sl, [sp, #28]
 8008ef4:	462b      	mov	r3, r5
 8008ef6:	461d      	mov	r5, r3
 8008ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008efc:	2a39      	cmp	r2, #57	; 0x39
 8008efe:	d108      	bne.n	8008f12 <_dtoa_r+0x71a>
 8008f00:	9a00      	ldr	r2, [sp, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d1f7      	bne.n	8008ef6 <_dtoa_r+0x6fe>
 8008f06:	9a07      	ldr	r2, [sp, #28]
 8008f08:	9900      	ldr	r1, [sp, #0]
 8008f0a:	3201      	adds	r2, #1
 8008f0c:	9207      	str	r2, [sp, #28]
 8008f0e:	2230      	movs	r2, #48	; 0x30
 8008f10:	700a      	strb	r2, [r1, #0]
 8008f12:	781a      	ldrb	r2, [r3, #0]
 8008f14:	3201      	adds	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e78c      	b.n	8008e34 <_dtoa_r+0x63c>
 8008f1a:	4b7f      	ldr	r3, [pc, #508]	; (8009118 <_dtoa_r+0x920>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f7f7 fb6b 	bl	80005f8 <__aeabi_dmul>
 8008f22:	2200      	movs	r2, #0
 8008f24:	2300      	movs	r3, #0
 8008f26:	4606      	mov	r6, r0
 8008f28:	460f      	mov	r7, r1
 8008f2a:	f7f7 fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d09b      	beq.n	8008e6a <_dtoa_r+0x672>
 8008f32:	e7cd      	b.n	8008ed0 <_dtoa_r+0x6d8>
 8008f34:	9a08      	ldr	r2, [sp, #32]
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	f000 80c4 	beq.w	80090c4 <_dtoa_r+0x8cc>
 8008f3c:	9a05      	ldr	r2, [sp, #20]
 8008f3e:	2a01      	cmp	r2, #1
 8008f40:	f300 80a8 	bgt.w	8009094 <_dtoa_r+0x89c>
 8008f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f46:	2a00      	cmp	r2, #0
 8008f48:	f000 80a0 	beq.w	800908c <_dtoa_r+0x894>
 8008f4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f50:	9e06      	ldr	r6, [sp, #24]
 8008f52:	4645      	mov	r5, r8
 8008f54:	9a04      	ldr	r2, [sp, #16]
 8008f56:	2101      	movs	r1, #1
 8008f58:	441a      	add	r2, r3
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	4498      	add	r8, r3
 8008f5e:	9204      	str	r2, [sp, #16]
 8008f60:	f000 fb4c 	bl	80095fc <__i2b>
 8008f64:	4607      	mov	r7, r0
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	dd0b      	ble.n	8008f82 <_dtoa_r+0x78a>
 8008f6a:	9b04      	ldr	r3, [sp, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	dd08      	ble.n	8008f82 <_dtoa_r+0x78a>
 8008f70:	42ab      	cmp	r3, r5
 8008f72:	9a04      	ldr	r2, [sp, #16]
 8008f74:	bfa8      	it	ge
 8008f76:	462b      	movge	r3, r5
 8008f78:	eba8 0803 	sub.w	r8, r8, r3
 8008f7c:	1aed      	subs	r5, r5, r3
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	9304      	str	r3, [sp, #16]
 8008f82:	9b06      	ldr	r3, [sp, #24]
 8008f84:	b1fb      	cbz	r3, 8008fc6 <_dtoa_r+0x7ce>
 8008f86:	9b08      	ldr	r3, [sp, #32]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 809f 	beq.w	80090cc <_dtoa_r+0x8d4>
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	dd11      	ble.n	8008fb6 <_dtoa_r+0x7be>
 8008f92:	4639      	mov	r1, r7
 8008f94:	4632      	mov	r2, r6
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 fbec 	bl	8009774 <__pow5mult>
 8008f9c:	465a      	mov	r2, fp
 8008f9e:	4601      	mov	r1, r0
 8008fa0:	4607      	mov	r7, r0
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fb40 	bl	8009628 <__multiply>
 8008fa8:	4659      	mov	r1, fp
 8008faa:	9007      	str	r0, [sp, #28]
 8008fac:	4620      	mov	r0, r4
 8008fae:	f000 fa69 	bl	8009484 <_Bfree>
 8008fb2:	9b07      	ldr	r3, [sp, #28]
 8008fb4:	469b      	mov	fp, r3
 8008fb6:	9b06      	ldr	r3, [sp, #24]
 8008fb8:	1b9a      	subs	r2, r3, r6
 8008fba:	d004      	beq.n	8008fc6 <_dtoa_r+0x7ce>
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 fbd8 	bl	8009774 <__pow5mult>
 8008fc4:	4683      	mov	fp, r0
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f000 fb17 	bl	80095fc <__i2b>
 8008fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	dd7c      	ble.n	80090d0 <_dtoa_r+0x8d8>
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4601      	mov	r1, r0
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 fbca 	bl	8009774 <__pow5mult>
 8008fe0:	9b05      	ldr	r3, [sp, #20]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	dd76      	ble.n	80090d6 <_dtoa_r+0x8de>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	9306      	str	r3, [sp, #24]
 8008fec:	6933      	ldr	r3, [r6, #16]
 8008fee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ff2:	6918      	ldr	r0, [r3, #16]
 8008ff4:	f000 fab2 	bl	800955c <__hi0bits>
 8008ff8:	f1c0 0020 	rsb	r0, r0, #32
 8008ffc:	9b04      	ldr	r3, [sp, #16]
 8008ffe:	4418      	add	r0, r3
 8009000:	f010 001f 	ands.w	r0, r0, #31
 8009004:	f000 8086 	beq.w	8009114 <_dtoa_r+0x91c>
 8009008:	f1c0 0320 	rsb	r3, r0, #32
 800900c:	2b04      	cmp	r3, #4
 800900e:	dd7f      	ble.n	8009110 <_dtoa_r+0x918>
 8009010:	f1c0 001c 	rsb	r0, r0, #28
 8009014:	9b04      	ldr	r3, [sp, #16]
 8009016:	4403      	add	r3, r0
 8009018:	4480      	add	r8, r0
 800901a:	4405      	add	r5, r0
 800901c:	9304      	str	r3, [sp, #16]
 800901e:	f1b8 0f00 	cmp.w	r8, #0
 8009022:	dd05      	ble.n	8009030 <_dtoa_r+0x838>
 8009024:	4659      	mov	r1, fp
 8009026:	4642      	mov	r2, r8
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fbfd 	bl	8009828 <__lshift>
 800902e:	4683      	mov	fp, r0
 8009030:	9b04      	ldr	r3, [sp, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	dd05      	ble.n	8009042 <_dtoa_r+0x84a>
 8009036:	4631      	mov	r1, r6
 8009038:	461a      	mov	r2, r3
 800903a:	4620      	mov	r0, r4
 800903c:	f000 fbf4 	bl	8009828 <__lshift>
 8009040:	4606      	mov	r6, r0
 8009042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009044:	2b00      	cmp	r3, #0
 8009046:	d069      	beq.n	800911c <_dtoa_r+0x924>
 8009048:	4631      	mov	r1, r6
 800904a:	4658      	mov	r0, fp
 800904c:	f000 fc58 	bl	8009900 <__mcmp>
 8009050:	2800      	cmp	r0, #0
 8009052:	da63      	bge.n	800911c <_dtoa_r+0x924>
 8009054:	2300      	movs	r3, #0
 8009056:	4659      	mov	r1, fp
 8009058:	220a      	movs	r2, #10
 800905a:	4620      	mov	r0, r4
 800905c:	f000 fa34 	bl	80094c8 <__multadd>
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009066:	4683      	mov	fp, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 818f 	beq.w	800938c <_dtoa_r+0xb94>
 800906e:	4639      	mov	r1, r7
 8009070:	2300      	movs	r3, #0
 8009072:	220a      	movs	r2, #10
 8009074:	4620      	mov	r0, r4
 8009076:	f000 fa27 	bl	80094c8 <__multadd>
 800907a:	f1b9 0f00 	cmp.w	r9, #0
 800907e:	4607      	mov	r7, r0
 8009080:	f300 808e 	bgt.w	80091a0 <_dtoa_r+0x9a8>
 8009084:	9b05      	ldr	r3, [sp, #20]
 8009086:	2b02      	cmp	r3, #2
 8009088:	dc50      	bgt.n	800912c <_dtoa_r+0x934>
 800908a:	e089      	b.n	80091a0 <_dtoa_r+0x9a8>
 800908c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800908e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009092:	e75d      	b.n	8008f50 <_dtoa_r+0x758>
 8009094:	9b01      	ldr	r3, [sp, #4]
 8009096:	1e5e      	subs	r6, r3, #1
 8009098:	9b06      	ldr	r3, [sp, #24]
 800909a:	42b3      	cmp	r3, r6
 800909c:	bfbf      	itttt	lt
 800909e:	9b06      	ldrlt	r3, [sp, #24]
 80090a0:	9606      	strlt	r6, [sp, #24]
 80090a2:	1af2      	sublt	r2, r6, r3
 80090a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80090a6:	bfb6      	itet	lt
 80090a8:	189b      	addlt	r3, r3, r2
 80090aa:	1b9e      	subge	r6, r3, r6
 80090ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80090ae:	9b01      	ldr	r3, [sp, #4]
 80090b0:	bfb8      	it	lt
 80090b2:	2600      	movlt	r6, #0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bfb5      	itete	lt
 80090b8:	eba8 0503 	sublt.w	r5, r8, r3
 80090bc:	9b01      	ldrge	r3, [sp, #4]
 80090be:	2300      	movlt	r3, #0
 80090c0:	4645      	movge	r5, r8
 80090c2:	e747      	b.n	8008f54 <_dtoa_r+0x75c>
 80090c4:	9e06      	ldr	r6, [sp, #24]
 80090c6:	9f08      	ldr	r7, [sp, #32]
 80090c8:	4645      	mov	r5, r8
 80090ca:	e74c      	b.n	8008f66 <_dtoa_r+0x76e>
 80090cc:	9a06      	ldr	r2, [sp, #24]
 80090ce:	e775      	b.n	8008fbc <_dtoa_r+0x7c4>
 80090d0:	9b05      	ldr	r3, [sp, #20]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	dc18      	bgt.n	8009108 <_dtoa_r+0x910>
 80090d6:	9b02      	ldr	r3, [sp, #8]
 80090d8:	b9b3      	cbnz	r3, 8009108 <_dtoa_r+0x910>
 80090da:	9b03      	ldr	r3, [sp, #12]
 80090dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090e0:	b9a3      	cbnz	r3, 800910c <_dtoa_r+0x914>
 80090e2:	9b03      	ldr	r3, [sp, #12]
 80090e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090e8:	0d1b      	lsrs	r3, r3, #20
 80090ea:	051b      	lsls	r3, r3, #20
 80090ec:	b12b      	cbz	r3, 80090fa <_dtoa_r+0x902>
 80090ee:	9b04      	ldr	r3, [sp, #16]
 80090f0:	3301      	adds	r3, #1
 80090f2:	9304      	str	r3, [sp, #16]
 80090f4:	f108 0801 	add.w	r8, r8, #1
 80090f8:	2301      	movs	r3, #1
 80090fa:	9306      	str	r3, [sp, #24]
 80090fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f47f af74 	bne.w	8008fec <_dtoa_r+0x7f4>
 8009104:	2001      	movs	r0, #1
 8009106:	e779      	b.n	8008ffc <_dtoa_r+0x804>
 8009108:	2300      	movs	r3, #0
 800910a:	e7f6      	b.n	80090fa <_dtoa_r+0x902>
 800910c:	9b02      	ldr	r3, [sp, #8]
 800910e:	e7f4      	b.n	80090fa <_dtoa_r+0x902>
 8009110:	d085      	beq.n	800901e <_dtoa_r+0x826>
 8009112:	4618      	mov	r0, r3
 8009114:	301c      	adds	r0, #28
 8009116:	e77d      	b.n	8009014 <_dtoa_r+0x81c>
 8009118:	40240000 	.word	0x40240000
 800911c:	9b01      	ldr	r3, [sp, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	dc38      	bgt.n	8009194 <_dtoa_r+0x99c>
 8009122:	9b05      	ldr	r3, [sp, #20]
 8009124:	2b02      	cmp	r3, #2
 8009126:	dd35      	ble.n	8009194 <_dtoa_r+0x99c>
 8009128:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800912c:	f1b9 0f00 	cmp.w	r9, #0
 8009130:	d10d      	bne.n	800914e <_dtoa_r+0x956>
 8009132:	4631      	mov	r1, r6
 8009134:	464b      	mov	r3, r9
 8009136:	2205      	movs	r2, #5
 8009138:	4620      	mov	r0, r4
 800913a:	f000 f9c5 	bl	80094c8 <__multadd>
 800913e:	4601      	mov	r1, r0
 8009140:	4606      	mov	r6, r0
 8009142:	4658      	mov	r0, fp
 8009144:	f000 fbdc 	bl	8009900 <__mcmp>
 8009148:	2800      	cmp	r0, #0
 800914a:	f73f adbd 	bgt.w	8008cc8 <_dtoa_r+0x4d0>
 800914e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009150:	9d00      	ldr	r5, [sp, #0]
 8009152:	ea6f 0a03 	mvn.w	sl, r3
 8009156:	f04f 0800 	mov.w	r8, #0
 800915a:	4631      	mov	r1, r6
 800915c:	4620      	mov	r0, r4
 800915e:	f000 f991 	bl	8009484 <_Bfree>
 8009162:	2f00      	cmp	r7, #0
 8009164:	f43f aeb4 	beq.w	8008ed0 <_dtoa_r+0x6d8>
 8009168:	f1b8 0f00 	cmp.w	r8, #0
 800916c:	d005      	beq.n	800917a <_dtoa_r+0x982>
 800916e:	45b8      	cmp	r8, r7
 8009170:	d003      	beq.n	800917a <_dtoa_r+0x982>
 8009172:	4641      	mov	r1, r8
 8009174:	4620      	mov	r0, r4
 8009176:	f000 f985 	bl	8009484 <_Bfree>
 800917a:	4639      	mov	r1, r7
 800917c:	4620      	mov	r0, r4
 800917e:	f000 f981 	bl	8009484 <_Bfree>
 8009182:	e6a5      	b.n	8008ed0 <_dtoa_r+0x6d8>
 8009184:	2600      	movs	r6, #0
 8009186:	4637      	mov	r7, r6
 8009188:	e7e1      	b.n	800914e <_dtoa_r+0x956>
 800918a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800918c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009190:	4637      	mov	r7, r6
 8009192:	e599      	b.n	8008cc8 <_dtoa_r+0x4d0>
 8009194:	9b08      	ldr	r3, [sp, #32]
 8009196:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 80fd 	beq.w	800939a <_dtoa_r+0xba2>
 80091a0:	2d00      	cmp	r5, #0
 80091a2:	dd05      	ble.n	80091b0 <_dtoa_r+0x9b8>
 80091a4:	4639      	mov	r1, r7
 80091a6:	462a      	mov	r2, r5
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fb3d 	bl	8009828 <__lshift>
 80091ae:	4607      	mov	r7, r0
 80091b0:	9b06      	ldr	r3, [sp, #24]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d05c      	beq.n	8009270 <_dtoa_r+0xa78>
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 f923 	bl	8009404 <_Balloc>
 80091be:	4605      	mov	r5, r0
 80091c0:	b928      	cbnz	r0, 80091ce <_dtoa_r+0x9d6>
 80091c2:	4b80      	ldr	r3, [pc, #512]	; (80093c4 <_dtoa_r+0xbcc>)
 80091c4:	4602      	mov	r2, r0
 80091c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091ca:	f7ff bb2e 	b.w	800882a <_dtoa_r+0x32>
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	3202      	adds	r2, #2
 80091d2:	0092      	lsls	r2, r2, #2
 80091d4:	f107 010c 	add.w	r1, r7, #12
 80091d8:	300c      	adds	r0, #12
 80091da:	f000 f905 	bl	80093e8 <memcpy>
 80091de:	2201      	movs	r2, #1
 80091e0:	4629      	mov	r1, r5
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 fb20 	bl	8009828 <__lshift>
 80091e8:	9b00      	ldr	r3, [sp, #0]
 80091ea:	3301      	adds	r3, #1
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	9b00      	ldr	r3, [sp, #0]
 80091f0:	444b      	add	r3, r9
 80091f2:	9307      	str	r3, [sp, #28]
 80091f4:	9b02      	ldr	r3, [sp, #8]
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	46b8      	mov	r8, r7
 80091fc:	9306      	str	r3, [sp, #24]
 80091fe:	4607      	mov	r7, r0
 8009200:	9b01      	ldr	r3, [sp, #4]
 8009202:	4631      	mov	r1, r6
 8009204:	3b01      	subs	r3, #1
 8009206:	4658      	mov	r0, fp
 8009208:	9302      	str	r3, [sp, #8]
 800920a:	f7ff fa67 	bl	80086dc <quorem>
 800920e:	4603      	mov	r3, r0
 8009210:	3330      	adds	r3, #48	; 0x30
 8009212:	9004      	str	r0, [sp, #16]
 8009214:	4641      	mov	r1, r8
 8009216:	4658      	mov	r0, fp
 8009218:	9308      	str	r3, [sp, #32]
 800921a:	f000 fb71 	bl	8009900 <__mcmp>
 800921e:	463a      	mov	r2, r7
 8009220:	4681      	mov	r9, r0
 8009222:	4631      	mov	r1, r6
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fb87 	bl	8009938 <__mdiff>
 800922a:	68c2      	ldr	r2, [r0, #12]
 800922c:	9b08      	ldr	r3, [sp, #32]
 800922e:	4605      	mov	r5, r0
 8009230:	bb02      	cbnz	r2, 8009274 <_dtoa_r+0xa7c>
 8009232:	4601      	mov	r1, r0
 8009234:	4658      	mov	r0, fp
 8009236:	f000 fb63 	bl	8009900 <__mcmp>
 800923a:	9b08      	ldr	r3, [sp, #32]
 800923c:	4602      	mov	r2, r0
 800923e:	4629      	mov	r1, r5
 8009240:	4620      	mov	r0, r4
 8009242:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009246:	f000 f91d 	bl	8009484 <_Bfree>
 800924a:	9b05      	ldr	r3, [sp, #20]
 800924c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800924e:	9d01      	ldr	r5, [sp, #4]
 8009250:	ea43 0102 	orr.w	r1, r3, r2
 8009254:	9b06      	ldr	r3, [sp, #24]
 8009256:	430b      	orrs	r3, r1
 8009258:	9b08      	ldr	r3, [sp, #32]
 800925a:	d10d      	bne.n	8009278 <_dtoa_r+0xa80>
 800925c:	2b39      	cmp	r3, #57	; 0x39
 800925e:	d029      	beq.n	80092b4 <_dtoa_r+0xabc>
 8009260:	f1b9 0f00 	cmp.w	r9, #0
 8009264:	dd01      	ble.n	800926a <_dtoa_r+0xa72>
 8009266:	9b04      	ldr	r3, [sp, #16]
 8009268:	3331      	adds	r3, #49	; 0x31
 800926a:	9a02      	ldr	r2, [sp, #8]
 800926c:	7013      	strb	r3, [r2, #0]
 800926e:	e774      	b.n	800915a <_dtoa_r+0x962>
 8009270:	4638      	mov	r0, r7
 8009272:	e7b9      	b.n	80091e8 <_dtoa_r+0x9f0>
 8009274:	2201      	movs	r2, #1
 8009276:	e7e2      	b.n	800923e <_dtoa_r+0xa46>
 8009278:	f1b9 0f00 	cmp.w	r9, #0
 800927c:	db06      	blt.n	800928c <_dtoa_r+0xa94>
 800927e:	9905      	ldr	r1, [sp, #20]
 8009280:	ea41 0909 	orr.w	r9, r1, r9
 8009284:	9906      	ldr	r1, [sp, #24]
 8009286:	ea59 0101 	orrs.w	r1, r9, r1
 800928a:	d120      	bne.n	80092ce <_dtoa_r+0xad6>
 800928c:	2a00      	cmp	r2, #0
 800928e:	ddec      	ble.n	800926a <_dtoa_r+0xa72>
 8009290:	4659      	mov	r1, fp
 8009292:	2201      	movs	r2, #1
 8009294:	4620      	mov	r0, r4
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	f000 fac6 	bl	8009828 <__lshift>
 800929c:	4631      	mov	r1, r6
 800929e:	4683      	mov	fp, r0
 80092a0:	f000 fb2e 	bl	8009900 <__mcmp>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	dc02      	bgt.n	80092b0 <_dtoa_r+0xab8>
 80092aa:	d1de      	bne.n	800926a <_dtoa_r+0xa72>
 80092ac:	07da      	lsls	r2, r3, #31
 80092ae:	d5dc      	bpl.n	800926a <_dtoa_r+0xa72>
 80092b0:	2b39      	cmp	r3, #57	; 0x39
 80092b2:	d1d8      	bne.n	8009266 <_dtoa_r+0xa6e>
 80092b4:	9a02      	ldr	r2, [sp, #8]
 80092b6:	2339      	movs	r3, #57	; 0x39
 80092b8:	7013      	strb	r3, [r2, #0]
 80092ba:	462b      	mov	r3, r5
 80092bc:	461d      	mov	r5, r3
 80092be:	3b01      	subs	r3, #1
 80092c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092c4:	2a39      	cmp	r2, #57	; 0x39
 80092c6:	d050      	beq.n	800936a <_dtoa_r+0xb72>
 80092c8:	3201      	adds	r2, #1
 80092ca:	701a      	strb	r2, [r3, #0]
 80092cc:	e745      	b.n	800915a <_dtoa_r+0x962>
 80092ce:	2a00      	cmp	r2, #0
 80092d0:	dd03      	ble.n	80092da <_dtoa_r+0xae2>
 80092d2:	2b39      	cmp	r3, #57	; 0x39
 80092d4:	d0ee      	beq.n	80092b4 <_dtoa_r+0xabc>
 80092d6:	3301      	adds	r3, #1
 80092d8:	e7c7      	b.n	800926a <_dtoa_r+0xa72>
 80092da:	9a01      	ldr	r2, [sp, #4]
 80092dc:	9907      	ldr	r1, [sp, #28]
 80092de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092e2:	428a      	cmp	r2, r1
 80092e4:	d02a      	beq.n	800933c <_dtoa_r+0xb44>
 80092e6:	4659      	mov	r1, fp
 80092e8:	2300      	movs	r3, #0
 80092ea:	220a      	movs	r2, #10
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 f8eb 	bl	80094c8 <__multadd>
 80092f2:	45b8      	cmp	r8, r7
 80092f4:	4683      	mov	fp, r0
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	f04f 020a 	mov.w	r2, #10
 80092fe:	4641      	mov	r1, r8
 8009300:	4620      	mov	r0, r4
 8009302:	d107      	bne.n	8009314 <_dtoa_r+0xb1c>
 8009304:	f000 f8e0 	bl	80094c8 <__multadd>
 8009308:	4680      	mov	r8, r0
 800930a:	4607      	mov	r7, r0
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	3301      	adds	r3, #1
 8009310:	9301      	str	r3, [sp, #4]
 8009312:	e775      	b.n	8009200 <_dtoa_r+0xa08>
 8009314:	f000 f8d8 	bl	80094c8 <__multadd>
 8009318:	4639      	mov	r1, r7
 800931a:	4680      	mov	r8, r0
 800931c:	2300      	movs	r3, #0
 800931e:	220a      	movs	r2, #10
 8009320:	4620      	mov	r0, r4
 8009322:	f000 f8d1 	bl	80094c8 <__multadd>
 8009326:	4607      	mov	r7, r0
 8009328:	e7f0      	b.n	800930c <_dtoa_r+0xb14>
 800932a:	f1b9 0f00 	cmp.w	r9, #0
 800932e:	9a00      	ldr	r2, [sp, #0]
 8009330:	bfcc      	ite	gt
 8009332:	464d      	movgt	r5, r9
 8009334:	2501      	movle	r5, #1
 8009336:	4415      	add	r5, r2
 8009338:	f04f 0800 	mov.w	r8, #0
 800933c:	4659      	mov	r1, fp
 800933e:	2201      	movs	r2, #1
 8009340:	4620      	mov	r0, r4
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	f000 fa70 	bl	8009828 <__lshift>
 8009348:	4631      	mov	r1, r6
 800934a:	4683      	mov	fp, r0
 800934c:	f000 fad8 	bl	8009900 <__mcmp>
 8009350:	2800      	cmp	r0, #0
 8009352:	dcb2      	bgt.n	80092ba <_dtoa_r+0xac2>
 8009354:	d102      	bne.n	800935c <_dtoa_r+0xb64>
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	07db      	lsls	r3, r3, #31
 800935a:	d4ae      	bmi.n	80092ba <_dtoa_r+0xac2>
 800935c:	462b      	mov	r3, r5
 800935e:	461d      	mov	r5, r3
 8009360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009364:	2a30      	cmp	r2, #48	; 0x30
 8009366:	d0fa      	beq.n	800935e <_dtoa_r+0xb66>
 8009368:	e6f7      	b.n	800915a <_dtoa_r+0x962>
 800936a:	9a00      	ldr	r2, [sp, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d1a5      	bne.n	80092bc <_dtoa_r+0xac4>
 8009370:	f10a 0a01 	add.w	sl, sl, #1
 8009374:	2331      	movs	r3, #49	; 0x31
 8009376:	e779      	b.n	800926c <_dtoa_r+0xa74>
 8009378:	4b13      	ldr	r3, [pc, #76]	; (80093c8 <_dtoa_r+0xbd0>)
 800937a:	f7ff baaf 	b.w	80088dc <_dtoa_r+0xe4>
 800937e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009380:	2b00      	cmp	r3, #0
 8009382:	f47f aa86 	bne.w	8008892 <_dtoa_r+0x9a>
 8009386:	4b11      	ldr	r3, [pc, #68]	; (80093cc <_dtoa_r+0xbd4>)
 8009388:	f7ff baa8 	b.w	80088dc <_dtoa_r+0xe4>
 800938c:	f1b9 0f00 	cmp.w	r9, #0
 8009390:	dc03      	bgt.n	800939a <_dtoa_r+0xba2>
 8009392:	9b05      	ldr	r3, [sp, #20]
 8009394:	2b02      	cmp	r3, #2
 8009396:	f73f aec9 	bgt.w	800912c <_dtoa_r+0x934>
 800939a:	9d00      	ldr	r5, [sp, #0]
 800939c:	4631      	mov	r1, r6
 800939e:	4658      	mov	r0, fp
 80093a0:	f7ff f99c 	bl	80086dc <quorem>
 80093a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093a8:	f805 3b01 	strb.w	r3, [r5], #1
 80093ac:	9a00      	ldr	r2, [sp, #0]
 80093ae:	1aaa      	subs	r2, r5, r2
 80093b0:	4591      	cmp	r9, r2
 80093b2:	ddba      	ble.n	800932a <_dtoa_r+0xb32>
 80093b4:	4659      	mov	r1, fp
 80093b6:	2300      	movs	r3, #0
 80093b8:	220a      	movs	r2, #10
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 f884 	bl	80094c8 <__multadd>
 80093c0:	4683      	mov	fp, r0
 80093c2:	e7eb      	b.n	800939c <_dtoa_r+0xba4>
 80093c4:	0800ae33 	.word	0x0800ae33
 80093c8:	0800ad8c 	.word	0x0800ad8c
 80093cc:	0800adb0 	.word	0x0800adb0

080093d0 <_localeconv_r>:
 80093d0:	4800      	ldr	r0, [pc, #0]	; (80093d4 <_localeconv_r+0x4>)
 80093d2:	4770      	bx	lr
 80093d4:	20000164 	.word	0x20000164

080093d8 <malloc>:
 80093d8:	4b02      	ldr	r3, [pc, #8]	; (80093e4 <malloc+0xc>)
 80093da:	4601      	mov	r1, r0
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	f000 bbef 	b.w	8009bc0 <_malloc_r>
 80093e2:	bf00      	nop
 80093e4:	20000010 	.word	0x20000010

080093e8 <memcpy>:
 80093e8:	440a      	add	r2, r1
 80093ea:	4291      	cmp	r1, r2
 80093ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80093f0:	d100      	bne.n	80093f4 <memcpy+0xc>
 80093f2:	4770      	bx	lr
 80093f4:	b510      	push	{r4, lr}
 80093f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093fe:	4291      	cmp	r1, r2
 8009400:	d1f9      	bne.n	80093f6 <memcpy+0xe>
 8009402:	bd10      	pop	{r4, pc}

08009404 <_Balloc>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009408:	4604      	mov	r4, r0
 800940a:	460d      	mov	r5, r1
 800940c:	b976      	cbnz	r6, 800942c <_Balloc+0x28>
 800940e:	2010      	movs	r0, #16
 8009410:	f7ff ffe2 	bl	80093d8 <malloc>
 8009414:	4602      	mov	r2, r0
 8009416:	6260      	str	r0, [r4, #36]	; 0x24
 8009418:	b920      	cbnz	r0, 8009424 <_Balloc+0x20>
 800941a:	4b18      	ldr	r3, [pc, #96]	; (800947c <_Balloc+0x78>)
 800941c:	4818      	ldr	r0, [pc, #96]	; (8009480 <_Balloc+0x7c>)
 800941e:	2166      	movs	r1, #102	; 0x66
 8009420:	f000 fd94 	bl	8009f4c <__assert_func>
 8009424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009428:	6006      	str	r6, [r0, #0]
 800942a:	60c6      	str	r6, [r0, #12]
 800942c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800942e:	68f3      	ldr	r3, [r6, #12]
 8009430:	b183      	cbz	r3, 8009454 <_Balloc+0x50>
 8009432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800943a:	b9b8      	cbnz	r0, 800946c <_Balloc+0x68>
 800943c:	2101      	movs	r1, #1
 800943e:	fa01 f605 	lsl.w	r6, r1, r5
 8009442:	1d72      	adds	r2, r6, #5
 8009444:	0092      	lsls	r2, r2, #2
 8009446:	4620      	mov	r0, r4
 8009448:	f000 fb5a 	bl	8009b00 <_calloc_r>
 800944c:	b160      	cbz	r0, 8009468 <_Balloc+0x64>
 800944e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009452:	e00e      	b.n	8009472 <_Balloc+0x6e>
 8009454:	2221      	movs	r2, #33	; 0x21
 8009456:	2104      	movs	r1, #4
 8009458:	4620      	mov	r0, r4
 800945a:	f000 fb51 	bl	8009b00 <_calloc_r>
 800945e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009460:	60f0      	str	r0, [r6, #12]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e4      	bne.n	8009432 <_Balloc+0x2e>
 8009468:	2000      	movs	r0, #0
 800946a:	bd70      	pop	{r4, r5, r6, pc}
 800946c:	6802      	ldr	r2, [r0, #0]
 800946e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009472:	2300      	movs	r3, #0
 8009474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009478:	e7f7      	b.n	800946a <_Balloc+0x66>
 800947a:	bf00      	nop
 800947c:	0800adbd 	.word	0x0800adbd
 8009480:	0800ae44 	.word	0x0800ae44

08009484 <_Bfree>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009488:	4605      	mov	r5, r0
 800948a:	460c      	mov	r4, r1
 800948c:	b976      	cbnz	r6, 80094ac <_Bfree+0x28>
 800948e:	2010      	movs	r0, #16
 8009490:	f7ff ffa2 	bl	80093d8 <malloc>
 8009494:	4602      	mov	r2, r0
 8009496:	6268      	str	r0, [r5, #36]	; 0x24
 8009498:	b920      	cbnz	r0, 80094a4 <_Bfree+0x20>
 800949a:	4b09      	ldr	r3, [pc, #36]	; (80094c0 <_Bfree+0x3c>)
 800949c:	4809      	ldr	r0, [pc, #36]	; (80094c4 <_Bfree+0x40>)
 800949e:	218a      	movs	r1, #138	; 0x8a
 80094a0:	f000 fd54 	bl	8009f4c <__assert_func>
 80094a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094a8:	6006      	str	r6, [r0, #0]
 80094aa:	60c6      	str	r6, [r0, #12]
 80094ac:	b13c      	cbz	r4, 80094be <_Bfree+0x3a>
 80094ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094b0:	6862      	ldr	r2, [r4, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094b8:	6021      	str	r1, [r4, #0]
 80094ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	0800adbd 	.word	0x0800adbd
 80094c4:	0800ae44 	.word	0x0800ae44

080094c8 <__multadd>:
 80094c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	690e      	ldr	r6, [r1, #16]
 80094ce:	4607      	mov	r7, r0
 80094d0:	4698      	mov	r8, r3
 80094d2:	460c      	mov	r4, r1
 80094d4:	f101 0014 	add.w	r0, r1, #20
 80094d8:	2300      	movs	r3, #0
 80094da:	6805      	ldr	r5, [r0, #0]
 80094dc:	b2a9      	uxth	r1, r5
 80094de:	fb02 8101 	mla	r1, r2, r1, r8
 80094e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80094e6:	0c2d      	lsrs	r5, r5, #16
 80094e8:	fb02 c505 	mla	r5, r2, r5, ip
 80094ec:	b289      	uxth	r1, r1
 80094ee:	3301      	adds	r3, #1
 80094f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80094f4:	429e      	cmp	r6, r3
 80094f6:	f840 1b04 	str.w	r1, [r0], #4
 80094fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80094fe:	dcec      	bgt.n	80094da <__multadd+0x12>
 8009500:	f1b8 0f00 	cmp.w	r8, #0
 8009504:	d022      	beq.n	800954c <__multadd+0x84>
 8009506:	68a3      	ldr	r3, [r4, #8]
 8009508:	42b3      	cmp	r3, r6
 800950a:	dc19      	bgt.n	8009540 <__multadd+0x78>
 800950c:	6861      	ldr	r1, [r4, #4]
 800950e:	4638      	mov	r0, r7
 8009510:	3101      	adds	r1, #1
 8009512:	f7ff ff77 	bl	8009404 <_Balloc>
 8009516:	4605      	mov	r5, r0
 8009518:	b928      	cbnz	r0, 8009526 <__multadd+0x5e>
 800951a:	4602      	mov	r2, r0
 800951c:	4b0d      	ldr	r3, [pc, #52]	; (8009554 <__multadd+0x8c>)
 800951e:	480e      	ldr	r0, [pc, #56]	; (8009558 <__multadd+0x90>)
 8009520:	21b5      	movs	r1, #181	; 0xb5
 8009522:	f000 fd13 	bl	8009f4c <__assert_func>
 8009526:	6922      	ldr	r2, [r4, #16]
 8009528:	3202      	adds	r2, #2
 800952a:	f104 010c 	add.w	r1, r4, #12
 800952e:	0092      	lsls	r2, r2, #2
 8009530:	300c      	adds	r0, #12
 8009532:	f7ff ff59 	bl	80093e8 <memcpy>
 8009536:	4621      	mov	r1, r4
 8009538:	4638      	mov	r0, r7
 800953a:	f7ff ffa3 	bl	8009484 <_Bfree>
 800953e:	462c      	mov	r4, r5
 8009540:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009544:	3601      	adds	r6, #1
 8009546:	f8c3 8014 	str.w	r8, [r3, #20]
 800954a:	6126      	str	r6, [r4, #16]
 800954c:	4620      	mov	r0, r4
 800954e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009552:	bf00      	nop
 8009554:	0800ae33 	.word	0x0800ae33
 8009558:	0800ae44 	.word	0x0800ae44

0800955c <__hi0bits>:
 800955c:	0c03      	lsrs	r3, r0, #16
 800955e:	041b      	lsls	r3, r3, #16
 8009560:	b9d3      	cbnz	r3, 8009598 <__hi0bits+0x3c>
 8009562:	0400      	lsls	r0, r0, #16
 8009564:	2310      	movs	r3, #16
 8009566:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800956a:	bf04      	itt	eq
 800956c:	0200      	lsleq	r0, r0, #8
 800956e:	3308      	addeq	r3, #8
 8009570:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009574:	bf04      	itt	eq
 8009576:	0100      	lsleq	r0, r0, #4
 8009578:	3304      	addeq	r3, #4
 800957a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800957e:	bf04      	itt	eq
 8009580:	0080      	lsleq	r0, r0, #2
 8009582:	3302      	addeq	r3, #2
 8009584:	2800      	cmp	r0, #0
 8009586:	db05      	blt.n	8009594 <__hi0bits+0x38>
 8009588:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800958c:	f103 0301 	add.w	r3, r3, #1
 8009590:	bf08      	it	eq
 8009592:	2320      	moveq	r3, #32
 8009594:	4618      	mov	r0, r3
 8009596:	4770      	bx	lr
 8009598:	2300      	movs	r3, #0
 800959a:	e7e4      	b.n	8009566 <__hi0bits+0xa>

0800959c <__lo0bits>:
 800959c:	6803      	ldr	r3, [r0, #0]
 800959e:	f013 0207 	ands.w	r2, r3, #7
 80095a2:	4601      	mov	r1, r0
 80095a4:	d00b      	beq.n	80095be <__lo0bits+0x22>
 80095a6:	07da      	lsls	r2, r3, #31
 80095a8:	d424      	bmi.n	80095f4 <__lo0bits+0x58>
 80095aa:	0798      	lsls	r0, r3, #30
 80095ac:	bf49      	itett	mi
 80095ae:	085b      	lsrmi	r3, r3, #1
 80095b0:	089b      	lsrpl	r3, r3, #2
 80095b2:	2001      	movmi	r0, #1
 80095b4:	600b      	strmi	r3, [r1, #0]
 80095b6:	bf5c      	itt	pl
 80095b8:	600b      	strpl	r3, [r1, #0]
 80095ba:	2002      	movpl	r0, #2
 80095bc:	4770      	bx	lr
 80095be:	b298      	uxth	r0, r3
 80095c0:	b9b0      	cbnz	r0, 80095f0 <__lo0bits+0x54>
 80095c2:	0c1b      	lsrs	r3, r3, #16
 80095c4:	2010      	movs	r0, #16
 80095c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095ca:	bf04      	itt	eq
 80095cc:	0a1b      	lsreq	r3, r3, #8
 80095ce:	3008      	addeq	r0, #8
 80095d0:	071a      	lsls	r2, r3, #28
 80095d2:	bf04      	itt	eq
 80095d4:	091b      	lsreq	r3, r3, #4
 80095d6:	3004      	addeq	r0, #4
 80095d8:	079a      	lsls	r2, r3, #30
 80095da:	bf04      	itt	eq
 80095dc:	089b      	lsreq	r3, r3, #2
 80095de:	3002      	addeq	r0, #2
 80095e0:	07da      	lsls	r2, r3, #31
 80095e2:	d403      	bmi.n	80095ec <__lo0bits+0x50>
 80095e4:	085b      	lsrs	r3, r3, #1
 80095e6:	f100 0001 	add.w	r0, r0, #1
 80095ea:	d005      	beq.n	80095f8 <__lo0bits+0x5c>
 80095ec:	600b      	str	r3, [r1, #0]
 80095ee:	4770      	bx	lr
 80095f0:	4610      	mov	r0, r2
 80095f2:	e7e8      	b.n	80095c6 <__lo0bits+0x2a>
 80095f4:	2000      	movs	r0, #0
 80095f6:	4770      	bx	lr
 80095f8:	2020      	movs	r0, #32
 80095fa:	4770      	bx	lr

080095fc <__i2b>:
 80095fc:	b510      	push	{r4, lr}
 80095fe:	460c      	mov	r4, r1
 8009600:	2101      	movs	r1, #1
 8009602:	f7ff feff 	bl	8009404 <_Balloc>
 8009606:	4602      	mov	r2, r0
 8009608:	b928      	cbnz	r0, 8009616 <__i2b+0x1a>
 800960a:	4b05      	ldr	r3, [pc, #20]	; (8009620 <__i2b+0x24>)
 800960c:	4805      	ldr	r0, [pc, #20]	; (8009624 <__i2b+0x28>)
 800960e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009612:	f000 fc9b 	bl	8009f4c <__assert_func>
 8009616:	2301      	movs	r3, #1
 8009618:	6144      	str	r4, [r0, #20]
 800961a:	6103      	str	r3, [r0, #16]
 800961c:	bd10      	pop	{r4, pc}
 800961e:	bf00      	nop
 8009620:	0800ae33 	.word	0x0800ae33
 8009624:	0800ae44 	.word	0x0800ae44

08009628 <__multiply>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	4614      	mov	r4, r2
 800962e:	690a      	ldr	r2, [r1, #16]
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	429a      	cmp	r2, r3
 8009634:	bfb8      	it	lt
 8009636:	460b      	movlt	r3, r1
 8009638:	460d      	mov	r5, r1
 800963a:	bfbc      	itt	lt
 800963c:	4625      	movlt	r5, r4
 800963e:	461c      	movlt	r4, r3
 8009640:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009644:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009648:	68ab      	ldr	r3, [r5, #8]
 800964a:	6869      	ldr	r1, [r5, #4]
 800964c:	eb0a 0709 	add.w	r7, sl, r9
 8009650:	42bb      	cmp	r3, r7
 8009652:	b085      	sub	sp, #20
 8009654:	bfb8      	it	lt
 8009656:	3101      	addlt	r1, #1
 8009658:	f7ff fed4 	bl	8009404 <_Balloc>
 800965c:	b930      	cbnz	r0, 800966c <__multiply+0x44>
 800965e:	4602      	mov	r2, r0
 8009660:	4b42      	ldr	r3, [pc, #264]	; (800976c <__multiply+0x144>)
 8009662:	4843      	ldr	r0, [pc, #268]	; (8009770 <__multiply+0x148>)
 8009664:	f240 115d 	movw	r1, #349	; 0x15d
 8009668:	f000 fc70 	bl	8009f4c <__assert_func>
 800966c:	f100 0614 	add.w	r6, r0, #20
 8009670:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009674:	4633      	mov	r3, r6
 8009676:	2200      	movs	r2, #0
 8009678:	4543      	cmp	r3, r8
 800967a:	d31e      	bcc.n	80096ba <__multiply+0x92>
 800967c:	f105 0c14 	add.w	ip, r5, #20
 8009680:	f104 0314 	add.w	r3, r4, #20
 8009684:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009688:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800968c:	9202      	str	r2, [sp, #8]
 800968e:	ebac 0205 	sub.w	r2, ip, r5
 8009692:	3a15      	subs	r2, #21
 8009694:	f022 0203 	bic.w	r2, r2, #3
 8009698:	3204      	adds	r2, #4
 800969a:	f105 0115 	add.w	r1, r5, #21
 800969e:	458c      	cmp	ip, r1
 80096a0:	bf38      	it	cc
 80096a2:	2204      	movcc	r2, #4
 80096a4:	9201      	str	r2, [sp, #4]
 80096a6:	9a02      	ldr	r2, [sp, #8]
 80096a8:	9303      	str	r3, [sp, #12]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d808      	bhi.n	80096c0 <__multiply+0x98>
 80096ae:	2f00      	cmp	r7, #0
 80096b0:	dc55      	bgt.n	800975e <__multiply+0x136>
 80096b2:	6107      	str	r7, [r0, #16]
 80096b4:	b005      	add	sp, #20
 80096b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ba:	f843 2b04 	str.w	r2, [r3], #4
 80096be:	e7db      	b.n	8009678 <__multiply+0x50>
 80096c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80096c4:	f1ba 0f00 	cmp.w	sl, #0
 80096c8:	d020      	beq.n	800970c <__multiply+0xe4>
 80096ca:	f105 0e14 	add.w	lr, r5, #20
 80096ce:	46b1      	mov	r9, r6
 80096d0:	2200      	movs	r2, #0
 80096d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80096d6:	f8d9 b000 	ldr.w	fp, [r9]
 80096da:	b2a1      	uxth	r1, r4
 80096dc:	fa1f fb8b 	uxth.w	fp, fp
 80096e0:	fb0a b101 	mla	r1, sl, r1, fp
 80096e4:	4411      	add	r1, r2
 80096e6:	f8d9 2000 	ldr.w	r2, [r9]
 80096ea:	0c24      	lsrs	r4, r4, #16
 80096ec:	0c12      	lsrs	r2, r2, #16
 80096ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80096f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80096f6:	b289      	uxth	r1, r1
 80096f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80096fc:	45f4      	cmp	ip, lr
 80096fe:	f849 1b04 	str.w	r1, [r9], #4
 8009702:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009706:	d8e4      	bhi.n	80096d2 <__multiply+0xaa>
 8009708:	9901      	ldr	r1, [sp, #4]
 800970a:	5072      	str	r2, [r6, r1]
 800970c:	9a03      	ldr	r2, [sp, #12]
 800970e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009712:	3304      	adds	r3, #4
 8009714:	f1b9 0f00 	cmp.w	r9, #0
 8009718:	d01f      	beq.n	800975a <__multiply+0x132>
 800971a:	6834      	ldr	r4, [r6, #0]
 800971c:	f105 0114 	add.w	r1, r5, #20
 8009720:	46b6      	mov	lr, r6
 8009722:	f04f 0a00 	mov.w	sl, #0
 8009726:	880a      	ldrh	r2, [r1, #0]
 8009728:	f8be b002 	ldrh.w	fp, [lr, #2]
 800972c:	fb09 b202 	mla	r2, r9, r2, fp
 8009730:	4492      	add	sl, r2
 8009732:	b2a4      	uxth	r4, r4
 8009734:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009738:	f84e 4b04 	str.w	r4, [lr], #4
 800973c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009740:	f8be 2000 	ldrh.w	r2, [lr]
 8009744:	0c24      	lsrs	r4, r4, #16
 8009746:	fb09 2404 	mla	r4, r9, r4, r2
 800974a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800974e:	458c      	cmp	ip, r1
 8009750:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009754:	d8e7      	bhi.n	8009726 <__multiply+0xfe>
 8009756:	9a01      	ldr	r2, [sp, #4]
 8009758:	50b4      	str	r4, [r6, r2]
 800975a:	3604      	adds	r6, #4
 800975c:	e7a3      	b.n	80096a6 <__multiply+0x7e>
 800975e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1a5      	bne.n	80096b2 <__multiply+0x8a>
 8009766:	3f01      	subs	r7, #1
 8009768:	e7a1      	b.n	80096ae <__multiply+0x86>
 800976a:	bf00      	nop
 800976c:	0800ae33 	.word	0x0800ae33
 8009770:	0800ae44 	.word	0x0800ae44

08009774 <__pow5mult>:
 8009774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009778:	4615      	mov	r5, r2
 800977a:	f012 0203 	ands.w	r2, r2, #3
 800977e:	4606      	mov	r6, r0
 8009780:	460f      	mov	r7, r1
 8009782:	d007      	beq.n	8009794 <__pow5mult+0x20>
 8009784:	4c25      	ldr	r4, [pc, #148]	; (800981c <__pow5mult+0xa8>)
 8009786:	3a01      	subs	r2, #1
 8009788:	2300      	movs	r3, #0
 800978a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800978e:	f7ff fe9b 	bl	80094c8 <__multadd>
 8009792:	4607      	mov	r7, r0
 8009794:	10ad      	asrs	r5, r5, #2
 8009796:	d03d      	beq.n	8009814 <__pow5mult+0xa0>
 8009798:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800979a:	b97c      	cbnz	r4, 80097bc <__pow5mult+0x48>
 800979c:	2010      	movs	r0, #16
 800979e:	f7ff fe1b 	bl	80093d8 <malloc>
 80097a2:	4602      	mov	r2, r0
 80097a4:	6270      	str	r0, [r6, #36]	; 0x24
 80097a6:	b928      	cbnz	r0, 80097b4 <__pow5mult+0x40>
 80097a8:	4b1d      	ldr	r3, [pc, #116]	; (8009820 <__pow5mult+0xac>)
 80097aa:	481e      	ldr	r0, [pc, #120]	; (8009824 <__pow5mult+0xb0>)
 80097ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097b0:	f000 fbcc 	bl	8009f4c <__assert_func>
 80097b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097b8:	6004      	str	r4, [r0, #0]
 80097ba:	60c4      	str	r4, [r0, #12]
 80097bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097c4:	b94c      	cbnz	r4, 80097da <__pow5mult+0x66>
 80097c6:	f240 2171 	movw	r1, #625	; 0x271
 80097ca:	4630      	mov	r0, r6
 80097cc:	f7ff ff16 	bl	80095fc <__i2b>
 80097d0:	2300      	movs	r3, #0
 80097d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80097d6:	4604      	mov	r4, r0
 80097d8:	6003      	str	r3, [r0, #0]
 80097da:	f04f 0900 	mov.w	r9, #0
 80097de:	07eb      	lsls	r3, r5, #31
 80097e0:	d50a      	bpl.n	80097f8 <__pow5mult+0x84>
 80097e2:	4639      	mov	r1, r7
 80097e4:	4622      	mov	r2, r4
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7ff ff1e 	bl	8009628 <__multiply>
 80097ec:	4639      	mov	r1, r7
 80097ee:	4680      	mov	r8, r0
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff fe47 	bl	8009484 <_Bfree>
 80097f6:	4647      	mov	r7, r8
 80097f8:	106d      	asrs	r5, r5, #1
 80097fa:	d00b      	beq.n	8009814 <__pow5mult+0xa0>
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	b938      	cbnz	r0, 8009810 <__pow5mult+0x9c>
 8009800:	4622      	mov	r2, r4
 8009802:	4621      	mov	r1, r4
 8009804:	4630      	mov	r0, r6
 8009806:	f7ff ff0f 	bl	8009628 <__multiply>
 800980a:	6020      	str	r0, [r4, #0]
 800980c:	f8c0 9000 	str.w	r9, [r0]
 8009810:	4604      	mov	r4, r0
 8009812:	e7e4      	b.n	80097de <__pow5mult+0x6a>
 8009814:	4638      	mov	r0, r7
 8009816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981a:	bf00      	nop
 800981c:	0800af98 	.word	0x0800af98
 8009820:	0800adbd 	.word	0x0800adbd
 8009824:	0800ae44 	.word	0x0800ae44

08009828 <__lshift>:
 8009828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982c:	460c      	mov	r4, r1
 800982e:	6849      	ldr	r1, [r1, #4]
 8009830:	6923      	ldr	r3, [r4, #16]
 8009832:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009836:	68a3      	ldr	r3, [r4, #8]
 8009838:	4607      	mov	r7, r0
 800983a:	4691      	mov	r9, r2
 800983c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009840:	f108 0601 	add.w	r6, r8, #1
 8009844:	42b3      	cmp	r3, r6
 8009846:	db0b      	blt.n	8009860 <__lshift+0x38>
 8009848:	4638      	mov	r0, r7
 800984a:	f7ff fddb 	bl	8009404 <_Balloc>
 800984e:	4605      	mov	r5, r0
 8009850:	b948      	cbnz	r0, 8009866 <__lshift+0x3e>
 8009852:	4602      	mov	r2, r0
 8009854:	4b28      	ldr	r3, [pc, #160]	; (80098f8 <__lshift+0xd0>)
 8009856:	4829      	ldr	r0, [pc, #164]	; (80098fc <__lshift+0xd4>)
 8009858:	f240 11d9 	movw	r1, #473	; 0x1d9
 800985c:	f000 fb76 	bl	8009f4c <__assert_func>
 8009860:	3101      	adds	r1, #1
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	e7ee      	b.n	8009844 <__lshift+0x1c>
 8009866:	2300      	movs	r3, #0
 8009868:	f100 0114 	add.w	r1, r0, #20
 800986c:	f100 0210 	add.w	r2, r0, #16
 8009870:	4618      	mov	r0, r3
 8009872:	4553      	cmp	r3, sl
 8009874:	db33      	blt.n	80098de <__lshift+0xb6>
 8009876:	6920      	ldr	r0, [r4, #16]
 8009878:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800987c:	f104 0314 	add.w	r3, r4, #20
 8009880:	f019 091f 	ands.w	r9, r9, #31
 8009884:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009888:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800988c:	d02b      	beq.n	80098e6 <__lshift+0xbe>
 800988e:	f1c9 0e20 	rsb	lr, r9, #32
 8009892:	468a      	mov	sl, r1
 8009894:	2200      	movs	r2, #0
 8009896:	6818      	ldr	r0, [r3, #0]
 8009898:	fa00 f009 	lsl.w	r0, r0, r9
 800989c:	4302      	orrs	r2, r0
 800989e:	f84a 2b04 	str.w	r2, [sl], #4
 80098a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a6:	459c      	cmp	ip, r3
 80098a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80098ac:	d8f3      	bhi.n	8009896 <__lshift+0x6e>
 80098ae:	ebac 0304 	sub.w	r3, ip, r4
 80098b2:	3b15      	subs	r3, #21
 80098b4:	f023 0303 	bic.w	r3, r3, #3
 80098b8:	3304      	adds	r3, #4
 80098ba:	f104 0015 	add.w	r0, r4, #21
 80098be:	4584      	cmp	ip, r0
 80098c0:	bf38      	it	cc
 80098c2:	2304      	movcc	r3, #4
 80098c4:	50ca      	str	r2, [r1, r3]
 80098c6:	b10a      	cbz	r2, 80098cc <__lshift+0xa4>
 80098c8:	f108 0602 	add.w	r6, r8, #2
 80098cc:	3e01      	subs	r6, #1
 80098ce:	4638      	mov	r0, r7
 80098d0:	612e      	str	r6, [r5, #16]
 80098d2:	4621      	mov	r1, r4
 80098d4:	f7ff fdd6 	bl	8009484 <_Bfree>
 80098d8:	4628      	mov	r0, r5
 80098da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098de:	f842 0f04 	str.w	r0, [r2, #4]!
 80098e2:	3301      	adds	r3, #1
 80098e4:	e7c5      	b.n	8009872 <__lshift+0x4a>
 80098e6:	3904      	subs	r1, #4
 80098e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80098f0:	459c      	cmp	ip, r3
 80098f2:	d8f9      	bhi.n	80098e8 <__lshift+0xc0>
 80098f4:	e7ea      	b.n	80098cc <__lshift+0xa4>
 80098f6:	bf00      	nop
 80098f8:	0800ae33 	.word	0x0800ae33
 80098fc:	0800ae44 	.word	0x0800ae44

08009900 <__mcmp>:
 8009900:	b530      	push	{r4, r5, lr}
 8009902:	6902      	ldr	r2, [r0, #16]
 8009904:	690c      	ldr	r4, [r1, #16]
 8009906:	1b12      	subs	r2, r2, r4
 8009908:	d10e      	bne.n	8009928 <__mcmp+0x28>
 800990a:	f100 0314 	add.w	r3, r0, #20
 800990e:	3114      	adds	r1, #20
 8009910:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009914:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009918:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800991c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009920:	42a5      	cmp	r5, r4
 8009922:	d003      	beq.n	800992c <__mcmp+0x2c>
 8009924:	d305      	bcc.n	8009932 <__mcmp+0x32>
 8009926:	2201      	movs	r2, #1
 8009928:	4610      	mov	r0, r2
 800992a:	bd30      	pop	{r4, r5, pc}
 800992c:	4283      	cmp	r3, r0
 800992e:	d3f3      	bcc.n	8009918 <__mcmp+0x18>
 8009930:	e7fa      	b.n	8009928 <__mcmp+0x28>
 8009932:	f04f 32ff 	mov.w	r2, #4294967295
 8009936:	e7f7      	b.n	8009928 <__mcmp+0x28>

08009938 <__mdiff>:
 8009938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	460c      	mov	r4, r1
 800993e:	4606      	mov	r6, r0
 8009940:	4611      	mov	r1, r2
 8009942:	4620      	mov	r0, r4
 8009944:	4617      	mov	r7, r2
 8009946:	f7ff ffdb 	bl	8009900 <__mcmp>
 800994a:	1e05      	subs	r5, r0, #0
 800994c:	d110      	bne.n	8009970 <__mdiff+0x38>
 800994e:	4629      	mov	r1, r5
 8009950:	4630      	mov	r0, r6
 8009952:	f7ff fd57 	bl	8009404 <_Balloc>
 8009956:	b930      	cbnz	r0, 8009966 <__mdiff+0x2e>
 8009958:	4b39      	ldr	r3, [pc, #228]	; (8009a40 <__mdiff+0x108>)
 800995a:	4602      	mov	r2, r0
 800995c:	f240 2132 	movw	r1, #562	; 0x232
 8009960:	4838      	ldr	r0, [pc, #224]	; (8009a44 <__mdiff+0x10c>)
 8009962:	f000 faf3 	bl	8009f4c <__assert_func>
 8009966:	2301      	movs	r3, #1
 8009968:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800996c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009970:	bfa4      	itt	ge
 8009972:	463b      	movge	r3, r7
 8009974:	4627      	movge	r7, r4
 8009976:	4630      	mov	r0, r6
 8009978:	6879      	ldr	r1, [r7, #4]
 800997a:	bfa6      	itte	ge
 800997c:	461c      	movge	r4, r3
 800997e:	2500      	movge	r5, #0
 8009980:	2501      	movlt	r5, #1
 8009982:	f7ff fd3f 	bl	8009404 <_Balloc>
 8009986:	b920      	cbnz	r0, 8009992 <__mdiff+0x5a>
 8009988:	4b2d      	ldr	r3, [pc, #180]	; (8009a40 <__mdiff+0x108>)
 800998a:	4602      	mov	r2, r0
 800998c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009990:	e7e6      	b.n	8009960 <__mdiff+0x28>
 8009992:	693e      	ldr	r6, [r7, #16]
 8009994:	60c5      	str	r5, [r0, #12]
 8009996:	6925      	ldr	r5, [r4, #16]
 8009998:	f107 0114 	add.w	r1, r7, #20
 800999c:	f104 0914 	add.w	r9, r4, #20
 80099a0:	f100 0e14 	add.w	lr, r0, #20
 80099a4:	f107 0210 	add.w	r2, r7, #16
 80099a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80099ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80099b0:	46f2      	mov	sl, lr
 80099b2:	2700      	movs	r7, #0
 80099b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80099b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099bc:	fa1f f883 	uxth.w	r8, r3
 80099c0:	fa17 f78b 	uxtah	r7, r7, fp
 80099c4:	0c1b      	lsrs	r3, r3, #16
 80099c6:	eba7 0808 	sub.w	r8, r7, r8
 80099ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099d2:	fa1f f888 	uxth.w	r8, r8
 80099d6:	141f      	asrs	r7, r3, #16
 80099d8:	454d      	cmp	r5, r9
 80099da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099de:	f84a 3b04 	str.w	r3, [sl], #4
 80099e2:	d8e7      	bhi.n	80099b4 <__mdiff+0x7c>
 80099e4:	1b2b      	subs	r3, r5, r4
 80099e6:	3b15      	subs	r3, #21
 80099e8:	f023 0303 	bic.w	r3, r3, #3
 80099ec:	3304      	adds	r3, #4
 80099ee:	3415      	adds	r4, #21
 80099f0:	42a5      	cmp	r5, r4
 80099f2:	bf38      	it	cc
 80099f4:	2304      	movcc	r3, #4
 80099f6:	4419      	add	r1, r3
 80099f8:	4473      	add	r3, lr
 80099fa:	469e      	mov	lr, r3
 80099fc:	460d      	mov	r5, r1
 80099fe:	4565      	cmp	r5, ip
 8009a00:	d30e      	bcc.n	8009a20 <__mdiff+0xe8>
 8009a02:	f10c 0203 	add.w	r2, ip, #3
 8009a06:	1a52      	subs	r2, r2, r1
 8009a08:	f022 0203 	bic.w	r2, r2, #3
 8009a0c:	3903      	subs	r1, #3
 8009a0e:	458c      	cmp	ip, r1
 8009a10:	bf38      	it	cc
 8009a12:	2200      	movcc	r2, #0
 8009a14:	441a      	add	r2, r3
 8009a16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a1a:	b17b      	cbz	r3, 8009a3c <__mdiff+0x104>
 8009a1c:	6106      	str	r6, [r0, #16]
 8009a1e:	e7a5      	b.n	800996c <__mdiff+0x34>
 8009a20:	f855 8b04 	ldr.w	r8, [r5], #4
 8009a24:	fa17 f488 	uxtah	r4, r7, r8
 8009a28:	1422      	asrs	r2, r4, #16
 8009a2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009a2e:	b2a4      	uxth	r4, r4
 8009a30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009a34:	f84e 4b04 	str.w	r4, [lr], #4
 8009a38:	1417      	asrs	r7, r2, #16
 8009a3a:	e7e0      	b.n	80099fe <__mdiff+0xc6>
 8009a3c:	3e01      	subs	r6, #1
 8009a3e:	e7ea      	b.n	8009a16 <__mdiff+0xde>
 8009a40:	0800ae33 	.word	0x0800ae33
 8009a44:	0800ae44 	.word	0x0800ae44

08009a48 <__d2b>:
 8009a48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a4c:	4689      	mov	r9, r1
 8009a4e:	2101      	movs	r1, #1
 8009a50:	ec57 6b10 	vmov	r6, r7, d0
 8009a54:	4690      	mov	r8, r2
 8009a56:	f7ff fcd5 	bl	8009404 <_Balloc>
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	b930      	cbnz	r0, 8009a6c <__d2b+0x24>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	4b25      	ldr	r3, [pc, #148]	; (8009af8 <__d2b+0xb0>)
 8009a62:	4826      	ldr	r0, [pc, #152]	; (8009afc <__d2b+0xb4>)
 8009a64:	f240 310a 	movw	r1, #778	; 0x30a
 8009a68:	f000 fa70 	bl	8009f4c <__assert_func>
 8009a6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a74:	bb35      	cbnz	r5, 8009ac4 <__d2b+0x7c>
 8009a76:	2e00      	cmp	r6, #0
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	d028      	beq.n	8009ace <__d2b+0x86>
 8009a7c:	4668      	mov	r0, sp
 8009a7e:	9600      	str	r6, [sp, #0]
 8009a80:	f7ff fd8c 	bl	800959c <__lo0bits>
 8009a84:	9900      	ldr	r1, [sp, #0]
 8009a86:	b300      	cbz	r0, 8009aca <__d2b+0x82>
 8009a88:	9a01      	ldr	r2, [sp, #4]
 8009a8a:	f1c0 0320 	rsb	r3, r0, #32
 8009a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a92:	430b      	orrs	r3, r1
 8009a94:	40c2      	lsrs	r2, r0
 8009a96:	6163      	str	r3, [r4, #20]
 8009a98:	9201      	str	r2, [sp, #4]
 8009a9a:	9b01      	ldr	r3, [sp, #4]
 8009a9c:	61a3      	str	r3, [r4, #24]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	bf14      	ite	ne
 8009aa2:	2202      	movne	r2, #2
 8009aa4:	2201      	moveq	r2, #1
 8009aa6:	6122      	str	r2, [r4, #16]
 8009aa8:	b1d5      	cbz	r5, 8009ae0 <__d2b+0x98>
 8009aaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009aae:	4405      	add	r5, r0
 8009ab0:	f8c9 5000 	str.w	r5, [r9]
 8009ab4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ab8:	f8c8 0000 	str.w	r0, [r8]
 8009abc:	4620      	mov	r0, r4
 8009abe:	b003      	add	sp, #12
 8009ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ac8:	e7d5      	b.n	8009a76 <__d2b+0x2e>
 8009aca:	6161      	str	r1, [r4, #20]
 8009acc:	e7e5      	b.n	8009a9a <__d2b+0x52>
 8009ace:	a801      	add	r0, sp, #4
 8009ad0:	f7ff fd64 	bl	800959c <__lo0bits>
 8009ad4:	9b01      	ldr	r3, [sp, #4]
 8009ad6:	6163      	str	r3, [r4, #20]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	6122      	str	r2, [r4, #16]
 8009adc:	3020      	adds	r0, #32
 8009ade:	e7e3      	b.n	8009aa8 <__d2b+0x60>
 8009ae0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ae4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ae8:	f8c9 0000 	str.w	r0, [r9]
 8009aec:	6918      	ldr	r0, [r3, #16]
 8009aee:	f7ff fd35 	bl	800955c <__hi0bits>
 8009af2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009af6:	e7df      	b.n	8009ab8 <__d2b+0x70>
 8009af8:	0800ae33 	.word	0x0800ae33
 8009afc:	0800ae44 	.word	0x0800ae44

08009b00 <_calloc_r>:
 8009b00:	b513      	push	{r0, r1, r4, lr}
 8009b02:	434a      	muls	r2, r1
 8009b04:	4611      	mov	r1, r2
 8009b06:	9201      	str	r2, [sp, #4]
 8009b08:	f000 f85a 	bl	8009bc0 <_malloc_r>
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	b118      	cbz	r0, 8009b18 <_calloc_r+0x18>
 8009b10:	9a01      	ldr	r2, [sp, #4]
 8009b12:	2100      	movs	r1, #0
 8009b14:	f7fe f93c 	bl	8007d90 <memset>
 8009b18:	4620      	mov	r0, r4
 8009b1a:	b002      	add	sp, #8
 8009b1c:	bd10      	pop	{r4, pc}
	...

08009b20 <_free_r>:
 8009b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b22:	2900      	cmp	r1, #0
 8009b24:	d048      	beq.n	8009bb8 <_free_r+0x98>
 8009b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b2a:	9001      	str	r0, [sp, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8009b32:	bfb8      	it	lt
 8009b34:	18e4      	addlt	r4, r4, r3
 8009b36:	f000 fa65 	bl	800a004 <__malloc_lock>
 8009b3a:	4a20      	ldr	r2, [pc, #128]	; (8009bbc <_free_r+0x9c>)
 8009b3c:	9801      	ldr	r0, [sp, #4]
 8009b3e:	6813      	ldr	r3, [r2, #0]
 8009b40:	4615      	mov	r5, r2
 8009b42:	b933      	cbnz	r3, 8009b52 <_free_r+0x32>
 8009b44:	6063      	str	r3, [r4, #4]
 8009b46:	6014      	str	r4, [r2, #0]
 8009b48:	b003      	add	sp, #12
 8009b4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b4e:	f000 ba5f 	b.w	800a010 <__malloc_unlock>
 8009b52:	42a3      	cmp	r3, r4
 8009b54:	d90b      	bls.n	8009b6e <_free_r+0x4e>
 8009b56:	6821      	ldr	r1, [r4, #0]
 8009b58:	1862      	adds	r2, r4, r1
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	bf04      	itt	eq
 8009b5e:	681a      	ldreq	r2, [r3, #0]
 8009b60:	685b      	ldreq	r3, [r3, #4]
 8009b62:	6063      	str	r3, [r4, #4]
 8009b64:	bf04      	itt	eq
 8009b66:	1852      	addeq	r2, r2, r1
 8009b68:	6022      	streq	r2, [r4, #0]
 8009b6a:	602c      	str	r4, [r5, #0]
 8009b6c:	e7ec      	b.n	8009b48 <_free_r+0x28>
 8009b6e:	461a      	mov	r2, r3
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	b10b      	cbz	r3, 8009b78 <_free_r+0x58>
 8009b74:	42a3      	cmp	r3, r4
 8009b76:	d9fa      	bls.n	8009b6e <_free_r+0x4e>
 8009b78:	6811      	ldr	r1, [r2, #0]
 8009b7a:	1855      	adds	r5, r2, r1
 8009b7c:	42a5      	cmp	r5, r4
 8009b7e:	d10b      	bne.n	8009b98 <_free_r+0x78>
 8009b80:	6824      	ldr	r4, [r4, #0]
 8009b82:	4421      	add	r1, r4
 8009b84:	1854      	adds	r4, r2, r1
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	6011      	str	r1, [r2, #0]
 8009b8a:	d1dd      	bne.n	8009b48 <_free_r+0x28>
 8009b8c:	681c      	ldr	r4, [r3, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	6053      	str	r3, [r2, #4]
 8009b92:	4421      	add	r1, r4
 8009b94:	6011      	str	r1, [r2, #0]
 8009b96:	e7d7      	b.n	8009b48 <_free_r+0x28>
 8009b98:	d902      	bls.n	8009ba0 <_free_r+0x80>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	6003      	str	r3, [r0, #0]
 8009b9e:	e7d3      	b.n	8009b48 <_free_r+0x28>
 8009ba0:	6825      	ldr	r5, [r4, #0]
 8009ba2:	1961      	adds	r1, r4, r5
 8009ba4:	428b      	cmp	r3, r1
 8009ba6:	bf04      	itt	eq
 8009ba8:	6819      	ldreq	r1, [r3, #0]
 8009baa:	685b      	ldreq	r3, [r3, #4]
 8009bac:	6063      	str	r3, [r4, #4]
 8009bae:	bf04      	itt	eq
 8009bb0:	1949      	addeq	r1, r1, r5
 8009bb2:	6021      	streq	r1, [r4, #0]
 8009bb4:	6054      	str	r4, [r2, #4]
 8009bb6:	e7c7      	b.n	8009b48 <_free_r+0x28>
 8009bb8:	b003      	add	sp, #12
 8009bba:	bd30      	pop	{r4, r5, pc}
 8009bbc:	20000230 	.word	0x20000230

08009bc0 <_malloc_r>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	1ccd      	adds	r5, r1, #3
 8009bc4:	f025 0503 	bic.w	r5, r5, #3
 8009bc8:	3508      	adds	r5, #8
 8009bca:	2d0c      	cmp	r5, #12
 8009bcc:	bf38      	it	cc
 8009bce:	250c      	movcc	r5, #12
 8009bd0:	2d00      	cmp	r5, #0
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	db01      	blt.n	8009bda <_malloc_r+0x1a>
 8009bd6:	42a9      	cmp	r1, r5
 8009bd8:	d903      	bls.n	8009be2 <_malloc_r+0x22>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	6033      	str	r3, [r6, #0]
 8009bde:	2000      	movs	r0, #0
 8009be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be2:	f000 fa0f 	bl	800a004 <__malloc_lock>
 8009be6:	4921      	ldr	r1, [pc, #132]	; (8009c6c <_malloc_r+0xac>)
 8009be8:	680a      	ldr	r2, [r1, #0]
 8009bea:	4614      	mov	r4, r2
 8009bec:	b99c      	cbnz	r4, 8009c16 <_malloc_r+0x56>
 8009bee:	4f20      	ldr	r7, [pc, #128]	; (8009c70 <_malloc_r+0xb0>)
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	b923      	cbnz	r3, 8009bfe <_malloc_r+0x3e>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f000 f998 	bl	8009f2c <_sbrk_r>
 8009bfc:	6038      	str	r0, [r7, #0]
 8009bfe:	4629      	mov	r1, r5
 8009c00:	4630      	mov	r0, r6
 8009c02:	f000 f993 	bl	8009f2c <_sbrk_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d123      	bne.n	8009c52 <_malloc_r+0x92>
 8009c0a:	230c      	movs	r3, #12
 8009c0c:	6033      	str	r3, [r6, #0]
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f000 f9fe 	bl	800a010 <__malloc_unlock>
 8009c14:	e7e3      	b.n	8009bde <_malloc_r+0x1e>
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	1b5b      	subs	r3, r3, r5
 8009c1a:	d417      	bmi.n	8009c4c <_malloc_r+0x8c>
 8009c1c:	2b0b      	cmp	r3, #11
 8009c1e:	d903      	bls.n	8009c28 <_malloc_r+0x68>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	441c      	add	r4, r3
 8009c24:	6025      	str	r5, [r4, #0]
 8009c26:	e004      	b.n	8009c32 <_malloc_r+0x72>
 8009c28:	6863      	ldr	r3, [r4, #4]
 8009c2a:	42a2      	cmp	r2, r4
 8009c2c:	bf0c      	ite	eq
 8009c2e:	600b      	streq	r3, [r1, #0]
 8009c30:	6053      	strne	r3, [r2, #4]
 8009c32:	4630      	mov	r0, r6
 8009c34:	f000 f9ec 	bl	800a010 <__malloc_unlock>
 8009c38:	f104 000b 	add.w	r0, r4, #11
 8009c3c:	1d23      	adds	r3, r4, #4
 8009c3e:	f020 0007 	bic.w	r0, r0, #7
 8009c42:	1ac2      	subs	r2, r0, r3
 8009c44:	d0cc      	beq.n	8009be0 <_malloc_r+0x20>
 8009c46:	1a1b      	subs	r3, r3, r0
 8009c48:	50a3      	str	r3, [r4, r2]
 8009c4a:	e7c9      	b.n	8009be0 <_malloc_r+0x20>
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	6864      	ldr	r4, [r4, #4]
 8009c50:	e7cc      	b.n	8009bec <_malloc_r+0x2c>
 8009c52:	1cc4      	adds	r4, r0, #3
 8009c54:	f024 0403 	bic.w	r4, r4, #3
 8009c58:	42a0      	cmp	r0, r4
 8009c5a:	d0e3      	beq.n	8009c24 <_malloc_r+0x64>
 8009c5c:	1a21      	subs	r1, r4, r0
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f000 f964 	bl	8009f2c <_sbrk_r>
 8009c64:	3001      	adds	r0, #1
 8009c66:	d1dd      	bne.n	8009c24 <_malloc_r+0x64>
 8009c68:	e7cf      	b.n	8009c0a <_malloc_r+0x4a>
 8009c6a:	bf00      	nop
 8009c6c:	20000230 	.word	0x20000230
 8009c70:	20000234 	.word	0x20000234

08009c74 <__ssputs_r>:
 8009c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c78:	688e      	ldr	r6, [r1, #8]
 8009c7a:	429e      	cmp	r6, r3
 8009c7c:	4682      	mov	sl, r0
 8009c7e:	460c      	mov	r4, r1
 8009c80:	4690      	mov	r8, r2
 8009c82:	461f      	mov	r7, r3
 8009c84:	d838      	bhi.n	8009cf8 <__ssputs_r+0x84>
 8009c86:	898a      	ldrh	r2, [r1, #12]
 8009c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c8c:	d032      	beq.n	8009cf4 <__ssputs_r+0x80>
 8009c8e:	6825      	ldr	r5, [r4, #0]
 8009c90:	6909      	ldr	r1, [r1, #16]
 8009c92:	eba5 0901 	sub.w	r9, r5, r1
 8009c96:	6965      	ldr	r5, [r4, #20]
 8009c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	444b      	add	r3, r9
 8009ca4:	106d      	asrs	r5, r5, #1
 8009ca6:	429d      	cmp	r5, r3
 8009ca8:	bf38      	it	cc
 8009caa:	461d      	movcc	r5, r3
 8009cac:	0553      	lsls	r3, r2, #21
 8009cae:	d531      	bpl.n	8009d14 <__ssputs_r+0xa0>
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	f7ff ff85 	bl	8009bc0 <_malloc_r>
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	b950      	cbnz	r0, 8009cd0 <__ssputs_r+0x5c>
 8009cba:	230c      	movs	r3, #12
 8009cbc:	f8ca 3000 	str.w	r3, [sl]
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc6:	81a3      	strh	r3, [r4, #12]
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd0:	6921      	ldr	r1, [r4, #16]
 8009cd2:	464a      	mov	r2, r9
 8009cd4:	f7ff fb88 	bl	80093e8 <memcpy>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	6126      	str	r6, [r4, #16]
 8009ce6:	6165      	str	r5, [r4, #20]
 8009ce8:	444e      	add	r6, r9
 8009cea:	eba5 0509 	sub.w	r5, r5, r9
 8009cee:	6026      	str	r6, [r4, #0]
 8009cf0:	60a5      	str	r5, [r4, #8]
 8009cf2:	463e      	mov	r6, r7
 8009cf4:	42be      	cmp	r6, r7
 8009cf6:	d900      	bls.n	8009cfa <__ssputs_r+0x86>
 8009cf8:	463e      	mov	r6, r7
 8009cfa:	4632      	mov	r2, r6
 8009cfc:	6820      	ldr	r0, [r4, #0]
 8009cfe:	4641      	mov	r1, r8
 8009d00:	f000 f966 	bl	8009fd0 <memmove>
 8009d04:	68a3      	ldr	r3, [r4, #8]
 8009d06:	6822      	ldr	r2, [r4, #0]
 8009d08:	1b9b      	subs	r3, r3, r6
 8009d0a:	4432      	add	r2, r6
 8009d0c:	60a3      	str	r3, [r4, #8]
 8009d0e:	6022      	str	r2, [r4, #0]
 8009d10:	2000      	movs	r0, #0
 8009d12:	e7db      	b.n	8009ccc <__ssputs_r+0x58>
 8009d14:	462a      	mov	r2, r5
 8009d16:	f000 f981 	bl	800a01c <_realloc_r>
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d1e1      	bne.n	8009ce4 <__ssputs_r+0x70>
 8009d20:	6921      	ldr	r1, [r4, #16]
 8009d22:	4650      	mov	r0, sl
 8009d24:	f7ff fefc 	bl	8009b20 <_free_r>
 8009d28:	e7c7      	b.n	8009cba <__ssputs_r+0x46>
	...

08009d2c <_svfiprintf_r>:
 8009d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	4698      	mov	r8, r3
 8009d32:	898b      	ldrh	r3, [r1, #12]
 8009d34:	061b      	lsls	r3, r3, #24
 8009d36:	b09d      	sub	sp, #116	; 0x74
 8009d38:	4607      	mov	r7, r0
 8009d3a:	460d      	mov	r5, r1
 8009d3c:	4614      	mov	r4, r2
 8009d3e:	d50e      	bpl.n	8009d5e <_svfiprintf_r+0x32>
 8009d40:	690b      	ldr	r3, [r1, #16]
 8009d42:	b963      	cbnz	r3, 8009d5e <_svfiprintf_r+0x32>
 8009d44:	2140      	movs	r1, #64	; 0x40
 8009d46:	f7ff ff3b 	bl	8009bc0 <_malloc_r>
 8009d4a:	6028      	str	r0, [r5, #0]
 8009d4c:	6128      	str	r0, [r5, #16]
 8009d4e:	b920      	cbnz	r0, 8009d5a <_svfiprintf_r+0x2e>
 8009d50:	230c      	movs	r3, #12
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295
 8009d58:	e0d1      	b.n	8009efe <_svfiprintf_r+0x1d2>
 8009d5a:	2340      	movs	r3, #64	; 0x40
 8009d5c:	616b      	str	r3, [r5, #20]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	9309      	str	r3, [sp, #36]	; 0x24
 8009d62:	2320      	movs	r3, #32
 8009d64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d6c:	2330      	movs	r3, #48	; 0x30
 8009d6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f18 <_svfiprintf_r+0x1ec>
 8009d72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d76:	f04f 0901 	mov.w	r9, #1
 8009d7a:	4623      	mov	r3, r4
 8009d7c:	469a      	mov	sl, r3
 8009d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d82:	b10a      	cbz	r2, 8009d88 <_svfiprintf_r+0x5c>
 8009d84:	2a25      	cmp	r2, #37	; 0x25
 8009d86:	d1f9      	bne.n	8009d7c <_svfiprintf_r+0x50>
 8009d88:	ebba 0b04 	subs.w	fp, sl, r4
 8009d8c:	d00b      	beq.n	8009da6 <_svfiprintf_r+0x7a>
 8009d8e:	465b      	mov	r3, fp
 8009d90:	4622      	mov	r2, r4
 8009d92:	4629      	mov	r1, r5
 8009d94:	4638      	mov	r0, r7
 8009d96:	f7ff ff6d 	bl	8009c74 <__ssputs_r>
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f000 80aa 	beq.w	8009ef4 <_svfiprintf_r+0x1c8>
 8009da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009da2:	445a      	add	r2, fp
 8009da4:	9209      	str	r2, [sp, #36]	; 0x24
 8009da6:	f89a 3000 	ldrb.w	r3, [sl]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 80a2 	beq.w	8009ef4 <_svfiprintf_r+0x1c8>
 8009db0:	2300      	movs	r3, #0
 8009db2:	f04f 32ff 	mov.w	r2, #4294967295
 8009db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dba:	f10a 0a01 	add.w	sl, sl, #1
 8009dbe:	9304      	str	r3, [sp, #16]
 8009dc0:	9307      	str	r3, [sp, #28]
 8009dc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8009dc8:	4654      	mov	r4, sl
 8009dca:	2205      	movs	r2, #5
 8009dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd0:	4851      	ldr	r0, [pc, #324]	; (8009f18 <_svfiprintf_r+0x1ec>)
 8009dd2:	f7f6 fa05 	bl	80001e0 <memchr>
 8009dd6:	9a04      	ldr	r2, [sp, #16]
 8009dd8:	b9d8      	cbnz	r0, 8009e12 <_svfiprintf_r+0xe6>
 8009dda:	06d0      	lsls	r0, r2, #27
 8009ddc:	bf44      	itt	mi
 8009dde:	2320      	movmi	r3, #32
 8009de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de4:	0711      	lsls	r1, r2, #28
 8009de6:	bf44      	itt	mi
 8009de8:	232b      	movmi	r3, #43	; 0x2b
 8009dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dee:	f89a 3000 	ldrb.w	r3, [sl]
 8009df2:	2b2a      	cmp	r3, #42	; 0x2a
 8009df4:	d015      	beq.n	8009e22 <_svfiprintf_r+0xf6>
 8009df6:	9a07      	ldr	r2, [sp, #28]
 8009df8:	4654      	mov	r4, sl
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	f04f 0c0a 	mov.w	ip, #10
 8009e00:	4621      	mov	r1, r4
 8009e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e06:	3b30      	subs	r3, #48	; 0x30
 8009e08:	2b09      	cmp	r3, #9
 8009e0a:	d94e      	bls.n	8009eaa <_svfiprintf_r+0x17e>
 8009e0c:	b1b0      	cbz	r0, 8009e3c <_svfiprintf_r+0x110>
 8009e0e:	9207      	str	r2, [sp, #28]
 8009e10:	e014      	b.n	8009e3c <_svfiprintf_r+0x110>
 8009e12:	eba0 0308 	sub.w	r3, r0, r8
 8009e16:	fa09 f303 	lsl.w	r3, r9, r3
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	9304      	str	r3, [sp, #16]
 8009e1e:	46a2      	mov	sl, r4
 8009e20:	e7d2      	b.n	8009dc8 <_svfiprintf_r+0x9c>
 8009e22:	9b03      	ldr	r3, [sp, #12]
 8009e24:	1d19      	adds	r1, r3, #4
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	9103      	str	r1, [sp, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	bfbb      	ittet	lt
 8009e2e:	425b      	neglt	r3, r3
 8009e30:	f042 0202 	orrlt.w	r2, r2, #2
 8009e34:	9307      	strge	r3, [sp, #28]
 8009e36:	9307      	strlt	r3, [sp, #28]
 8009e38:	bfb8      	it	lt
 8009e3a:	9204      	strlt	r2, [sp, #16]
 8009e3c:	7823      	ldrb	r3, [r4, #0]
 8009e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e40:	d10c      	bne.n	8009e5c <_svfiprintf_r+0x130>
 8009e42:	7863      	ldrb	r3, [r4, #1]
 8009e44:	2b2a      	cmp	r3, #42	; 0x2a
 8009e46:	d135      	bne.n	8009eb4 <_svfiprintf_r+0x188>
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	1d1a      	adds	r2, r3, #4
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	9203      	str	r2, [sp, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	bfb8      	it	lt
 8009e54:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e58:	3402      	adds	r4, #2
 8009e5a:	9305      	str	r3, [sp, #20]
 8009e5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f28 <_svfiprintf_r+0x1fc>
 8009e60:	7821      	ldrb	r1, [r4, #0]
 8009e62:	2203      	movs	r2, #3
 8009e64:	4650      	mov	r0, sl
 8009e66:	f7f6 f9bb 	bl	80001e0 <memchr>
 8009e6a:	b140      	cbz	r0, 8009e7e <_svfiprintf_r+0x152>
 8009e6c:	2340      	movs	r3, #64	; 0x40
 8009e6e:	eba0 000a 	sub.w	r0, r0, sl
 8009e72:	fa03 f000 	lsl.w	r0, r3, r0
 8009e76:	9b04      	ldr	r3, [sp, #16]
 8009e78:	4303      	orrs	r3, r0
 8009e7a:	3401      	adds	r4, #1
 8009e7c:	9304      	str	r3, [sp, #16]
 8009e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e82:	4826      	ldr	r0, [pc, #152]	; (8009f1c <_svfiprintf_r+0x1f0>)
 8009e84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e88:	2206      	movs	r2, #6
 8009e8a:	f7f6 f9a9 	bl	80001e0 <memchr>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d038      	beq.n	8009f04 <_svfiprintf_r+0x1d8>
 8009e92:	4b23      	ldr	r3, [pc, #140]	; (8009f20 <_svfiprintf_r+0x1f4>)
 8009e94:	bb1b      	cbnz	r3, 8009ede <_svfiprintf_r+0x1b2>
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	3307      	adds	r3, #7
 8009e9a:	f023 0307 	bic.w	r3, r3, #7
 8009e9e:	3308      	adds	r3, #8
 8009ea0:	9303      	str	r3, [sp, #12]
 8009ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea4:	4433      	add	r3, r6
 8009ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea8:	e767      	b.n	8009d7a <_svfiprintf_r+0x4e>
 8009eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eae:	460c      	mov	r4, r1
 8009eb0:	2001      	movs	r0, #1
 8009eb2:	e7a5      	b.n	8009e00 <_svfiprintf_r+0xd4>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	3401      	adds	r4, #1
 8009eb8:	9305      	str	r3, [sp, #20]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	f04f 0c0a 	mov.w	ip, #10
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec6:	3a30      	subs	r2, #48	; 0x30
 8009ec8:	2a09      	cmp	r2, #9
 8009eca:	d903      	bls.n	8009ed4 <_svfiprintf_r+0x1a8>
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d0c5      	beq.n	8009e5c <_svfiprintf_r+0x130>
 8009ed0:	9105      	str	r1, [sp, #20]
 8009ed2:	e7c3      	b.n	8009e5c <_svfiprintf_r+0x130>
 8009ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ed8:	4604      	mov	r4, r0
 8009eda:	2301      	movs	r3, #1
 8009edc:	e7f0      	b.n	8009ec0 <_svfiprintf_r+0x194>
 8009ede:	ab03      	add	r3, sp, #12
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	462a      	mov	r2, r5
 8009ee4:	4b0f      	ldr	r3, [pc, #60]	; (8009f24 <_svfiprintf_r+0x1f8>)
 8009ee6:	a904      	add	r1, sp, #16
 8009ee8:	4638      	mov	r0, r7
 8009eea:	f7fd fff9 	bl	8007ee0 <_printf_float>
 8009eee:	1c42      	adds	r2, r0, #1
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	d1d6      	bne.n	8009ea2 <_svfiprintf_r+0x176>
 8009ef4:	89ab      	ldrh	r3, [r5, #12]
 8009ef6:	065b      	lsls	r3, r3, #25
 8009ef8:	f53f af2c 	bmi.w	8009d54 <_svfiprintf_r+0x28>
 8009efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009efe:	b01d      	add	sp, #116	; 0x74
 8009f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f04:	ab03      	add	r3, sp, #12
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	462a      	mov	r2, r5
 8009f0a:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <_svfiprintf_r+0x1f8>)
 8009f0c:	a904      	add	r1, sp, #16
 8009f0e:	4638      	mov	r0, r7
 8009f10:	f7fe fa8a 	bl	8008428 <_printf_i>
 8009f14:	e7eb      	b.n	8009eee <_svfiprintf_r+0x1c2>
 8009f16:	bf00      	nop
 8009f18:	0800afa4 	.word	0x0800afa4
 8009f1c:	0800afae 	.word	0x0800afae
 8009f20:	08007ee1 	.word	0x08007ee1
 8009f24:	08009c75 	.word	0x08009c75
 8009f28:	0800afaa 	.word	0x0800afaa

08009f2c <_sbrk_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4d06      	ldr	r5, [pc, #24]	; (8009f48 <_sbrk_r+0x1c>)
 8009f30:	2300      	movs	r3, #0
 8009f32:	4604      	mov	r4, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	602b      	str	r3, [r5, #0]
 8009f38:	f7f8 f906 	bl	8002148 <_sbrk>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_sbrk_r+0x1a>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_sbrk_r+0x1a>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20000694 	.word	0x20000694

08009f4c <__assert_func>:
 8009f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f4e:	4614      	mov	r4, r2
 8009f50:	461a      	mov	r2, r3
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <__assert_func+0x2c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4605      	mov	r5, r0
 8009f58:	68d8      	ldr	r0, [r3, #12]
 8009f5a:	b14c      	cbz	r4, 8009f70 <__assert_func+0x24>
 8009f5c:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <__assert_func+0x30>)
 8009f5e:	9100      	str	r1, [sp, #0]
 8009f60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f64:	4906      	ldr	r1, [pc, #24]	; (8009f80 <__assert_func+0x34>)
 8009f66:	462b      	mov	r3, r5
 8009f68:	f000 f80e 	bl	8009f88 <fiprintf>
 8009f6c:	f000 faa4 	bl	800a4b8 <abort>
 8009f70:	4b04      	ldr	r3, [pc, #16]	; (8009f84 <__assert_func+0x38>)
 8009f72:	461c      	mov	r4, r3
 8009f74:	e7f3      	b.n	8009f5e <__assert_func+0x12>
 8009f76:	bf00      	nop
 8009f78:	20000010 	.word	0x20000010
 8009f7c:	0800afb5 	.word	0x0800afb5
 8009f80:	0800afc2 	.word	0x0800afc2
 8009f84:	0800aff0 	.word	0x0800aff0

08009f88 <fiprintf>:
 8009f88:	b40e      	push	{r1, r2, r3}
 8009f8a:	b503      	push	{r0, r1, lr}
 8009f8c:	4601      	mov	r1, r0
 8009f8e:	ab03      	add	r3, sp, #12
 8009f90:	4805      	ldr	r0, [pc, #20]	; (8009fa8 <fiprintf+0x20>)
 8009f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f96:	6800      	ldr	r0, [r0, #0]
 8009f98:	9301      	str	r3, [sp, #4]
 8009f9a:	f000 f88f 	bl	800a0bc <_vfiprintf_r>
 8009f9e:	b002      	add	sp, #8
 8009fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa4:	b003      	add	sp, #12
 8009fa6:	4770      	bx	lr
 8009fa8:	20000010 	.word	0x20000010

08009fac <__ascii_mbtowc>:
 8009fac:	b082      	sub	sp, #8
 8009fae:	b901      	cbnz	r1, 8009fb2 <__ascii_mbtowc+0x6>
 8009fb0:	a901      	add	r1, sp, #4
 8009fb2:	b142      	cbz	r2, 8009fc6 <__ascii_mbtowc+0x1a>
 8009fb4:	b14b      	cbz	r3, 8009fca <__ascii_mbtowc+0x1e>
 8009fb6:	7813      	ldrb	r3, [r2, #0]
 8009fb8:	600b      	str	r3, [r1, #0]
 8009fba:	7812      	ldrb	r2, [r2, #0]
 8009fbc:	1e10      	subs	r0, r2, #0
 8009fbe:	bf18      	it	ne
 8009fc0:	2001      	movne	r0, #1
 8009fc2:	b002      	add	sp, #8
 8009fc4:	4770      	bx	lr
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	e7fb      	b.n	8009fc2 <__ascii_mbtowc+0x16>
 8009fca:	f06f 0001 	mvn.w	r0, #1
 8009fce:	e7f8      	b.n	8009fc2 <__ascii_mbtowc+0x16>

08009fd0 <memmove>:
 8009fd0:	4288      	cmp	r0, r1
 8009fd2:	b510      	push	{r4, lr}
 8009fd4:	eb01 0402 	add.w	r4, r1, r2
 8009fd8:	d902      	bls.n	8009fe0 <memmove+0x10>
 8009fda:	4284      	cmp	r4, r0
 8009fdc:	4623      	mov	r3, r4
 8009fde:	d807      	bhi.n	8009ff0 <memmove+0x20>
 8009fe0:	1e43      	subs	r3, r0, #1
 8009fe2:	42a1      	cmp	r1, r4
 8009fe4:	d008      	beq.n	8009ff8 <memmove+0x28>
 8009fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fee:	e7f8      	b.n	8009fe2 <memmove+0x12>
 8009ff0:	4402      	add	r2, r0
 8009ff2:	4601      	mov	r1, r0
 8009ff4:	428a      	cmp	r2, r1
 8009ff6:	d100      	bne.n	8009ffa <memmove+0x2a>
 8009ff8:	bd10      	pop	{r4, pc}
 8009ffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a002:	e7f7      	b.n	8009ff4 <memmove+0x24>

0800a004 <__malloc_lock>:
 800a004:	4801      	ldr	r0, [pc, #4]	; (800a00c <__malloc_lock+0x8>)
 800a006:	f000 bc17 	b.w	800a838 <__retarget_lock_acquire_recursive>
 800a00a:	bf00      	nop
 800a00c:	2000069c 	.word	0x2000069c

0800a010 <__malloc_unlock>:
 800a010:	4801      	ldr	r0, [pc, #4]	; (800a018 <__malloc_unlock+0x8>)
 800a012:	f000 bc12 	b.w	800a83a <__retarget_lock_release_recursive>
 800a016:	bf00      	nop
 800a018:	2000069c 	.word	0x2000069c

0800a01c <_realloc_r>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	4607      	mov	r7, r0
 800a020:	4614      	mov	r4, r2
 800a022:	460e      	mov	r6, r1
 800a024:	b921      	cbnz	r1, 800a030 <_realloc_r+0x14>
 800a026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a02a:	4611      	mov	r1, r2
 800a02c:	f7ff bdc8 	b.w	8009bc0 <_malloc_r>
 800a030:	b922      	cbnz	r2, 800a03c <_realloc_r+0x20>
 800a032:	f7ff fd75 	bl	8009b20 <_free_r>
 800a036:	4625      	mov	r5, r4
 800a038:	4628      	mov	r0, r5
 800a03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a03c:	f000 fc62 	bl	800a904 <_malloc_usable_size_r>
 800a040:	42a0      	cmp	r0, r4
 800a042:	d20f      	bcs.n	800a064 <_realloc_r+0x48>
 800a044:	4621      	mov	r1, r4
 800a046:	4638      	mov	r0, r7
 800a048:	f7ff fdba 	bl	8009bc0 <_malloc_r>
 800a04c:	4605      	mov	r5, r0
 800a04e:	2800      	cmp	r0, #0
 800a050:	d0f2      	beq.n	800a038 <_realloc_r+0x1c>
 800a052:	4631      	mov	r1, r6
 800a054:	4622      	mov	r2, r4
 800a056:	f7ff f9c7 	bl	80093e8 <memcpy>
 800a05a:	4631      	mov	r1, r6
 800a05c:	4638      	mov	r0, r7
 800a05e:	f7ff fd5f 	bl	8009b20 <_free_r>
 800a062:	e7e9      	b.n	800a038 <_realloc_r+0x1c>
 800a064:	4635      	mov	r5, r6
 800a066:	e7e7      	b.n	800a038 <_realloc_r+0x1c>

0800a068 <__sfputc_r>:
 800a068:	6893      	ldr	r3, [r2, #8]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	b410      	push	{r4}
 800a070:	6093      	str	r3, [r2, #8]
 800a072:	da08      	bge.n	800a086 <__sfputc_r+0x1e>
 800a074:	6994      	ldr	r4, [r2, #24]
 800a076:	42a3      	cmp	r3, r4
 800a078:	db01      	blt.n	800a07e <__sfputc_r+0x16>
 800a07a:	290a      	cmp	r1, #10
 800a07c:	d103      	bne.n	800a086 <__sfputc_r+0x1e>
 800a07e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a082:	f000 b94b 	b.w	800a31c <__swbuf_r>
 800a086:	6813      	ldr	r3, [r2, #0]
 800a088:	1c58      	adds	r0, r3, #1
 800a08a:	6010      	str	r0, [r2, #0]
 800a08c:	7019      	strb	r1, [r3, #0]
 800a08e:	4608      	mov	r0, r1
 800a090:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <__sfputs_r>:
 800a096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a098:	4606      	mov	r6, r0
 800a09a:	460f      	mov	r7, r1
 800a09c:	4614      	mov	r4, r2
 800a09e:	18d5      	adds	r5, r2, r3
 800a0a0:	42ac      	cmp	r4, r5
 800a0a2:	d101      	bne.n	800a0a8 <__sfputs_r+0x12>
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	e007      	b.n	800a0b8 <__sfputs_r+0x22>
 800a0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ac:	463a      	mov	r2, r7
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f7ff ffda 	bl	800a068 <__sfputc_r>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d1f3      	bne.n	800a0a0 <__sfputs_r+0xa>
 800a0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0bc <_vfiprintf_r>:
 800a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	b09d      	sub	sp, #116	; 0x74
 800a0c4:	4614      	mov	r4, r2
 800a0c6:	4698      	mov	r8, r3
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	b118      	cbz	r0, 800a0d4 <_vfiprintf_r+0x18>
 800a0cc:	6983      	ldr	r3, [r0, #24]
 800a0ce:	b90b      	cbnz	r3, 800a0d4 <_vfiprintf_r+0x18>
 800a0d0:	f000 fb14 	bl	800a6fc <__sinit>
 800a0d4:	4b89      	ldr	r3, [pc, #548]	; (800a2fc <_vfiprintf_r+0x240>)
 800a0d6:	429d      	cmp	r5, r3
 800a0d8:	d11b      	bne.n	800a112 <_vfiprintf_r+0x56>
 800a0da:	6875      	ldr	r5, [r6, #4]
 800a0dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0de:	07d9      	lsls	r1, r3, #31
 800a0e0:	d405      	bmi.n	800a0ee <_vfiprintf_r+0x32>
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	059a      	lsls	r2, r3, #22
 800a0e6:	d402      	bmi.n	800a0ee <_vfiprintf_r+0x32>
 800a0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ea:	f000 fba5 	bl	800a838 <__retarget_lock_acquire_recursive>
 800a0ee:	89ab      	ldrh	r3, [r5, #12]
 800a0f0:	071b      	lsls	r3, r3, #28
 800a0f2:	d501      	bpl.n	800a0f8 <_vfiprintf_r+0x3c>
 800a0f4:	692b      	ldr	r3, [r5, #16]
 800a0f6:	b9eb      	cbnz	r3, 800a134 <_vfiprintf_r+0x78>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f000 f96e 	bl	800a3dc <__swsetup_r>
 800a100:	b1c0      	cbz	r0, 800a134 <_vfiprintf_r+0x78>
 800a102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a104:	07dc      	lsls	r4, r3, #31
 800a106:	d50e      	bpl.n	800a126 <_vfiprintf_r+0x6a>
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	b01d      	add	sp, #116	; 0x74
 800a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a112:	4b7b      	ldr	r3, [pc, #492]	; (800a300 <_vfiprintf_r+0x244>)
 800a114:	429d      	cmp	r5, r3
 800a116:	d101      	bne.n	800a11c <_vfiprintf_r+0x60>
 800a118:	68b5      	ldr	r5, [r6, #8]
 800a11a:	e7df      	b.n	800a0dc <_vfiprintf_r+0x20>
 800a11c:	4b79      	ldr	r3, [pc, #484]	; (800a304 <_vfiprintf_r+0x248>)
 800a11e:	429d      	cmp	r5, r3
 800a120:	bf08      	it	eq
 800a122:	68f5      	ldreq	r5, [r6, #12]
 800a124:	e7da      	b.n	800a0dc <_vfiprintf_r+0x20>
 800a126:	89ab      	ldrh	r3, [r5, #12]
 800a128:	0598      	lsls	r0, r3, #22
 800a12a:	d4ed      	bmi.n	800a108 <_vfiprintf_r+0x4c>
 800a12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a12e:	f000 fb84 	bl	800a83a <__retarget_lock_release_recursive>
 800a132:	e7e9      	b.n	800a108 <_vfiprintf_r+0x4c>
 800a134:	2300      	movs	r3, #0
 800a136:	9309      	str	r3, [sp, #36]	; 0x24
 800a138:	2320      	movs	r3, #32
 800a13a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a13e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a142:	2330      	movs	r3, #48	; 0x30
 800a144:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a308 <_vfiprintf_r+0x24c>
 800a148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a14c:	f04f 0901 	mov.w	r9, #1
 800a150:	4623      	mov	r3, r4
 800a152:	469a      	mov	sl, r3
 800a154:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a158:	b10a      	cbz	r2, 800a15e <_vfiprintf_r+0xa2>
 800a15a:	2a25      	cmp	r2, #37	; 0x25
 800a15c:	d1f9      	bne.n	800a152 <_vfiprintf_r+0x96>
 800a15e:	ebba 0b04 	subs.w	fp, sl, r4
 800a162:	d00b      	beq.n	800a17c <_vfiprintf_r+0xc0>
 800a164:	465b      	mov	r3, fp
 800a166:	4622      	mov	r2, r4
 800a168:	4629      	mov	r1, r5
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7ff ff93 	bl	800a096 <__sfputs_r>
 800a170:	3001      	adds	r0, #1
 800a172:	f000 80aa 	beq.w	800a2ca <_vfiprintf_r+0x20e>
 800a176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a178:	445a      	add	r2, fp
 800a17a:	9209      	str	r2, [sp, #36]	; 0x24
 800a17c:	f89a 3000 	ldrb.w	r3, [sl]
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 80a2 	beq.w	800a2ca <_vfiprintf_r+0x20e>
 800a186:	2300      	movs	r3, #0
 800a188:	f04f 32ff 	mov.w	r2, #4294967295
 800a18c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a190:	f10a 0a01 	add.w	sl, sl, #1
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	9307      	str	r3, [sp, #28]
 800a198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a19c:	931a      	str	r3, [sp, #104]	; 0x68
 800a19e:	4654      	mov	r4, sl
 800a1a0:	2205      	movs	r2, #5
 800a1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a6:	4858      	ldr	r0, [pc, #352]	; (800a308 <_vfiprintf_r+0x24c>)
 800a1a8:	f7f6 f81a 	bl	80001e0 <memchr>
 800a1ac:	9a04      	ldr	r2, [sp, #16]
 800a1ae:	b9d8      	cbnz	r0, 800a1e8 <_vfiprintf_r+0x12c>
 800a1b0:	06d1      	lsls	r1, r2, #27
 800a1b2:	bf44      	itt	mi
 800a1b4:	2320      	movmi	r3, #32
 800a1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ba:	0713      	lsls	r3, r2, #28
 800a1bc:	bf44      	itt	mi
 800a1be:	232b      	movmi	r3, #43	; 0x2b
 800a1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ca:	d015      	beq.n	800a1f8 <_vfiprintf_r+0x13c>
 800a1cc:	9a07      	ldr	r2, [sp, #28]
 800a1ce:	4654      	mov	r4, sl
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	f04f 0c0a 	mov.w	ip, #10
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1dc:	3b30      	subs	r3, #48	; 0x30
 800a1de:	2b09      	cmp	r3, #9
 800a1e0:	d94e      	bls.n	800a280 <_vfiprintf_r+0x1c4>
 800a1e2:	b1b0      	cbz	r0, 800a212 <_vfiprintf_r+0x156>
 800a1e4:	9207      	str	r2, [sp, #28]
 800a1e6:	e014      	b.n	800a212 <_vfiprintf_r+0x156>
 800a1e8:	eba0 0308 	sub.w	r3, r0, r8
 800a1ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	46a2      	mov	sl, r4
 800a1f6:	e7d2      	b.n	800a19e <_vfiprintf_r+0xe2>
 800a1f8:	9b03      	ldr	r3, [sp, #12]
 800a1fa:	1d19      	adds	r1, r3, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	9103      	str	r1, [sp, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	bfbb      	ittet	lt
 800a204:	425b      	neglt	r3, r3
 800a206:	f042 0202 	orrlt.w	r2, r2, #2
 800a20a:	9307      	strge	r3, [sp, #28]
 800a20c:	9307      	strlt	r3, [sp, #28]
 800a20e:	bfb8      	it	lt
 800a210:	9204      	strlt	r2, [sp, #16]
 800a212:	7823      	ldrb	r3, [r4, #0]
 800a214:	2b2e      	cmp	r3, #46	; 0x2e
 800a216:	d10c      	bne.n	800a232 <_vfiprintf_r+0x176>
 800a218:	7863      	ldrb	r3, [r4, #1]
 800a21a:	2b2a      	cmp	r3, #42	; 0x2a
 800a21c:	d135      	bne.n	800a28a <_vfiprintf_r+0x1ce>
 800a21e:	9b03      	ldr	r3, [sp, #12]
 800a220:	1d1a      	adds	r2, r3, #4
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	9203      	str	r2, [sp, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	bfb8      	it	lt
 800a22a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a22e:	3402      	adds	r4, #2
 800a230:	9305      	str	r3, [sp, #20]
 800a232:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a318 <_vfiprintf_r+0x25c>
 800a236:	7821      	ldrb	r1, [r4, #0]
 800a238:	2203      	movs	r2, #3
 800a23a:	4650      	mov	r0, sl
 800a23c:	f7f5 ffd0 	bl	80001e0 <memchr>
 800a240:	b140      	cbz	r0, 800a254 <_vfiprintf_r+0x198>
 800a242:	2340      	movs	r3, #64	; 0x40
 800a244:	eba0 000a 	sub.w	r0, r0, sl
 800a248:	fa03 f000 	lsl.w	r0, r3, r0
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	4303      	orrs	r3, r0
 800a250:	3401      	adds	r4, #1
 800a252:	9304      	str	r3, [sp, #16]
 800a254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a258:	482c      	ldr	r0, [pc, #176]	; (800a30c <_vfiprintf_r+0x250>)
 800a25a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a25e:	2206      	movs	r2, #6
 800a260:	f7f5 ffbe 	bl	80001e0 <memchr>
 800a264:	2800      	cmp	r0, #0
 800a266:	d03f      	beq.n	800a2e8 <_vfiprintf_r+0x22c>
 800a268:	4b29      	ldr	r3, [pc, #164]	; (800a310 <_vfiprintf_r+0x254>)
 800a26a:	bb1b      	cbnz	r3, 800a2b4 <_vfiprintf_r+0x1f8>
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	3307      	adds	r3, #7
 800a270:	f023 0307 	bic.w	r3, r3, #7
 800a274:	3308      	adds	r3, #8
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27a:	443b      	add	r3, r7
 800a27c:	9309      	str	r3, [sp, #36]	; 0x24
 800a27e:	e767      	b.n	800a150 <_vfiprintf_r+0x94>
 800a280:	fb0c 3202 	mla	r2, ip, r2, r3
 800a284:	460c      	mov	r4, r1
 800a286:	2001      	movs	r0, #1
 800a288:	e7a5      	b.n	800a1d6 <_vfiprintf_r+0x11a>
 800a28a:	2300      	movs	r3, #0
 800a28c:	3401      	adds	r4, #1
 800a28e:	9305      	str	r3, [sp, #20]
 800a290:	4619      	mov	r1, r3
 800a292:	f04f 0c0a 	mov.w	ip, #10
 800a296:	4620      	mov	r0, r4
 800a298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a29c:	3a30      	subs	r2, #48	; 0x30
 800a29e:	2a09      	cmp	r2, #9
 800a2a0:	d903      	bls.n	800a2aa <_vfiprintf_r+0x1ee>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d0c5      	beq.n	800a232 <_vfiprintf_r+0x176>
 800a2a6:	9105      	str	r1, [sp, #20]
 800a2a8:	e7c3      	b.n	800a232 <_vfiprintf_r+0x176>
 800a2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e7f0      	b.n	800a296 <_vfiprintf_r+0x1da>
 800a2b4:	ab03      	add	r3, sp, #12
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	462a      	mov	r2, r5
 800a2ba:	4b16      	ldr	r3, [pc, #88]	; (800a314 <_vfiprintf_r+0x258>)
 800a2bc:	a904      	add	r1, sp, #16
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f7fd fe0e 	bl	8007ee0 <_printf_float>
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	1c78      	adds	r0, r7, #1
 800a2c8:	d1d6      	bne.n	800a278 <_vfiprintf_r+0x1bc>
 800a2ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2cc:	07d9      	lsls	r1, r3, #31
 800a2ce:	d405      	bmi.n	800a2dc <_vfiprintf_r+0x220>
 800a2d0:	89ab      	ldrh	r3, [r5, #12]
 800a2d2:	059a      	lsls	r2, r3, #22
 800a2d4:	d402      	bmi.n	800a2dc <_vfiprintf_r+0x220>
 800a2d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2d8:	f000 faaf 	bl	800a83a <__retarget_lock_release_recursive>
 800a2dc:	89ab      	ldrh	r3, [r5, #12]
 800a2de:	065b      	lsls	r3, r3, #25
 800a2e0:	f53f af12 	bmi.w	800a108 <_vfiprintf_r+0x4c>
 800a2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2e6:	e711      	b.n	800a10c <_vfiprintf_r+0x50>
 800a2e8:	ab03      	add	r3, sp, #12
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	4b09      	ldr	r3, [pc, #36]	; (800a314 <_vfiprintf_r+0x258>)
 800a2f0:	a904      	add	r1, sp, #16
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7fe f898 	bl	8008428 <_printf_i>
 800a2f8:	e7e4      	b.n	800a2c4 <_vfiprintf_r+0x208>
 800a2fa:	bf00      	nop
 800a2fc:	0800b11c 	.word	0x0800b11c
 800a300:	0800b13c 	.word	0x0800b13c
 800a304:	0800b0fc 	.word	0x0800b0fc
 800a308:	0800afa4 	.word	0x0800afa4
 800a30c:	0800afae 	.word	0x0800afae
 800a310:	08007ee1 	.word	0x08007ee1
 800a314:	0800a097 	.word	0x0800a097
 800a318:	0800afaa 	.word	0x0800afaa

0800a31c <__swbuf_r>:
 800a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31e:	460e      	mov	r6, r1
 800a320:	4614      	mov	r4, r2
 800a322:	4605      	mov	r5, r0
 800a324:	b118      	cbz	r0, 800a32e <__swbuf_r+0x12>
 800a326:	6983      	ldr	r3, [r0, #24]
 800a328:	b90b      	cbnz	r3, 800a32e <__swbuf_r+0x12>
 800a32a:	f000 f9e7 	bl	800a6fc <__sinit>
 800a32e:	4b21      	ldr	r3, [pc, #132]	; (800a3b4 <__swbuf_r+0x98>)
 800a330:	429c      	cmp	r4, r3
 800a332:	d12b      	bne.n	800a38c <__swbuf_r+0x70>
 800a334:	686c      	ldr	r4, [r5, #4]
 800a336:	69a3      	ldr	r3, [r4, #24]
 800a338:	60a3      	str	r3, [r4, #8]
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	071a      	lsls	r2, r3, #28
 800a33e:	d52f      	bpl.n	800a3a0 <__swbuf_r+0x84>
 800a340:	6923      	ldr	r3, [r4, #16]
 800a342:	b36b      	cbz	r3, 800a3a0 <__swbuf_r+0x84>
 800a344:	6923      	ldr	r3, [r4, #16]
 800a346:	6820      	ldr	r0, [r4, #0]
 800a348:	1ac0      	subs	r0, r0, r3
 800a34a:	6963      	ldr	r3, [r4, #20]
 800a34c:	b2f6      	uxtb	r6, r6
 800a34e:	4283      	cmp	r3, r0
 800a350:	4637      	mov	r7, r6
 800a352:	dc04      	bgt.n	800a35e <__swbuf_r+0x42>
 800a354:	4621      	mov	r1, r4
 800a356:	4628      	mov	r0, r5
 800a358:	f000 f93c 	bl	800a5d4 <_fflush_r>
 800a35c:	bb30      	cbnz	r0, 800a3ac <__swbuf_r+0x90>
 800a35e:	68a3      	ldr	r3, [r4, #8]
 800a360:	3b01      	subs	r3, #1
 800a362:	60a3      	str	r3, [r4, #8]
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	1c5a      	adds	r2, r3, #1
 800a368:	6022      	str	r2, [r4, #0]
 800a36a:	701e      	strb	r6, [r3, #0]
 800a36c:	6963      	ldr	r3, [r4, #20]
 800a36e:	3001      	adds	r0, #1
 800a370:	4283      	cmp	r3, r0
 800a372:	d004      	beq.n	800a37e <__swbuf_r+0x62>
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	07db      	lsls	r3, r3, #31
 800a378:	d506      	bpl.n	800a388 <__swbuf_r+0x6c>
 800a37a:	2e0a      	cmp	r6, #10
 800a37c:	d104      	bne.n	800a388 <__swbuf_r+0x6c>
 800a37e:	4621      	mov	r1, r4
 800a380:	4628      	mov	r0, r5
 800a382:	f000 f927 	bl	800a5d4 <_fflush_r>
 800a386:	b988      	cbnz	r0, 800a3ac <__swbuf_r+0x90>
 800a388:	4638      	mov	r0, r7
 800a38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a38c:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <__swbuf_r+0x9c>)
 800a38e:	429c      	cmp	r4, r3
 800a390:	d101      	bne.n	800a396 <__swbuf_r+0x7a>
 800a392:	68ac      	ldr	r4, [r5, #8]
 800a394:	e7cf      	b.n	800a336 <__swbuf_r+0x1a>
 800a396:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <__swbuf_r+0xa0>)
 800a398:	429c      	cmp	r4, r3
 800a39a:	bf08      	it	eq
 800a39c:	68ec      	ldreq	r4, [r5, #12]
 800a39e:	e7ca      	b.n	800a336 <__swbuf_r+0x1a>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f000 f81a 	bl	800a3dc <__swsetup_r>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d0cb      	beq.n	800a344 <__swbuf_r+0x28>
 800a3ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a3b0:	e7ea      	b.n	800a388 <__swbuf_r+0x6c>
 800a3b2:	bf00      	nop
 800a3b4:	0800b11c 	.word	0x0800b11c
 800a3b8:	0800b13c 	.word	0x0800b13c
 800a3bc:	0800b0fc 	.word	0x0800b0fc

0800a3c0 <__ascii_wctomb>:
 800a3c0:	b149      	cbz	r1, 800a3d6 <__ascii_wctomb+0x16>
 800a3c2:	2aff      	cmp	r2, #255	; 0xff
 800a3c4:	bf85      	ittet	hi
 800a3c6:	238a      	movhi	r3, #138	; 0x8a
 800a3c8:	6003      	strhi	r3, [r0, #0]
 800a3ca:	700a      	strbls	r2, [r1, #0]
 800a3cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3d0:	bf98      	it	ls
 800a3d2:	2001      	movls	r0, #1
 800a3d4:	4770      	bx	lr
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	4770      	bx	lr
	...

0800a3dc <__swsetup_r>:
 800a3dc:	4b32      	ldr	r3, [pc, #200]	; (800a4a8 <__swsetup_r+0xcc>)
 800a3de:	b570      	push	{r4, r5, r6, lr}
 800a3e0:	681d      	ldr	r5, [r3, #0]
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	b125      	cbz	r5, 800a3f2 <__swsetup_r+0x16>
 800a3e8:	69ab      	ldr	r3, [r5, #24]
 800a3ea:	b913      	cbnz	r3, 800a3f2 <__swsetup_r+0x16>
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f000 f985 	bl	800a6fc <__sinit>
 800a3f2:	4b2e      	ldr	r3, [pc, #184]	; (800a4ac <__swsetup_r+0xd0>)
 800a3f4:	429c      	cmp	r4, r3
 800a3f6:	d10f      	bne.n	800a418 <__swsetup_r+0x3c>
 800a3f8:	686c      	ldr	r4, [r5, #4]
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a400:	0719      	lsls	r1, r3, #28
 800a402:	d42c      	bmi.n	800a45e <__swsetup_r+0x82>
 800a404:	06dd      	lsls	r5, r3, #27
 800a406:	d411      	bmi.n	800a42c <__swsetup_r+0x50>
 800a408:	2309      	movs	r3, #9
 800a40a:	6033      	str	r3, [r6, #0]
 800a40c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a410:	81a3      	strh	r3, [r4, #12]
 800a412:	f04f 30ff 	mov.w	r0, #4294967295
 800a416:	e03e      	b.n	800a496 <__swsetup_r+0xba>
 800a418:	4b25      	ldr	r3, [pc, #148]	; (800a4b0 <__swsetup_r+0xd4>)
 800a41a:	429c      	cmp	r4, r3
 800a41c:	d101      	bne.n	800a422 <__swsetup_r+0x46>
 800a41e:	68ac      	ldr	r4, [r5, #8]
 800a420:	e7eb      	b.n	800a3fa <__swsetup_r+0x1e>
 800a422:	4b24      	ldr	r3, [pc, #144]	; (800a4b4 <__swsetup_r+0xd8>)
 800a424:	429c      	cmp	r4, r3
 800a426:	bf08      	it	eq
 800a428:	68ec      	ldreq	r4, [r5, #12]
 800a42a:	e7e6      	b.n	800a3fa <__swsetup_r+0x1e>
 800a42c:	0758      	lsls	r0, r3, #29
 800a42e:	d512      	bpl.n	800a456 <__swsetup_r+0x7a>
 800a430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a432:	b141      	cbz	r1, 800a446 <__swsetup_r+0x6a>
 800a434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a438:	4299      	cmp	r1, r3
 800a43a:	d002      	beq.n	800a442 <__swsetup_r+0x66>
 800a43c:	4630      	mov	r0, r6
 800a43e:	f7ff fb6f 	bl	8009b20 <_free_r>
 800a442:	2300      	movs	r3, #0
 800a444:	6363      	str	r3, [r4, #52]	; 0x34
 800a446:	89a3      	ldrh	r3, [r4, #12]
 800a448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a44c:	81a3      	strh	r3, [r4, #12]
 800a44e:	2300      	movs	r3, #0
 800a450:	6063      	str	r3, [r4, #4]
 800a452:	6923      	ldr	r3, [r4, #16]
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	f043 0308 	orr.w	r3, r3, #8
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	6923      	ldr	r3, [r4, #16]
 800a460:	b94b      	cbnz	r3, 800a476 <__swsetup_r+0x9a>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a46c:	d003      	beq.n	800a476 <__swsetup_r+0x9a>
 800a46e:	4621      	mov	r1, r4
 800a470:	4630      	mov	r0, r6
 800a472:	f000 fa07 	bl	800a884 <__smakebuf_r>
 800a476:	89a0      	ldrh	r0, [r4, #12]
 800a478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a47c:	f010 0301 	ands.w	r3, r0, #1
 800a480:	d00a      	beq.n	800a498 <__swsetup_r+0xbc>
 800a482:	2300      	movs	r3, #0
 800a484:	60a3      	str	r3, [r4, #8]
 800a486:	6963      	ldr	r3, [r4, #20]
 800a488:	425b      	negs	r3, r3
 800a48a:	61a3      	str	r3, [r4, #24]
 800a48c:	6923      	ldr	r3, [r4, #16]
 800a48e:	b943      	cbnz	r3, 800a4a2 <__swsetup_r+0xc6>
 800a490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a494:	d1ba      	bne.n	800a40c <__swsetup_r+0x30>
 800a496:	bd70      	pop	{r4, r5, r6, pc}
 800a498:	0781      	lsls	r1, r0, #30
 800a49a:	bf58      	it	pl
 800a49c:	6963      	ldrpl	r3, [r4, #20]
 800a49e:	60a3      	str	r3, [r4, #8]
 800a4a0:	e7f4      	b.n	800a48c <__swsetup_r+0xb0>
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	e7f7      	b.n	800a496 <__swsetup_r+0xba>
 800a4a6:	bf00      	nop
 800a4a8:	20000010 	.word	0x20000010
 800a4ac:	0800b11c 	.word	0x0800b11c
 800a4b0:	0800b13c 	.word	0x0800b13c
 800a4b4:	0800b0fc 	.word	0x0800b0fc

0800a4b8 <abort>:
 800a4b8:	b508      	push	{r3, lr}
 800a4ba:	2006      	movs	r0, #6
 800a4bc:	f000 fa52 	bl	800a964 <raise>
 800a4c0:	2001      	movs	r0, #1
 800a4c2:	f7f7 fdc9 	bl	8002058 <_exit>
	...

0800a4c8 <__sflush_r>:
 800a4c8:	898a      	ldrh	r2, [r1, #12]
 800a4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	0710      	lsls	r0, r2, #28
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	d458      	bmi.n	800a588 <__sflush_r+0xc0>
 800a4d6:	684b      	ldr	r3, [r1, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	dc05      	bgt.n	800a4e8 <__sflush_r+0x20>
 800a4dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	dc02      	bgt.n	800a4e8 <__sflush_r+0x20>
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ea:	2e00      	cmp	r6, #0
 800a4ec:	d0f9      	beq.n	800a4e2 <__sflush_r+0x1a>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4f4:	682f      	ldr	r7, [r5, #0]
 800a4f6:	602b      	str	r3, [r5, #0]
 800a4f8:	d032      	beq.n	800a560 <__sflush_r+0x98>
 800a4fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4fc:	89a3      	ldrh	r3, [r4, #12]
 800a4fe:	075a      	lsls	r2, r3, #29
 800a500:	d505      	bpl.n	800a50e <__sflush_r+0x46>
 800a502:	6863      	ldr	r3, [r4, #4]
 800a504:	1ac0      	subs	r0, r0, r3
 800a506:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a508:	b10b      	cbz	r3, 800a50e <__sflush_r+0x46>
 800a50a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a50c:	1ac0      	subs	r0, r0, r3
 800a50e:	2300      	movs	r3, #0
 800a510:	4602      	mov	r2, r0
 800a512:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a514:	6a21      	ldr	r1, [r4, #32]
 800a516:	4628      	mov	r0, r5
 800a518:	47b0      	blx	r6
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	d106      	bne.n	800a52e <__sflush_r+0x66>
 800a520:	6829      	ldr	r1, [r5, #0]
 800a522:	291d      	cmp	r1, #29
 800a524:	d82c      	bhi.n	800a580 <__sflush_r+0xb8>
 800a526:	4a2a      	ldr	r2, [pc, #168]	; (800a5d0 <__sflush_r+0x108>)
 800a528:	40ca      	lsrs	r2, r1
 800a52a:	07d6      	lsls	r6, r2, #31
 800a52c:	d528      	bpl.n	800a580 <__sflush_r+0xb8>
 800a52e:	2200      	movs	r2, #0
 800a530:	6062      	str	r2, [r4, #4]
 800a532:	04d9      	lsls	r1, r3, #19
 800a534:	6922      	ldr	r2, [r4, #16]
 800a536:	6022      	str	r2, [r4, #0]
 800a538:	d504      	bpl.n	800a544 <__sflush_r+0x7c>
 800a53a:	1c42      	adds	r2, r0, #1
 800a53c:	d101      	bne.n	800a542 <__sflush_r+0x7a>
 800a53e:	682b      	ldr	r3, [r5, #0]
 800a540:	b903      	cbnz	r3, 800a544 <__sflush_r+0x7c>
 800a542:	6560      	str	r0, [r4, #84]	; 0x54
 800a544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a546:	602f      	str	r7, [r5, #0]
 800a548:	2900      	cmp	r1, #0
 800a54a:	d0ca      	beq.n	800a4e2 <__sflush_r+0x1a>
 800a54c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a550:	4299      	cmp	r1, r3
 800a552:	d002      	beq.n	800a55a <__sflush_r+0x92>
 800a554:	4628      	mov	r0, r5
 800a556:	f7ff fae3 	bl	8009b20 <_free_r>
 800a55a:	2000      	movs	r0, #0
 800a55c:	6360      	str	r0, [r4, #52]	; 0x34
 800a55e:	e7c1      	b.n	800a4e4 <__sflush_r+0x1c>
 800a560:	6a21      	ldr	r1, [r4, #32]
 800a562:	2301      	movs	r3, #1
 800a564:	4628      	mov	r0, r5
 800a566:	47b0      	blx	r6
 800a568:	1c41      	adds	r1, r0, #1
 800a56a:	d1c7      	bne.n	800a4fc <__sflush_r+0x34>
 800a56c:	682b      	ldr	r3, [r5, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d0c4      	beq.n	800a4fc <__sflush_r+0x34>
 800a572:	2b1d      	cmp	r3, #29
 800a574:	d001      	beq.n	800a57a <__sflush_r+0xb2>
 800a576:	2b16      	cmp	r3, #22
 800a578:	d101      	bne.n	800a57e <__sflush_r+0xb6>
 800a57a:	602f      	str	r7, [r5, #0]
 800a57c:	e7b1      	b.n	800a4e2 <__sflush_r+0x1a>
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a584:	81a3      	strh	r3, [r4, #12]
 800a586:	e7ad      	b.n	800a4e4 <__sflush_r+0x1c>
 800a588:	690f      	ldr	r7, [r1, #16]
 800a58a:	2f00      	cmp	r7, #0
 800a58c:	d0a9      	beq.n	800a4e2 <__sflush_r+0x1a>
 800a58e:	0793      	lsls	r3, r2, #30
 800a590:	680e      	ldr	r6, [r1, #0]
 800a592:	bf08      	it	eq
 800a594:	694b      	ldreq	r3, [r1, #20]
 800a596:	600f      	str	r7, [r1, #0]
 800a598:	bf18      	it	ne
 800a59a:	2300      	movne	r3, #0
 800a59c:	eba6 0807 	sub.w	r8, r6, r7
 800a5a0:	608b      	str	r3, [r1, #8]
 800a5a2:	f1b8 0f00 	cmp.w	r8, #0
 800a5a6:	dd9c      	ble.n	800a4e2 <__sflush_r+0x1a>
 800a5a8:	6a21      	ldr	r1, [r4, #32]
 800a5aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5ac:	4643      	mov	r3, r8
 800a5ae:	463a      	mov	r2, r7
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	47b0      	blx	r6
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	dc06      	bgt.n	800a5c6 <__sflush_r+0xfe>
 800a5b8:	89a3      	ldrh	r3, [r4, #12]
 800a5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5be:	81a3      	strh	r3, [r4, #12]
 800a5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c4:	e78e      	b.n	800a4e4 <__sflush_r+0x1c>
 800a5c6:	4407      	add	r7, r0
 800a5c8:	eba8 0800 	sub.w	r8, r8, r0
 800a5cc:	e7e9      	b.n	800a5a2 <__sflush_r+0xda>
 800a5ce:	bf00      	nop
 800a5d0:	20400001 	.word	0x20400001

0800a5d4 <_fflush_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	690b      	ldr	r3, [r1, #16]
 800a5d8:	4605      	mov	r5, r0
 800a5da:	460c      	mov	r4, r1
 800a5dc:	b913      	cbnz	r3, 800a5e4 <_fflush_r+0x10>
 800a5de:	2500      	movs	r5, #0
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	b118      	cbz	r0, 800a5ee <_fflush_r+0x1a>
 800a5e6:	6983      	ldr	r3, [r0, #24]
 800a5e8:	b90b      	cbnz	r3, 800a5ee <_fflush_r+0x1a>
 800a5ea:	f000 f887 	bl	800a6fc <__sinit>
 800a5ee:	4b14      	ldr	r3, [pc, #80]	; (800a640 <_fflush_r+0x6c>)
 800a5f0:	429c      	cmp	r4, r3
 800a5f2:	d11b      	bne.n	800a62c <_fflush_r+0x58>
 800a5f4:	686c      	ldr	r4, [r5, #4]
 800a5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0ef      	beq.n	800a5de <_fflush_r+0xa>
 800a5fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a600:	07d0      	lsls	r0, r2, #31
 800a602:	d404      	bmi.n	800a60e <_fflush_r+0x3a>
 800a604:	0599      	lsls	r1, r3, #22
 800a606:	d402      	bmi.n	800a60e <_fflush_r+0x3a>
 800a608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a60a:	f000 f915 	bl	800a838 <__retarget_lock_acquire_recursive>
 800a60e:	4628      	mov	r0, r5
 800a610:	4621      	mov	r1, r4
 800a612:	f7ff ff59 	bl	800a4c8 <__sflush_r>
 800a616:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a618:	07da      	lsls	r2, r3, #31
 800a61a:	4605      	mov	r5, r0
 800a61c:	d4e0      	bmi.n	800a5e0 <_fflush_r+0xc>
 800a61e:	89a3      	ldrh	r3, [r4, #12]
 800a620:	059b      	lsls	r3, r3, #22
 800a622:	d4dd      	bmi.n	800a5e0 <_fflush_r+0xc>
 800a624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a626:	f000 f908 	bl	800a83a <__retarget_lock_release_recursive>
 800a62a:	e7d9      	b.n	800a5e0 <_fflush_r+0xc>
 800a62c:	4b05      	ldr	r3, [pc, #20]	; (800a644 <_fflush_r+0x70>)
 800a62e:	429c      	cmp	r4, r3
 800a630:	d101      	bne.n	800a636 <_fflush_r+0x62>
 800a632:	68ac      	ldr	r4, [r5, #8]
 800a634:	e7df      	b.n	800a5f6 <_fflush_r+0x22>
 800a636:	4b04      	ldr	r3, [pc, #16]	; (800a648 <_fflush_r+0x74>)
 800a638:	429c      	cmp	r4, r3
 800a63a:	bf08      	it	eq
 800a63c:	68ec      	ldreq	r4, [r5, #12]
 800a63e:	e7da      	b.n	800a5f6 <_fflush_r+0x22>
 800a640:	0800b11c 	.word	0x0800b11c
 800a644:	0800b13c 	.word	0x0800b13c
 800a648:	0800b0fc 	.word	0x0800b0fc

0800a64c <std>:
 800a64c:	2300      	movs	r3, #0
 800a64e:	b510      	push	{r4, lr}
 800a650:	4604      	mov	r4, r0
 800a652:	e9c0 3300 	strd	r3, r3, [r0]
 800a656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a65a:	6083      	str	r3, [r0, #8]
 800a65c:	8181      	strh	r1, [r0, #12]
 800a65e:	6643      	str	r3, [r0, #100]	; 0x64
 800a660:	81c2      	strh	r2, [r0, #14]
 800a662:	6183      	str	r3, [r0, #24]
 800a664:	4619      	mov	r1, r3
 800a666:	2208      	movs	r2, #8
 800a668:	305c      	adds	r0, #92	; 0x5c
 800a66a:	f7fd fb91 	bl	8007d90 <memset>
 800a66e:	4b05      	ldr	r3, [pc, #20]	; (800a684 <std+0x38>)
 800a670:	6263      	str	r3, [r4, #36]	; 0x24
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <std+0x3c>)
 800a674:	62a3      	str	r3, [r4, #40]	; 0x28
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <std+0x40>)
 800a678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a67a:	4b05      	ldr	r3, [pc, #20]	; (800a690 <std+0x44>)
 800a67c:	6224      	str	r4, [r4, #32]
 800a67e:	6323      	str	r3, [r4, #48]	; 0x30
 800a680:	bd10      	pop	{r4, pc}
 800a682:	bf00      	nop
 800a684:	0800a99d 	.word	0x0800a99d
 800a688:	0800a9bf 	.word	0x0800a9bf
 800a68c:	0800a9f7 	.word	0x0800a9f7
 800a690:	0800aa1b 	.word	0x0800aa1b

0800a694 <_cleanup_r>:
 800a694:	4901      	ldr	r1, [pc, #4]	; (800a69c <_cleanup_r+0x8>)
 800a696:	f000 b8af 	b.w	800a7f8 <_fwalk_reent>
 800a69a:	bf00      	nop
 800a69c:	0800a5d5 	.word	0x0800a5d5

0800a6a0 <__sfmoreglue>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	1e4a      	subs	r2, r1, #1
 800a6a4:	2568      	movs	r5, #104	; 0x68
 800a6a6:	4355      	muls	r5, r2
 800a6a8:	460e      	mov	r6, r1
 800a6aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6ae:	f7ff fa87 	bl	8009bc0 <_malloc_r>
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	b140      	cbz	r0, 800a6c8 <__sfmoreglue+0x28>
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	e9c0 1600 	strd	r1, r6, [r0]
 800a6bc:	300c      	adds	r0, #12
 800a6be:	60a0      	str	r0, [r4, #8]
 800a6c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6c4:	f7fd fb64 	bl	8007d90 <memset>
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}

0800a6cc <__sfp_lock_acquire>:
 800a6cc:	4801      	ldr	r0, [pc, #4]	; (800a6d4 <__sfp_lock_acquire+0x8>)
 800a6ce:	f000 b8b3 	b.w	800a838 <__retarget_lock_acquire_recursive>
 800a6d2:	bf00      	nop
 800a6d4:	200006a0 	.word	0x200006a0

0800a6d8 <__sfp_lock_release>:
 800a6d8:	4801      	ldr	r0, [pc, #4]	; (800a6e0 <__sfp_lock_release+0x8>)
 800a6da:	f000 b8ae 	b.w	800a83a <__retarget_lock_release_recursive>
 800a6de:	bf00      	nop
 800a6e0:	200006a0 	.word	0x200006a0

0800a6e4 <__sinit_lock_acquire>:
 800a6e4:	4801      	ldr	r0, [pc, #4]	; (800a6ec <__sinit_lock_acquire+0x8>)
 800a6e6:	f000 b8a7 	b.w	800a838 <__retarget_lock_acquire_recursive>
 800a6ea:	bf00      	nop
 800a6ec:	2000069b 	.word	0x2000069b

0800a6f0 <__sinit_lock_release>:
 800a6f0:	4801      	ldr	r0, [pc, #4]	; (800a6f8 <__sinit_lock_release+0x8>)
 800a6f2:	f000 b8a2 	b.w	800a83a <__retarget_lock_release_recursive>
 800a6f6:	bf00      	nop
 800a6f8:	2000069b 	.word	0x2000069b

0800a6fc <__sinit>:
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	4604      	mov	r4, r0
 800a700:	f7ff fff0 	bl	800a6e4 <__sinit_lock_acquire>
 800a704:	69a3      	ldr	r3, [r4, #24]
 800a706:	b11b      	cbz	r3, 800a710 <__sinit+0x14>
 800a708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a70c:	f7ff bff0 	b.w	800a6f0 <__sinit_lock_release>
 800a710:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a714:	6523      	str	r3, [r4, #80]	; 0x50
 800a716:	4b13      	ldr	r3, [pc, #76]	; (800a764 <__sinit+0x68>)
 800a718:	4a13      	ldr	r2, [pc, #76]	; (800a768 <__sinit+0x6c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a71e:	42a3      	cmp	r3, r4
 800a720:	bf04      	itt	eq
 800a722:	2301      	moveq	r3, #1
 800a724:	61a3      	streq	r3, [r4, #24]
 800a726:	4620      	mov	r0, r4
 800a728:	f000 f820 	bl	800a76c <__sfp>
 800a72c:	6060      	str	r0, [r4, #4]
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 f81c 	bl	800a76c <__sfp>
 800a734:	60a0      	str	r0, [r4, #8]
 800a736:	4620      	mov	r0, r4
 800a738:	f000 f818 	bl	800a76c <__sfp>
 800a73c:	2200      	movs	r2, #0
 800a73e:	60e0      	str	r0, [r4, #12]
 800a740:	2104      	movs	r1, #4
 800a742:	6860      	ldr	r0, [r4, #4]
 800a744:	f7ff ff82 	bl	800a64c <std>
 800a748:	68a0      	ldr	r0, [r4, #8]
 800a74a:	2201      	movs	r2, #1
 800a74c:	2109      	movs	r1, #9
 800a74e:	f7ff ff7d 	bl	800a64c <std>
 800a752:	68e0      	ldr	r0, [r4, #12]
 800a754:	2202      	movs	r2, #2
 800a756:	2112      	movs	r1, #18
 800a758:	f7ff ff78 	bl	800a64c <std>
 800a75c:	2301      	movs	r3, #1
 800a75e:	61a3      	str	r3, [r4, #24]
 800a760:	e7d2      	b.n	800a708 <__sinit+0xc>
 800a762:	bf00      	nop
 800a764:	0800ad78 	.word	0x0800ad78
 800a768:	0800a695 	.word	0x0800a695

0800a76c <__sfp>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	4607      	mov	r7, r0
 800a770:	f7ff ffac 	bl	800a6cc <__sfp_lock_acquire>
 800a774:	4b1e      	ldr	r3, [pc, #120]	; (800a7f0 <__sfp+0x84>)
 800a776:	681e      	ldr	r6, [r3, #0]
 800a778:	69b3      	ldr	r3, [r6, #24]
 800a77a:	b913      	cbnz	r3, 800a782 <__sfp+0x16>
 800a77c:	4630      	mov	r0, r6
 800a77e:	f7ff ffbd 	bl	800a6fc <__sinit>
 800a782:	3648      	adds	r6, #72	; 0x48
 800a784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a788:	3b01      	subs	r3, #1
 800a78a:	d503      	bpl.n	800a794 <__sfp+0x28>
 800a78c:	6833      	ldr	r3, [r6, #0]
 800a78e:	b30b      	cbz	r3, 800a7d4 <__sfp+0x68>
 800a790:	6836      	ldr	r6, [r6, #0]
 800a792:	e7f7      	b.n	800a784 <__sfp+0x18>
 800a794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a798:	b9d5      	cbnz	r5, 800a7d0 <__sfp+0x64>
 800a79a:	4b16      	ldr	r3, [pc, #88]	; (800a7f4 <__sfp+0x88>)
 800a79c:	60e3      	str	r3, [r4, #12]
 800a79e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7a2:	6665      	str	r5, [r4, #100]	; 0x64
 800a7a4:	f000 f847 	bl	800a836 <__retarget_lock_init_recursive>
 800a7a8:	f7ff ff96 	bl	800a6d8 <__sfp_lock_release>
 800a7ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7b4:	6025      	str	r5, [r4, #0]
 800a7b6:	61a5      	str	r5, [r4, #24]
 800a7b8:	2208      	movs	r2, #8
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7c0:	f7fd fae6 	bl	8007d90 <memset>
 800a7c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d0:	3468      	adds	r4, #104	; 0x68
 800a7d2:	e7d9      	b.n	800a788 <__sfp+0x1c>
 800a7d4:	2104      	movs	r1, #4
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	f7ff ff62 	bl	800a6a0 <__sfmoreglue>
 800a7dc:	4604      	mov	r4, r0
 800a7de:	6030      	str	r0, [r6, #0]
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	d1d5      	bne.n	800a790 <__sfp+0x24>
 800a7e4:	f7ff ff78 	bl	800a6d8 <__sfp_lock_release>
 800a7e8:	230c      	movs	r3, #12
 800a7ea:	603b      	str	r3, [r7, #0]
 800a7ec:	e7ee      	b.n	800a7cc <__sfp+0x60>
 800a7ee:	bf00      	nop
 800a7f0:	0800ad78 	.word	0x0800ad78
 800a7f4:	ffff0001 	.word	0xffff0001

0800a7f8 <_fwalk_reent>:
 800a7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	4688      	mov	r8, r1
 800a800:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a804:	2700      	movs	r7, #0
 800a806:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a80a:	f1b9 0901 	subs.w	r9, r9, #1
 800a80e:	d505      	bpl.n	800a81c <_fwalk_reent+0x24>
 800a810:	6824      	ldr	r4, [r4, #0]
 800a812:	2c00      	cmp	r4, #0
 800a814:	d1f7      	bne.n	800a806 <_fwalk_reent+0xe>
 800a816:	4638      	mov	r0, r7
 800a818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81c:	89ab      	ldrh	r3, [r5, #12]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d907      	bls.n	800a832 <_fwalk_reent+0x3a>
 800a822:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a826:	3301      	adds	r3, #1
 800a828:	d003      	beq.n	800a832 <_fwalk_reent+0x3a>
 800a82a:	4629      	mov	r1, r5
 800a82c:	4630      	mov	r0, r6
 800a82e:	47c0      	blx	r8
 800a830:	4307      	orrs	r7, r0
 800a832:	3568      	adds	r5, #104	; 0x68
 800a834:	e7e9      	b.n	800a80a <_fwalk_reent+0x12>

0800a836 <__retarget_lock_init_recursive>:
 800a836:	4770      	bx	lr

0800a838 <__retarget_lock_acquire_recursive>:
 800a838:	4770      	bx	lr

0800a83a <__retarget_lock_release_recursive>:
 800a83a:	4770      	bx	lr

0800a83c <__swhatbuf_r>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	460e      	mov	r6, r1
 800a840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a844:	2900      	cmp	r1, #0
 800a846:	b096      	sub	sp, #88	; 0x58
 800a848:	4614      	mov	r4, r2
 800a84a:	461d      	mov	r5, r3
 800a84c:	da07      	bge.n	800a85e <__swhatbuf_r+0x22>
 800a84e:	2300      	movs	r3, #0
 800a850:	602b      	str	r3, [r5, #0]
 800a852:	89b3      	ldrh	r3, [r6, #12]
 800a854:	061a      	lsls	r2, r3, #24
 800a856:	d410      	bmi.n	800a87a <__swhatbuf_r+0x3e>
 800a858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a85c:	e00e      	b.n	800a87c <__swhatbuf_r+0x40>
 800a85e:	466a      	mov	r2, sp
 800a860:	f000 f902 	bl	800aa68 <_fstat_r>
 800a864:	2800      	cmp	r0, #0
 800a866:	dbf2      	blt.n	800a84e <__swhatbuf_r+0x12>
 800a868:	9a01      	ldr	r2, [sp, #4]
 800a86a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a86e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a872:	425a      	negs	r2, r3
 800a874:	415a      	adcs	r2, r3
 800a876:	602a      	str	r2, [r5, #0]
 800a878:	e7ee      	b.n	800a858 <__swhatbuf_r+0x1c>
 800a87a:	2340      	movs	r3, #64	; 0x40
 800a87c:	2000      	movs	r0, #0
 800a87e:	6023      	str	r3, [r4, #0]
 800a880:	b016      	add	sp, #88	; 0x58
 800a882:	bd70      	pop	{r4, r5, r6, pc}

0800a884 <__smakebuf_r>:
 800a884:	898b      	ldrh	r3, [r1, #12]
 800a886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a888:	079d      	lsls	r5, r3, #30
 800a88a:	4606      	mov	r6, r0
 800a88c:	460c      	mov	r4, r1
 800a88e:	d507      	bpl.n	800a8a0 <__smakebuf_r+0x1c>
 800a890:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	6123      	str	r3, [r4, #16]
 800a898:	2301      	movs	r3, #1
 800a89a:	6163      	str	r3, [r4, #20]
 800a89c:	b002      	add	sp, #8
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	ab01      	add	r3, sp, #4
 800a8a2:	466a      	mov	r2, sp
 800a8a4:	f7ff ffca 	bl	800a83c <__swhatbuf_r>
 800a8a8:	9900      	ldr	r1, [sp, #0]
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f7ff f987 	bl	8009bc0 <_malloc_r>
 800a8b2:	b948      	cbnz	r0, 800a8c8 <__smakebuf_r+0x44>
 800a8b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8b8:	059a      	lsls	r2, r3, #22
 800a8ba:	d4ef      	bmi.n	800a89c <__smakebuf_r+0x18>
 800a8bc:	f023 0303 	bic.w	r3, r3, #3
 800a8c0:	f043 0302 	orr.w	r3, r3, #2
 800a8c4:	81a3      	strh	r3, [r4, #12]
 800a8c6:	e7e3      	b.n	800a890 <__smakebuf_r+0xc>
 800a8c8:	4b0d      	ldr	r3, [pc, #52]	; (800a900 <__smakebuf_r+0x7c>)
 800a8ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	6020      	str	r0, [r4, #0]
 800a8d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d4:	81a3      	strh	r3, [r4, #12]
 800a8d6:	9b00      	ldr	r3, [sp, #0]
 800a8d8:	6163      	str	r3, [r4, #20]
 800a8da:	9b01      	ldr	r3, [sp, #4]
 800a8dc:	6120      	str	r0, [r4, #16]
 800a8de:	b15b      	cbz	r3, 800a8f8 <__smakebuf_r+0x74>
 800a8e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	f000 f8d1 	bl	800aa8c <_isatty_r>
 800a8ea:	b128      	cbz	r0, 800a8f8 <__smakebuf_r+0x74>
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	f023 0303 	bic.w	r3, r3, #3
 800a8f2:	f043 0301 	orr.w	r3, r3, #1
 800a8f6:	81a3      	strh	r3, [r4, #12]
 800a8f8:	89a0      	ldrh	r0, [r4, #12]
 800a8fa:	4305      	orrs	r5, r0
 800a8fc:	81a5      	strh	r5, [r4, #12]
 800a8fe:	e7cd      	b.n	800a89c <__smakebuf_r+0x18>
 800a900:	0800a695 	.word	0x0800a695

0800a904 <_malloc_usable_size_r>:
 800a904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a908:	1f18      	subs	r0, r3, #4
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	bfbc      	itt	lt
 800a90e:	580b      	ldrlt	r3, [r1, r0]
 800a910:	18c0      	addlt	r0, r0, r3
 800a912:	4770      	bx	lr

0800a914 <_raise_r>:
 800a914:	291f      	cmp	r1, #31
 800a916:	b538      	push	{r3, r4, r5, lr}
 800a918:	4604      	mov	r4, r0
 800a91a:	460d      	mov	r5, r1
 800a91c:	d904      	bls.n	800a928 <_raise_r+0x14>
 800a91e:	2316      	movs	r3, #22
 800a920:	6003      	str	r3, [r0, #0]
 800a922:	f04f 30ff 	mov.w	r0, #4294967295
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a92a:	b112      	cbz	r2, 800a932 <_raise_r+0x1e>
 800a92c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a930:	b94b      	cbnz	r3, 800a946 <_raise_r+0x32>
 800a932:	4620      	mov	r0, r4
 800a934:	f000 f830 	bl	800a998 <_getpid_r>
 800a938:	462a      	mov	r2, r5
 800a93a:	4601      	mov	r1, r0
 800a93c:	4620      	mov	r0, r4
 800a93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a942:	f000 b817 	b.w	800a974 <_kill_r>
 800a946:	2b01      	cmp	r3, #1
 800a948:	d00a      	beq.n	800a960 <_raise_r+0x4c>
 800a94a:	1c59      	adds	r1, r3, #1
 800a94c:	d103      	bne.n	800a956 <_raise_r+0x42>
 800a94e:	2316      	movs	r3, #22
 800a950:	6003      	str	r3, [r0, #0]
 800a952:	2001      	movs	r0, #1
 800a954:	e7e7      	b.n	800a926 <_raise_r+0x12>
 800a956:	2400      	movs	r4, #0
 800a958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a95c:	4628      	mov	r0, r5
 800a95e:	4798      	blx	r3
 800a960:	2000      	movs	r0, #0
 800a962:	e7e0      	b.n	800a926 <_raise_r+0x12>

0800a964 <raise>:
 800a964:	4b02      	ldr	r3, [pc, #8]	; (800a970 <raise+0xc>)
 800a966:	4601      	mov	r1, r0
 800a968:	6818      	ldr	r0, [r3, #0]
 800a96a:	f7ff bfd3 	b.w	800a914 <_raise_r>
 800a96e:	bf00      	nop
 800a970:	20000010 	.word	0x20000010

0800a974 <_kill_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	4d07      	ldr	r5, [pc, #28]	; (800a994 <_kill_r+0x20>)
 800a978:	2300      	movs	r3, #0
 800a97a:	4604      	mov	r4, r0
 800a97c:	4608      	mov	r0, r1
 800a97e:	4611      	mov	r1, r2
 800a980:	602b      	str	r3, [r5, #0]
 800a982:	f7f7 fb59 	bl	8002038 <_kill>
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	d102      	bne.n	800a990 <_kill_r+0x1c>
 800a98a:	682b      	ldr	r3, [r5, #0]
 800a98c:	b103      	cbz	r3, 800a990 <_kill_r+0x1c>
 800a98e:	6023      	str	r3, [r4, #0]
 800a990:	bd38      	pop	{r3, r4, r5, pc}
 800a992:	bf00      	nop
 800a994:	20000694 	.word	0x20000694

0800a998 <_getpid_r>:
 800a998:	f7f7 bb46 	b.w	8002028 <_getpid>

0800a99c <__sread>:
 800a99c:	b510      	push	{r4, lr}
 800a99e:	460c      	mov	r4, r1
 800a9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a4:	f000 f894 	bl	800aad0 <_read_r>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	bfab      	itete	ge
 800a9ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a9b0:	181b      	addge	r3, r3, r0
 800a9b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9b6:	bfac      	ite	ge
 800a9b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9ba:	81a3      	strhlt	r3, [r4, #12]
 800a9bc:	bd10      	pop	{r4, pc}

0800a9be <__swrite>:
 800a9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c2:	461f      	mov	r7, r3
 800a9c4:	898b      	ldrh	r3, [r1, #12]
 800a9c6:	05db      	lsls	r3, r3, #23
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	4616      	mov	r6, r2
 800a9ce:	d505      	bpl.n	800a9dc <__swrite+0x1e>
 800a9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f000 f868 	bl	800aaac <_lseek_r>
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9e6:	81a3      	strh	r3, [r4, #12]
 800a9e8:	4632      	mov	r2, r6
 800a9ea:	463b      	mov	r3, r7
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f2:	f000 b817 	b.w	800aa24 <_write_r>

0800a9f6 <__sseek>:
 800a9f6:	b510      	push	{r4, lr}
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fe:	f000 f855 	bl	800aaac <_lseek_r>
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	bf15      	itete	ne
 800aa08:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa12:	81a3      	strheq	r3, [r4, #12]
 800aa14:	bf18      	it	ne
 800aa16:	81a3      	strhne	r3, [r4, #12]
 800aa18:	bd10      	pop	{r4, pc}

0800aa1a <__sclose>:
 800aa1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa1e:	f000 b813 	b.w	800aa48 <_close_r>
	...

0800aa24 <_write_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	4d07      	ldr	r5, [pc, #28]	; (800aa44 <_write_r+0x20>)
 800aa28:	4604      	mov	r4, r0
 800aa2a:	4608      	mov	r0, r1
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	2200      	movs	r2, #0
 800aa30:	602a      	str	r2, [r5, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	f7f7 fb37 	bl	80020a6 <_write>
 800aa38:	1c43      	adds	r3, r0, #1
 800aa3a:	d102      	bne.n	800aa42 <_write_r+0x1e>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	b103      	cbz	r3, 800aa42 <_write_r+0x1e>
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	bd38      	pop	{r3, r4, r5, pc}
 800aa44:	20000694 	.word	0x20000694

0800aa48 <_close_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4d06      	ldr	r5, [pc, #24]	; (800aa64 <_close_r+0x1c>)
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4608      	mov	r0, r1
 800aa52:	602b      	str	r3, [r5, #0]
 800aa54:	f7f7 fb43 	bl	80020de <_close>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	d102      	bne.n	800aa62 <_close_r+0x1a>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	b103      	cbz	r3, 800aa62 <_close_r+0x1a>
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	20000694 	.word	0x20000694

0800aa68 <_fstat_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	4d07      	ldr	r5, [pc, #28]	; (800aa88 <_fstat_r+0x20>)
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	4604      	mov	r4, r0
 800aa70:	4608      	mov	r0, r1
 800aa72:	4611      	mov	r1, r2
 800aa74:	602b      	str	r3, [r5, #0]
 800aa76:	f7f7 fb3e 	bl	80020f6 <_fstat>
 800aa7a:	1c43      	adds	r3, r0, #1
 800aa7c:	d102      	bne.n	800aa84 <_fstat_r+0x1c>
 800aa7e:	682b      	ldr	r3, [r5, #0]
 800aa80:	b103      	cbz	r3, 800aa84 <_fstat_r+0x1c>
 800aa82:	6023      	str	r3, [r4, #0]
 800aa84:	bd38      	pop	{r3, r4, r5, pc}
 800aa86:	bf00      	nop
 800aa88:	20000694 	.word	0x20000694

0800aa8c <_isatty_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4d06      	ldr	r5, [pc, #24]	; (800aaa8 <_isatty_r+0x1c>)
 800aa90:	2300      	movs	r3, #0
 800aa92:	4604      	mov	r4, r0
 800aa94:	4608      	mov	r0, r1
 800aa96:	602b      	str	r3, [r5, #0]
 800aa98:	f7f7 fb3d 	bl	8002116 <_isatty>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d102      	bne.n	800aaa6 <_isatty_r+0x1a>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	b103      	cbz	r3, 800aaa6 <_isatty_r+0x1a>
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	20000694 	.word	0x20000694

0800aaac <_lseek_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4d07      	ldr	r5, [pc, #28]	; (800aacc <_lseek_r+0x20>)
 800aab0:	4604      	mov	r4, r0
 800aab2:	4608      	mov	r0, r1
 800aab4:	4611      	mov	r1, r2
 800aab6:	2200      	movs	r2, #0
 800aab8:	602a      	str	r2, [r5, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	f7f7 fb36 	bl	800212c <_lseek>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_lseek_r+0x1e>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_lseek_r+0x1e>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	20000694 	.word	0x20000694

0800aad0 <_read_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4d07      	ldr	r5, [pc, #28]	; (800aaf0 <_read_r+0x20>)
 800aad4:	4604      	mov	r4, r0
 800aad6:	4608      	mov	r0, r1
 800aad8:	4611      	mov	r1, r2
 800aada:	2200      	movs	r2, #0
 800aadc:	602a      	str	r2, [r5, #0]
 800aade:	461a      	mov	r2, r3
 800aae0:	f7f7 fac4 	bl	800206c <_read>
 800aae4:	1c43      	adds	r3, r0, #1
 800aae6:	d102      	bne.n	800aaee <_read_r+0x1e>
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	b103      	cbz	r3, 800aaee <_read_r+0x1e>
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	bd38      	pop	{r3, r4, r5, pc}
 800aaf0:	20000694 	.word	0x20000694

0800aaf4 <_init>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	bf00      	nop
 800aaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafa:	bc08      	pop	{r3}
 800aafc:	469e      	mov	lr, r3
 800aafe:	4770      	bx	lr

0800ab00 <_fini>:
 800ab00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab02:	bf00      	nop
 800ab04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab06:	bc08      	pop	{r3}
 800ab08:	469e      	mov	lr, r3
 800ab0a:	4770      	bx	lr
